
RELAY_MODBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08005cdc  08005cdc  00006cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006060  08006060  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006060  08006060  00007060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006068  08006068  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006068  08006068  00007068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800606c  0800606c  0000706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006070  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  2000000c  0800607c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  0800607c  00008a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010137  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c37  00000000  00000000  00018173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0001adb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8a  00000000  00000000  0001bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ed0  00000000  00000000  0001c922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001266c  00000000  00000000  0003e7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee90  00000000  00000000  00050e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fcee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b54  00000000  00000000  0011fd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00123888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005cc4 	.word	0x08005cc4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005cc4 	.word	0x08005cc4

08000204 <TbxPortInterruptsDisable>:
TbxPortInterruptsDisable:
  /* Store state of the currently enabled/disabled interrupts in register 0. On the 
   * ARM Cortex this is stored in CPU register PRIMASK. Note that register 0 is used by
   * GCC for storing the return value of a function.
   */
  mrs   r0, primask
 8000204:	f3ef 8010 	mrs	r0, PRIMASK
  /* Disable the interrupts by setting all bits in the CPU register PRIMASK to a value
   * of 1, which means the actication of the exception is prevented.
   */
  cpsid i
 8000208:	b672      	cpsid	i
  /* Return from this function by branching back to the location stored in the link
   * register.
   */
  bx    lr
 800020a:	4770      	bx	lr

0800020c <TbxPortInterruptsRestore>:
TbxPortInterruptsRestore:
  /* Restore the state of the interrupts by storing the value of register 0 in the CPU
   * register PRIMASK. Note that register 0 is used by GCC for passing the first function
   * parameter.
   */
  msr   primask, r0
 800020c:	f380 8810 	msr	PRIMASK, r0
  /* Return from this function by branching back to the location stored in the link
   * register.
   */
  bx    lr
 8000210:	4770      	bx	lr
	...

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fa61 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f821 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8d9 	bl	80006c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8ad 	bl	8000674 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 800051a:	f000 f887 	bl	800062c <MX_TIM10_Init>

  modbusTp = TbxMbRtuCreate(10, TBX_MB_UART_PORT1, TBX_MB_UART_9600BPS,
 800051e:	2301      	movs	r3, #1
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2203      	movs	r2, #3
 8000526:	2100      	movs	r1, #0
 8000528:	200a      	movs	r0, #10
 800052a:	f003 fb31 	bl	8003b90 <TbxMbRtuCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a06      	ldr	r2, [pc, #24]	@ (800054c <main+0x48>)
 8000532:	6013      	str	r3, [r2, #0]
                            TBX_MB_UART_1_STOPBITS, TBX_MB_EVEN_PARITY);
  modbusServer = TbxMbServerCreate(modbusTp);
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <main+0x48>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f004 f8c5 	bl	80046c8 <TbxMbServerCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a03      	ldr	r2, [pc, #12]	@ (8000550 <main+0x4c>)
 8000542:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TbxMbEventTask();
 8000544:	f003 fa3c 	bl	80039c0 <TbxMbEventTask>
 8000548:	e7fc      	b.n	8000544 <main+0x40>
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	2000002c 	.word	0x2000002c

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	@ 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 fb82 	bl	8005c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	@ (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	@ 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	@ (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000594:	2300      	movs	r3, #0
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005a0:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <SystemClock_Config+0xd4>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005cc:	2354      	movs	r3, #84	@ 0x54
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 f903 	bl	80017ec <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005ec:	f000 f8da 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2102      	movs	r1, #2
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fda3 	bl	8001158 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000618:	f000 f8c4 	bl	80007a4 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_TIM10_Init+0x40>)
 8000632:	4a0f      	ldr	r2, [pc, #60]	@ (8000670 <MX_TIM10_Init+0x44>)
 8000634:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4199;
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <MX_TIM10_Init+0x40>)
 8000638:	f241 0267 	movw	r2, #4199	@ 0x1067
 800063c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <MX_TIM10_Init+0x40>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_TIM10_Init+0x40>)
 8000646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800064a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <MX_TIM10_Init+0x40>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_TIM10_Init+0x40>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_TIM10_Init+0x40>)
 800065a:	f001 fb65 	bl	8001d28 <HAL_TIM_Base_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000664:	f000 f89e 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000030 	.word	0x20000030
 8000670:	40014400 	.word	0x40014400

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <MX_USART2_UART_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000680:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000688:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800068c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 800069c:	220c      	movs	r2, #12
 800069e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006ae:	f001 fc37 	bl	8001f20 <HAL_UART_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80006b8:	f000 f874 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000078 	.word	0x20000078
 80006c4:	40004400 	.word	0x40004400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000798 <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a25      	ldr	r2, [pc, #148]	@ (8000798 <MX_GPIO_Init+0xd0>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2121      	movs	r1, #33	@ 0x21
 8000752:	4812      	ldr	r0, [pc, #72]	@ (800079c <MX_GPIO_Init+0xd4>)
 8000754:	f000 fce6 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_GPIO_Init+0xd8>)
 8000770:	f000 fb44 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000774:	2321      	movs	r3, #33	@ 0x21
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0xd4>)
 800078c:	f000 fb36 	bl	8000dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020800 	.word	0x40020800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ee:	2007      	movs	r0, #7
 80007f0:	f000 fa30 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0b      	ldr	r2, [pc, #44]	@ (800083c <HAL_TIM_Base_MspInit+0x3c>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d10d      	bne.n	800082e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <HAL_TIM_Base_MspInit+0x40>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a09      	ldr	r2, [pc, #36]	@ (8000840 <HAL_TIM_Base_MspInit+0x40>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
 8000822:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <HAL_TIM_Base_MspInit+0x40>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40014400 	.word	0x40014400
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a1d      	ldr	r2, [pc, #116]	@ (80008d8 <HAL_UART_MspInit+0x94>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d133      	bne.n	80008ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <HAL_UART_MspInit+0x98>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <HAL_UART_MspInit+0x98>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <HAL_UART_MspInit+0x98>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_UART_MspInit+0x98>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a14      	ldr	r2, [pc, #80]	@ (80008dc <HAL_UART_MspInit+0x98>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_UART_MspInit+0x98>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800089e:	230c      	movs	r3, #12
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ae:	2307      	movs	r3, #7
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <HAL_UART_MspInit+0x9c>)
 80008ba:	f000 fa9f 	bl	8000dfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	2026      	movs	r0, #38	@ 0x26
 80008c4:	f000 f9d1 	bl	8000c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c8:	2026      	movs	r0, #38	@ 0x26
 80008ca:	f000 f9ea 	bl	8000ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	@ 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <UsageFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093a:	f000 f89b 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <USART2_IRQHandler+0x10>)
 800094a:	f001 fb39 	bl	8001fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000078 	.word	0x20000078

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f005 f967 	bl	8005c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fda9 	bl	8000504 <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c0:	08006070 	.word	0x08006070
  ldr r2, =_sbss
 80009c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c8:	20000a90 	.word	0x20000a90

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f92b 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fed4 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f943 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a50:	f000 f90b 	bl	8000c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	200000c0 	.word	0x200000c0

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200000c0 	.word	0x200000c0

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4907      	ldr	r1, [pc, #28]	@ (8000b50 <__NVIC_EnableIRQ+0x38>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	@ (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	@ (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	@ 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	@ 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff29 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff3e 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff8e 	bl	8000ba8 <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5d 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff31 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffa2 	bl	8000c10 <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff feda 	bl	8000a9c <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d008      	beq.n	8000d08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e052      	b.n	8000dae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0216 	bic.w	r2, r2, #22
 8000d16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	695a      	ldr	r2, [r3, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d103      	bne.n	8000d38 <HAL_DMA_Abort+0x62>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d007      	beq.n	8000d48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0208 	bic.w	r2, r2, #8
 8000d46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0201 	bic.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d58:	e013      	b.n	8000d82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d5a:	f7ff fe9f 	bl	8000a9c <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d90c      	bls.n	8000d82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2220      	movs	r2, #32
 8000d6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2203      	movs	r2, #3
 8000d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e015      	b.n	8000dae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1e4      	bne.n	8000d5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d94:	223f      	movs	r2, #63	@ 0x3f
 8000d96:	409a      	lsls	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d004      	beq.n	8000dd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e00c      	b.n	8000dee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0201 	bic.w	r2, r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e165      	b.n	80010e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8154 	bne.w	80010de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d005      	beq.n	8000e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d017      	beq.n	8000eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0203 	and.w	r2, r3, #3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80ae 	beq.w	80010de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b5d      	ldr	r3, [pc, #372]	@ (80010fc <HAL_GPIO_Init+0x300>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80010fc <HAL_GPIO_Init+0x300>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f92:	4b5a      	ldr	r3, [pc, #360]	@ (80010fc <HAL_GPIO_Init+0x300>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a58      	ldr	r2, [pc, #352]	@ (8001100 <HAL_GPIO_Init+0x304>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8001104 <HAL_GPIO_Init+0x308>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d025      	beq.n	8001016 <HAL_GPIO_Init+0x21a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4e      	ldr	r2, [pc, #312]	@ (8001108 <HAL_GPIO_Init+0x30c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01f      	beq.n	8001012 <HAL_GPIO_Init+0x216>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800110c <HAL_GPIO_Init+0x310>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x212>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	@ (8001110 <HAL_GPIO_Init+0x314>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x20e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4b      	ldr	r2, [pc, #300]	@ (8001114 <HAL_GPIO_Init+0x318>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x20a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4a      	ldr	r2, [pc, #296]	@ (8001118 <HAL_GPIO_Init+0x31c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x206>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	@ (800111c <HAL_GPIO_Init+0x320>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x202>
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	e00c      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00a      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8001002:	2305      	movs	r3, #5
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8001006:	2304      	movs	r3, #4
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8001016:	2300      	movs	r3, #0
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001028:	4935      	ldr	r1, [pc, #212]	@ (8001100 <HAL_GPIO_Init+0x304>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001036:	4b3a      	ldr	r3, [pc, #232]	@ (8001120 <HAL_GPIO_Init+0x324>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105a:	4a31      	ldr	r2, [pc, #196]	@ (8001120 <HAL_GPIO_Init+0x324>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001060:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <HAL_GPIO_Init+0x324>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001084:	4a26      	ldr	r2, [pc, #152]	@ (8001120 <HAL_GPIO_Init+0x324>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108a:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <HAL_GPIO_Init+0x324>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <HAL_GPIO_Init+0x324>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <HAL_GPIO_Init+0x324>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <HAL_GPIO_Init+0x324>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f ae96 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3724      	adds	r7, #36	@ 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40021400 	.word	0x40021400
 800111c:	40021800 	.word	0x40021800
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001140:	e003      	b.n	800114a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0cc      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800116c:	4b68      	ldr	r3, [pc, #416]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d90c      	bls.n	8001194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	4b65      	ldr	r3, [pc, #404]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b63      	ldr	r3, [pc, #396]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0b8      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011ac:	4b59      	ldr	r3, [pc, #356]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a58      	ldr	r2, [pc, #352]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c4:	4b53      	ldr	r3, [pc, #332]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4a52      	ldr	r2, [pc, #328]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d0:	4b50      	ldr	r3, [pc, #320]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	494d      	ldr	r1, [pc, #308]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d044      	beq.n	8001278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b47      	ldr	r3, [pc, #284]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d119      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e07f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d003      	beq.n	8001216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001212:	2b03      	cmp	r3, #3
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001216:	4b3f      	ldr	r3, [pc, #252]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e06f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	4b3b      	ldr	r3, [pc, #236]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e067      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 0203 	bic.w	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4934      	ldr	r1, [pc, #208]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001248:	f7ff fc28 	bl	8000a9c <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	e00a      	b.n	8001266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff fc24 	bl	8000a9c <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e04f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 020c 	and.w	r2, r3, #12
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	429a      	cmp	r2, r3
 8001276:	d1eb      	bne.n	8001250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001278:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d20c      	bcs.n	80012a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e032      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4916      	ldr	r1, [pc, #88]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	490e      	ldr	r1, [pc, #56]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012de:	f000 f855 	bl	800138c <HAL_RCC_GetSysClockFreq>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	490a      	ldr	r1, [pc, #40]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	5ccb      	ldrb	r3, [r1, r3]
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	4a09      	ldr	r2, [pc, #36]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_RCC_ClockConfig+0x1c8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fb88 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00
 8001314:	40023800 	.word	0x40023800
 8001318:	08005e48 	.word	0x08005e48
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_RCC_GetHCLKFreq+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000

0800133c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001340:	f7ff fff0 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 8001344:	4602      	mov	r2, r0
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	0a9b      	lsrs	r3, r3, #10
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	4903      	ldr	r1, [pc, #12]	@ (8001360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001352:	5ccb      	ldrb	r3, [r1, r3]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	08005e58 	.word	0x08005e58

08001364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001368:	f7ff ffdc 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	0b5b      	lsrs	r3, r3, #13
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	4903      	ldr	r1, [pc, #12]	@ (8001388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	08005e58 	.word	0x08005e58

0800138c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800138c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001390:	b0ae      	sub	sp, #184	@ 0xb8
 8001392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b2:	4bcb      	ldr	r3, [pc, #812]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	f200 8206 	bhi.w	80017cc <HAL_RCC_GetSysClockFreq+0x440>
 80013c0:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013fd 	.word	0x080013fd
 80013cc:	080017cd 	.word	0x080017cd
 80013d0:	080017cd 	.word	0x080017cd
 80013d4:	080017cd 	.word	0x080017cd
 80013d8:	08001405 	.word	0x08001405
 80013dc:	080017cd 	.word	0x080017cd
 80013e0:	080017cd 	.word	0x080017cd
 80013e4:	080017cd 	.word	0x080017cd
 80013e8:	0800140d 	.word	0x0800140d
 80013ec:	080017cd 	.word	0x080017cd
 80013f0:	080017cd 	.word	0x080017cd
 80013f4:	080017cd 	.word	0x080017cd
 80013f8:	080015fd 	.word	0x080015fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013fc:	4bb9      	ldr	r3, [pc, #740]	@ (80016e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80013fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001402:	e1e7      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001404:	4bb8      	ldr	r3, [pc, #736]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800140a:	e1e3      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800140c:	4bb4      	ldr	r3, [pc, #720]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001418:	4bb1      	ldr	r3, [pc, #708]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d071      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001424:	4bae      	ldr	r3, [pc, #696]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	2200      	movs	r2, #0
 800142c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001430:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001434:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800143c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800144a:	4622      	mov	r2, r4
 800144c:	462b      	mov	r3, r5
 800144e:	f04f 0000 	mov.w	r0, #0
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	0159      	lsls	r1, r3, #5
 8001458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800145c:	0150      	lsls	r0, r2, #5
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4621      	mov	r1, r4
 8001464:	1a51      	subs	r1, r2, r1
 8001466:	6439      	str	r1, [r7, #64]	@ 0x40
 8001468:	4629      	mov	r1, r5
 800146a:	eb63 0301 	sbc.w	r3, r3, r1
 800146e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800147c:	4649      	mov	r1, r9
 800147e:	018b      	lsls	r3, r1, #6
 8001480:	4641      	mov	r1, r8
 8001482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001486:	4641      	mov	r1, r8
 8001488:	018a      	lsls	r2, r1, #6
 800148a:	4641      	mov	r1, r8
 800148c:	1a51      	subs	r1, r2, r1
 800148e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001490:	4649      	mov	r1, r9
 8001492:	eb63 0301 	sbc.w	r3, r3, r1
 8001496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014a4:	4649      	mov	r1, r9
 80014a6:	00cb      	lsls	r3, r1, #3
 80014a8:	4641      	mov	r1, r8
 80014aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ae:	4641      	mov	r1, r8
 80014b0:	00ca      	lsls	r2, r1, #3
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	4622      	mov	r2, r4
 80014ba:	189b      	adds	r3, r3, r2
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80014be:	462b      	mov	r3, r5
 80014c0:	460a      	mov	r2, r1
 80014c2:	eb42 0303 	adc.w	r3, r2, r3
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014d4:	4629      	mov	r1, r5
 80014d6:	024b      	lsls	r3, r1, #9
 80014d8:	4621      	mov	r1, r4
 80014da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014de:	4621      	mov	r1, r4
 80014e0:	024a      	lsls	r2, r1, #9
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014f8:	f7fe fe8c 	bl	8000214 <__aeabi_uldivmod>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4613      	mov	r3, r2
 8001502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001506:	e067      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001508:	4b75      	ldr	r3, [pc, #468]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	2200      	movs	r2, #0
 8001510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001514:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800151c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001520:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001522:	2300      	movs	r3, #0
 8001524:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001526:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800152a:	4622      	mov	r2, r4
 800152c:	462b      	mov	r3, r5
 800152e:	f04f 0000 	mov.w	r0, #0
 8001532:	f04f 0100 	mov.w	r1, #0
 8001536:	0159      	lsls	r1, r3, #5
 8001538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800153c:	0150      	lsls	r0, r2, #5
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4621      	mov	r1, r4
 8001544:	1a51      	subs	r1, r2, r1
 8001546:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001548:	4629      	mov	r1, r5
 800154a:	eb63 0301 	sbc.w	r3, r3, r1
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800155c:	4649      	mov	r1, r9
 800155e:	018b      	lsls	r3, r1, #6
 8001560:	4641      	mov	r1, r8
 8001562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001566:	4641      	mov	r1, r8
 8001568:	018a      	lsls	r2, r1, #6
 800156a:	4641      	mov	r1, r8
 800156c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001570:	4649      	mov	r1, r9
 8001572:	eb63 0b01 	sbc.w	fp, r3, r1
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001582:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800158a:	4692      	mov	sl, r2
 800158c:	469b      	mov	fp, r3
 800158e:	4623      	mov	r3, r4
 8001590:	eb1a 0303 	adds.w	r3, sl, r3
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	462b      	mov	r3, r5
 8001598:	eb4b 0303 	adc.w	r3, fp, r3
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015aa:	4629      	mov	r1, r5
 80015ac:	028b      	lsls	r3, r1, #10
 80015ae:	4621      	mov	r1, r4
 80015b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015b4:	4621      	mov	r1, r4
 80015b6:	028a      	lsls	r2, r1, #10
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015c0:	2200      	movs	r2, #0
 80015c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80015c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80015c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015ca:	f7fe fe23 	bl	8000214 <__aeabi_uldivmod>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4613      	mov	r3, r2
 80015d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015d8:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	0c1b      	lsrs	r3, r3, #16
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	3301      	adds	r3, #1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80015ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015fa:	e0eb      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015fc:	4b38      	ldr	r3, [pc, #224]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001604:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001608:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d06b      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001614:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	2200      	movs	r2, #0
 800161c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800161e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001626:	663b      	str	r3, [r7, #96]	@ 0x60
 8001628:	2300      	movs	r3, #0
 800162a:	667b      	str	r3, [r7, #100]	@ 0x64
 800162c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001630:	4622      	mov	r2, r4
 8001632:	462b      	mov	r3, r5
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	f04f 0100 	mov.w	r1, #0
 800163c:	0159      	lsls	r1, r3, #5
 800163e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001642:	0150      	lsls	r0, r2, #5
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4621      	mov	r1, r4
 800164a:	1a51      	subs	r1, r2, r1
 800164c:	61b9      	str	r1, [r7, #24]
 800164e:	4629      	mov	r1, r5
 8001650:	eb63 0301 	sbc.w	r3, r3, r1
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001662:	4659      	mov	r1, fp
 8001664:	018b      	lsls	r3, r1, #6
 8001666:	4651      	mov	r1, sl
 8001668:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800166c:	4651      	mov	r1, sl
 800166e:	018a      	lsls	r2, r1, #6
 8001670:	4651      	mov	r1, sl
 8001672:	ebb2 0801 	subs.w	r8, r2, r1
 8001676:	4659      	mov	r1, fp
 8001678:	eb63 0901 	sbc.w	r9, r3, r1
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001688:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800168c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001690:	4690      	mov	r8, r2
 8001692:	4699      	mov	r9, r3
 8001694:	4623      	mov	r3, r4
 8001696:	eb18 0303 	adds.w	r3, r8, r3
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	462b      	mov	r3, r5
 800169e:	eb49 0303 	adc.w	r3, r9, r3
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016b0:	4629      	mov	r1, r5
 80016b2:	024b      	lsls	r3, r1, #9
 80016b4:	4621      	mov	r1, r4
 80016b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ba:	4621      	mov	r1, r4
 80016bc:	024a      	lsls	r2, r1, #9
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016c6:	2200      	movs	r2, #0
 80016c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016d0:	f7fe fda0 	bl	8000214 <__aeabi_uldivmod>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4613      	mov	r3, r2
 80016da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016de:	e065      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x420>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ec:	4b3d      	ldr	r3, [pc, #244]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	2200      	movs	r2, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	4611      	mov	r1, r2
 80016f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80016fe:	2300      	movs	r3, #0
 8001700:	657b      	str	r3, [r7, #84]	@ 0x54
 8001702:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001706:	4642      	mov	r2, r8
 8001708:	464b      	mov	r3, r9
 800170a:	f04f 0000 	mov.w	r0, #0
 800170e:	f04f 0100 	mov.w	r1, #0
 8001712:	0159      	lsls	r1, r3, #5
 8001714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001718:	0150      	lsls	r0, r2, #5
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4641      	mov	r1, r8
 8001720:	1a51      	subs	r1, r2, r1
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	4649      	mov	r1, r9
 8001726:	eb63 0301 	sbc.w	r3, r3, r1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001738:	4659      	mov	r1, fp
 800173a:	018b      	lsls	r3, r1, #6
 800173c:	4651      	mov	r1, sl
 800173e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001742:	4651      	mov	r1, sl
 8001744:	018a      	lsls	r2, r1, #6
 8001746:	4651      	mov	r1, sl
 8001748:	1a54      	subs	r4, r2, r1
 800174a:	4659      	mov	r1, fp
 800174c:	eb63 0501 	sbc.w	r5, r3, r1
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	00eb      	lsls	r3, r5, #3
 800175a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800175e:	00e2      	lsls	r2, r4, #3
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	4643      	mov	r3, r8
 8001766:	18e3      	adds	r3, r4, r3
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	464b      	mov	r3, r9
 800176c:	eb45 0303 	adc.w	r3, r5, r3
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800177e:	4629      	mov	r1, r5
 8001780:	028b      	lsls	r3, r1, #10
 8001782:	4621      	mov	r1, r4
 8001784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001788:	4621      	mov	r1, r4
 800178a:	028a      	lsls	r2, r1, #10
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001794:	2200      	movs	r2, #0
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001798:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800179a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800179e:	f7fe fd39 	bl	8000214 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4613      	mov	r3, r2
 80017a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0f1b      	lsrs	r3, r3, #28
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80017ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ca:	e003      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	37b8      	adds	r7, #184	@ 0xb8
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	00f42400 	.word	0x00f42400

080017ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e28d      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8083 	beq.w	8001912 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800180c:	4b94      	ldr	r3, [pc, #592]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d019      	beq.n	800184c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001818:	4b91      	ldr	r3, [pc, #580]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001820:	2b08      	cmp	r3, #8
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001824:	4b8e      	ldr	r3, [pc, #568]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001830:	d00c      	beq.n	800184c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001832:	4b8b      	ldr	r3, [pc, #556]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d112      	bne.n	8001864 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183e:	4b88      	ldr	r3, [pc, #544]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001846:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800184a:	d10b      	bne.n	8001864 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	4b84      	ldr	r3, [pc, #528]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d05b      	beq.n	8001910 <HAL_RCC_OscConfig+0x124>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d157      	bne.n	8001910 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e25a      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800186c:	d106      	bne.n	800187c <HAL_RCC_OscConfig+0x90>
 800186e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7b      	ldr	r2, [pc, #492]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e01d      	b.n	80018b8 <HAL_RCC_OscConfig+0xcc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0xb4>
 8001886:	4b76      	ldr	r3, [pc, #472]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a75      	ldr	r2, [pc, #468]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b73      	ldr	r3, [pc, #460]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a72      	ldr	r2, [pc, #456]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0xcc>
 80018a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f8ec 	bl	8000a9c <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f8e8 	bl	8000a9c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e21f      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b61      	ldr	r3, [pc, #388]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0xdc>
 80018e6:	e014      	b.n	8001912 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff f8d8 	bl	8000a9c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff f8d4 	bl	8000a9c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	@ 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e20b      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x104>
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d06f      	beq.n	80019fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800191e:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b00      	cmp	r3, #0
 8001928:	d017      	beq.n	800195a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800192a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001932:	2b08      	cmp	r3, #8
 8001934:	d105      	bne.n	8001942 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001936:	4b4a      	ldr	r3, [pc, #296]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b47      	ldr	r3, [pc, #284]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194e:	4b44      	ldr	r3, [pc, #272]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	4b41      	ldr	r3, [pc, #260]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x186>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1d3      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4937      	ldr	r1, [pc, #220]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	e03a      	b.n	80019fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001990:	4b34      	ldr	r3, [pc, #208]	@ (8001a64 <HAL_RCC_OscConfig+0x278>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff f881 	bl	8000a9c <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff f87d 	bl	8000a9c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1b4      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4925      	ldr	r1, [pc, #148]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e015      	b.n	80019fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_RCC_OscConfig+0x278>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f860 	bl	8000a9c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff f85c 	bl	8000a9c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e193      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d036      	beq.n	8001a78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d016      	beq.n	8001a40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff f840 	bl	8000a9c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff f83c 	bl	8000a9c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e173      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x234>
 8001a3e:	e01b      	b.n	8001a78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff f829 	bl	8000a9c <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	e00e      	b.n	8001a6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f825 	bl	8000a9c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d907      	bls.n	8001a6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e15c      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
 8001a60:	40023800 	.word	0x40023800
 8001a64:	42470000 	.word	0x42470000
 8001a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ea      	bne.n	8001a4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8097 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b83      	ldr	r3, [pc, #524]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b79      	ldr	r3, [pc, #484]	@ (8001c9c <HAL_RCC_OscConfig+0x4b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b76      	ldr	r3, [pc, #472]	@ (8001c9c <HAL_RCC_OscConfig+0x4b0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	@ (8001c9c <HAL_RCC_OscConfig+0x4b0>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7fe ffe5 	bl	8000a9c <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7fe ffe1 	bl	8000a9c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e118      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c9c <HAL_RCC_OscConfig+0x4b0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x31e>
 8001afc:	4b66      	ldr	r3, [pc, #408]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b00:	4a65      	ldr	r2, [pc, #404]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b08:	e01c      	b.n	8001b44 <HAL_RCC_OscConfig+0x358>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x340>
 8001b12:	4b61      	ldr	r3, [pc, #388]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b16:	4a60      	ldr	r2, [pc, #384]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	4a5d      	ldr	r2, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0x358>
 8001b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b30:	4a59      	ldr	r2, [pc, #356]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b38:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3c:	4a56      	ldr	r2, [pc, #344]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	f023 0304 	bic.w	r3, r3, #4
 8001b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d015      	beq.n	8001b78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7fe ffa6 	bl	8000a9c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7fe ffa2 	bl	8000a9c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0d7      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0ee      	beq.n	8001b54 <HAL_RCC_OscConfig+0x368>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7fe ff90 	bl	8000a9c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7fe ff8c 	bl	8000a9c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0c1      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	4b40      	ldr	r3, [pc, #256]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1ee      	bne.n	8001b80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	4a3a      	ldr	r2, [pc, #232]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80ad 	beq.w	8001d18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bbe:	4b36      	ldr	r3, [pc, #216]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d060      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d145      	bne.n	8001c5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7fe ff60 	bl	8000a9c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7fe ff5c 	bl	8000a9c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e093      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	019b      	lsls	r3, r3, #6
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	3b01      	subs	r3, #1
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	071b      	lsls	r3, r3, #28
 8001c2a:	491b      	ldr	r1, [pc, #108]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b4>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7fe ff31 	bl	8000a9c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe ff2d 	bl	8000a9c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e064      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x452>
 8001c5c:	e05c      	b.n	8001d18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7fe ff1a 	bl	8000a9c <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe ff16 	bl	8000a9c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e04d      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x480>
 8001c8a:	e045      	b.n	8001d18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e040      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <HAL_RCC_OscConfig+0x538>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d030      	beq.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d129      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d122      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d119      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	3b01      	subs	r3, #1
 8001cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d10f      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e041      	b.n	8001dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fd56 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 f82e 	bl	8001dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a46      	ldr	r2, [pc, #280]	@ (8001ef4 <TIM_Base_SetConfig+0x12c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de6:	d00f      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a43      	ldr	r2, [pc, #268]	@ (8001ef8 <TIM_Base_SetConfig+0x130>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00b      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a42      	ldr	r2, [pc, #264]	@ (8001efc <TIM_Base_SetConfig+0x134>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a41      	ldr	r2, [pc, #260]	@ (8001f00 <TIM_Base_SetConfig+0x138>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a40      	ldr	r2, [pc, #256]	@ (8001f04 <TIM_Base_SetConfig+0x13c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d108      	bne.n	8001e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a35      	ldr	r2, [pc, #212]	@ (8001ef4 <TIM_Base_SetConfig+0x12c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e28:	d027      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a32      	ldr	r2, [pc, #200]	@ (8001ef8 <TIM_Base_SetConfig+0x130>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d023      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a31      	ldr	r2, [pc, #196]	@ (8001efc <TIM_Base_SetConfig+0x134>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01f      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a30      	ldr	r2, [pc, #192]	@ (8001f00 <TIM_Base_SetConfig+0x138>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01b      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <TIM_Base_SetConfig+0x13c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d017      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f08 <TIM_Base_SetConfig+0x140>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2d      	ldr	r2, [pc, #180]	@ (8001f0c <TIM_Base_SetConfig+0x144>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00f      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f10 <TIM_Base_SetConfig+0x148>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00b      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2b      	ldr	r2, [pc, #172]	@ (8001f14 <TIM_Base_SetConfig+0x14c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <TIM_Base_SetConfig+0x150>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d003      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a29      	ldr	r2, [pc, #164]	@ (8001f1c <TIM_Base_SetConfig+0x154>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d108      	bne.n	8001e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ef4 <TIM_Base_SetConfig+0x12c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <TIM_Base_SetConfig+0xf8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <TIM_Base_SetConfig+0x13c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d103      	bne.n	8001ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f023 0201 	bic.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40000800 	.word	0x40000800
 8001f00:	40000c00 	.word	0x40000c00
 8001f04:	40010400 	.word	0x40010400
 8001f08:	40014000 	.word	0x40014000
 8001f0c:	40014400 	.word	0x40014400
 8001f10:	40014800 	.word	0x40014800
 8001f14:	40001800 	.word	0x40001800
 8001f18:	40001c00 	.word	0x40001c00
 8001f1c:	40002000 	.word	0x40002000

08001f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e042      	b.n	8001fb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fc7c 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	@ 0x24
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fc85 	bl	8002874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_UART_IRQHandler+0x66>
 8002012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fb69 	bl	80026f6 <UART_Receive_IT>
      return;
 8002024:	e25b      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80de 	beq.w	80021ec <HAL_UART_IRQHandler+0x22c>
 8002030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800203c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002040:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80d1 	beq.w	80021ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800204a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_UART_IRQHandler+0xae>
 8002056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800206e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_UART_IRQHandler+0xd2>
 800207a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_UART_IRQHandler+0xf6>
 800209e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f043 0204 	orr.w	r2, r3, #4
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d011      	beq.n	80020e6 <HAL_UART_IRQHandler+0x126>
 80020c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f043 0208 	orr.w	r2, r3, #8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 81f2 	beq.w	80024d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_UART_IRQHandler+0x14e>
 80020fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 faf4 	bl	80026f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002118:	2b40      	cmp	r3, #64	@ 0x40
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <HAL_UART_IRQHandler+0x17a>
 8002132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04f      	beq.n	80021da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f9fc 	bl	8002538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	2b40      	cmp	r3, #64	@ 0x40
 800214c:	d141      	bne.n	80021d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002158:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800215c:	e853 3f00 	ldrex	r3, [r3]
 8002160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3314      	adds	r3, #20
 8002176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800217a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800218a:	e841 2300 	strex	r3, r2, [r1]
 800218e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1d9      	bne.n	800214e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d013      	beq.n	80021ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	4a7e      	ldr	r2, [pc, #504]	@ (80023a0 <HAL_UART_IRQHandler+0x3e0>)
 80021a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fe01 	bl	8000db6 <HAL_DMA_Abort_IT>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d016      	beq.n	80021e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021c4:	4610      	mov	r0, r2
 80021c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	e00e      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f99e 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d0:	e00a      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f99a 	bl	800250c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	e006      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f996 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021e6:	e175      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e8:	bf00      	nop
    return;
 80021ea:	e173      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 814f 	bne.w	8002494 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8148 	beq.w	8002494 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8141 	beq.w	8002494 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	2b40      	cmp	r3, #64	@ 0x40
 8002234:	f040 80b6 	bne.w	80023a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8145 	beq.w	80024d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002256:	429a      	cmp	r2, r3
 8002258:	f080 813e 	bcs.w	80024d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002262:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800226e:	f000 8088 	beq.w	8002382 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002280:	e853 3f00 	ldrex	r3, [r3]
 8002284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800228c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800229e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022ae:	e841 2300 	strex	r3, r2, [r1]
 80022b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1d9      	bne.n	8002272 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3314      	adds	r3, #20
 80022de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e1      	bne.n	80022be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3314      	adds	r3, #20
 8002300:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002304:	e853 3f00 	ldrex	r3, [r3]
 8002308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800230a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800230c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3314      	adds	r3, #20
 800231a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800231e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002320:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002322:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002324:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002326:	e841 2300 	strex	r3, r2, [r1]
 800232a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800232c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e3      	bne.n	80022fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800234a:	e853 3f00 	ldrex	r3, [r3]
 800234e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002352:	f023 0310 	bic.w	r3, r3, #16
 8002356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002364:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002366:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002368:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800236a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800236c:	e841 2300 	strex	r3, r2, [r1]
 8002370:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e3      	bne.n	8002340 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fcaa 	bl	8000cd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002390:	b29b      	uxth	r3, r3
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b29b      	uxth	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8c1 	bl	8002520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800239e:	e09b      	b.n	80024d8 <HAL_UART_IRQHandler+0x518>
 80023a0:	080025ff 	.word	0x080025ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 808e 	beq.w	80024dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8089 	beq.w	80024dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	e853 3f00 	ldrex	r3, [r3]
 80023d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80023f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e3      	bne.n	80023ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	623b      	str	r3, [r7, #32]
   return(result);
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3314      	adds	r3, #20
 8002422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002426:	633a      	str	r2, [r7, #48]	@ 0x30
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800242c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e3      	bne.n	8002402 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	e853 3f00 	ldrex	r3, [r3]
 8002456:	60fb      	str	r3, [r7, #12]
   return(result);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0310 	bic.w	r3, r3, #16
 800245e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800246c:	61fa      	str	r2, [r7, #28]
 800246e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	617b      	str	r3, [r7, #20]
   return(result);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e3      	bne.n	8002448 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f847 	bl	8002520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002492:	e023      	b.n	80024dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <HAL_UART_IRQHandler+0x4f4>
 80024a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f8ba 	bl	8002626 <UART_Transmit_IT>
    return;
 80024b2:	e014      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <HAL_UART_IRQHandler+0x51e>
 80024c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8fa 	bl	80026c6 <UART_EndTransmit_IT>
    return;
 80024d2:	e004      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
    return;
 80024d4:	bf00      	nop
 80024d6:	e002      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
      return;
 80024d8:	bf00      	nop
 80024da:	e000      	b.n	80024de <HAL_UART_IRQHandler+0x51e>
      return;
 80024dc:	bf00      	nop
  }
}
 80024de:	37e8      	adds	r7, #232	@ 0xe8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002538:	b480      	push	{r7}
 800253a:	b095      	sub	sp, #84	@ 0x54
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	330c      	adds	r3, #12
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254a:	e853 3f00 	ldrex	r3, [r3]
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002560:	643a      	str	r2, [r7, #64]	@ 0x40
 8002562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002564:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002568:	e841 2300 	strex	r3, r2, [r1]
 800256c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800256e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e5      	bne.n	8002540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3314      	adds	r3, #20
 800257a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	e853 3f00 	ldrex	r3, [r3]
 8002582:	61fb      	str	r3, [r7, #28]
   return(result);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002594:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800259c:	e841 2300 	strex	r3, r2, [r1]
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d119      	bne.n	80025e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	330c      	adds	r3, #12
 80025b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	e853 3f00 	ldrex	r3, [r3]
 80025be:	60bb      	str	r3, [r7, #8]
   return(result);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f023 0310 	bic.w	r3, r3, #16
 80025c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025d0:	61ba      	str	r2, [r7, #24]
 80025d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d4:	6979      	ldr	r1, [r7, #20]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	e841 2300 	strex	r3, r2, [r1]
 80025dc:	613b      	str	r3, [r7, #16]
   return(result);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e5      	bne.n	80025b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025f2:	bf00      	nop
 80025f4:	3754      	adds	r7, #84	@ 0x54
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff ff77 	bl	800250c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b21      	cmp	r3, #33	@ 0x21
 8002638:	d13e      	bne.n	80026b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002642:	d114      	bne.n	800266e <UART_Transmit_IT+0x48>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002660:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	1c9a      	adds	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	621a      	str	r2, [r3, #32]
 800266c:	e008      	b.n	8002680 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	1c59      	adds	r1, r3, #1
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6211      	str	r1, [r2, #32]
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4619      	mov	r1, r3
 800268e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10f      	bne.n	80026b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fefc 	bl	80024e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b08c      	sub	sp, #48	@ 0x30
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b22      	cmp	r3, #34	@ 0x22
 8002708:	f040 80ae 	bne.w	8002868 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002714:	d117      	bne.n	8002746 <UART_Receive_IT+0x50>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002734:	b29a      	uxth	r2, r3
 8002736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002738:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	1c9a      	adds	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
 8002744:	e026      	b.n	8002794 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002758:	d007      	beq.n	800276a <UART_Receive_IT+0x74>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <UART_Receive_IT+0x82>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	e008      	b.n	800278a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002784:	b2da      	uxtb	r2, r3
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4619      	mov	r1, r3
 80027a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d15d      	bne.n	8002864 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0220 	bic.w	r2, r2, #32
 80027b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d135      	bne.n	800285a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	e853 3f00 	ldrex	r3, [r3]
 8002802:	613b      	str	r3, [r7, #16]
   return(result);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f023 0310 	bic.w	r3, r3, #16
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002814:	623a      	str	r2, [r7, #32]
 8002816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002818:	69f9      	ldr	r1, [r7, #28]
 800281a:	6a3a      	ldr	r2, [r7, #32]
 800281c:	e841 2300 	strex	r3, r2, [r1]
 8002820:	61bb      	str	r3, [r7, #24]
   return(result);
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e5      	bne.n	80027f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b10      	cmp	r3, #16
 8002834:	d10a      	bne.n	800284c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fe64 	bl	8002520 <HAL_UARTEx_RxEventCallback>
 8002858:	e002      	b.n	8002860 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fe4c 	bl	80024f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e002      	b.n	800286a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3730      	adds	r7, #48	@ 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002878:	b0c0      	sub	sp, #256	@ 0x100
 800287a:	af00      	add	r7, sp, #0
 800287c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002890:	68d9      	ldr	r1, [r3, #12]
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	ea40 0301 	orr.w	r3, r0, r1
 800289c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028cc:	f021 010c 	bic.w	r1, r1, #12
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028da:	430b      	orrs	r3, r1
 80028dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ee:	6999      	ldr	r1, [r3, #24]
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	ea40 0301 	orr.w	r3, r0, r1
 80028fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b8f      	ldr	r3, [pc, #572]	@ (8002b40 <UART_SetConfig+0x2cc>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d005      	beq.n	8002914 <UART_SetConfig+0xa0>
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b44 <UART_SetConfig+0x2d0>)
 8002910:	429a      	cmp	r2, r3
 8002912:	d104      	bne.n	800291e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002914:	f7fe fd26 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 8002918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800291c:	e003      	b.n	8002926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800291e:	f7fe fd0d 	bl	800133c <HAL_RCC_GetPCLK1Freq>
 8002922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002930:	f040 810c 	bne.w	8002b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002938:	2200      	movs	r2, #0
 800293a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800293e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002946:	4622      	mov	r2, r4
 8002948:	462b      	mov	r3, r5
 800294a:	1891      	adds	r1, r2, r2
 800294c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800294e:	415b      	adcs	r3, r3
 8002950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002956:	4621      	mov	r1, r4
 8002958:	eb12 0801 	adds.w	r8, r2, r1
 800295c:	4629      	mov	r1, r5
 800295e:	eb43 0901 	adc.w	r9, r3, r1
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800296e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002976:	4690      	mov	r8, r2
 8002978:	4699      	mov	r9, r3
 800297a:	4623      	mov	r3, r4
 800297c:	eb18 0303 	adds.w	r3, r8, r3
 8002980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002984:	462b      	mov	r3, r5
 8002986:	eb49 0303 	adc.w	r3, r9, r3
 800298a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800299a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800299e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029a2:	460b      	mov	r3, r1
 80029a4:	18db      	adds	r3, r3, r3
 80029a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80029a8:	4613      	mov	r3, r2
 80029aa:	eb42 0303 	adc.w	r3, r2, r3
 80029ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80029b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029b8:	f7fd fc2c 	bl	8000214 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4b61      	ldr	r3, [pc, #388]	@ (8002b48 <UART_SetConfig+0x2d4>)
 80029c2:	fba3 2302 	umull	r2, r3, r3, r2
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	011c      	lsls	r4, r3, #4
 80029ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029dc:	4642      	mov	r2, r8
 80029de:	464b      	mov	r3, r9
 80029e0:	1891      	adds	r1, r2, r2
 80029e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029e4:	415b      	adcs	r3, r3
 80029e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029ec:	4641      	mov	r1, r8
 80029ee:	eb12 0a01 	adds.w	sl, r2, r1
 80029f2:	4649      	mov	r1, r9
 80029f4:	eb43 0b01 	adc.w	fp, r3, r1
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a0c:	4692      	mov	sl, r2
 8002a0e:	469b      	mov	fp, r3
 8002a10:	4643      	mov	r3, r8
 8002a12:	eb1a 0303 	adds.w	r3, sl, r3
 8002a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	18db      	adds	r3, r3, r3
 8002a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a3e:	4613      	mov	r3, r2
 8002a40:	eb42 0303 	adc.w	r3, r2, r3
 8002a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a4e:	f7fd fbe1 	bl	8000214 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <UART_SetConfig+0x2d4>)
 8002a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2264      	movs	r2, #100	@ 0x64
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	1acb      	subs	r3, r1, r3
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a6e:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <UART_SetConfig+0x2d4>)
 8002a70:	fba3 2302 	umull	r2, r3, r3, r2
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a7c:	441c      	add	r4, r3
 8002a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a90:	4642      	mov	r2, r8
 8002a92:	464b      	mov	r3, r9
 8002a94:	1891      	adds	r1, r2, r2
 8002a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a98:	415b      	adcs	r3, r3
 8002a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	1851      	adds	r1, r2, r1
 8002aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	414b      	adcs	r3, r1
 8002aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ab8:	4659      	mov	r1, fp
 8002aba:	00cb      	lsls	r3, r1, #3
 8002abc:	4651      	mov	r1, sl
 8002abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	00ca      	lsls	r2, r1, #3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	4642      	mov	r2, r8
 8002ace:	189b      	adds	r3, r3, r2
 8002ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	eb42 0303 	adc.w	r3, r2, r3
 8002adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002af4:	460b      	mov	r3, r1
 8002af6:	18db      	adds	r3, r3, r3
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afa:	4613      	mov	r3, r2
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b0a:	f7fd fb83 	bl	8000214 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <UART_SetConfig+0x2d4>)
 8002b14:	fba3 1302 	umull	r1, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2164      	movs	r1, #100	@ 0x64
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	3332      	adds	r3, #50	@ 0x32
 8002b26:	4a08      	ldr	r2, [pc, #32]	@ (8002b48 <UART_SetConfig+0x2d4>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 0207 	and.w	r2, r3, #7
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4422      	add	r2, r4
 8002b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b3c:	e106      	b.n	8002d4c <UART_SetConfig+0x4d8>
 8002b3e:	bf00      	nop
 8002b40:	40011000 	.word	0x40011000
 8002b44:	40011400 	.word	0x40011400
 8002b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b50:	2200      	movs	r2, #0
 8002b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b5e:	4642      	mov	r2, r8
 8002b60:	464b      	mov	r3, r9
 8002b62:	1891      	adds	r1, r2, r2
 8002b64:	6239      	str	r1, [r7, #32]
 8002b66:	415b      	adcs	r3, r3
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b6e:	4641      	mov	r1, r8
 8002b70:	1854      	adds	r4, r2, r1
 8002b72:	4649      	mov	r1, r9
 8002b74:	eb43 0501 	adc.w	r5, r3, r1
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	00eb      	lsls	r3, r5, #3
 8002b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b86:	00e2      	lsls	r2, r4, #3
 8002b88:	4614      	mov	r4, r2
 8002b8a:	461d      	mov	r5, r3
 8002b8c:	4643      	mov	r3, r8
 8002b8e:	18e3      	adds	r3, r4, r3
 8002b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b94:	464b      	mov	r3, r9
 8002b96:	eb45 0303 	adc.w	r3, r5, r3
 8002b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bba:	4629      	mov	r1, r5
 8002bbc:	008b      	lsls	r3, r1, #2
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	008a      	lsls	r2, r1, #2
 8002bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bcc:	f7fd fb22 	bl	8000214 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4b60      	ldr	r3, [pc, #384]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	011c      	lsls	r4, r3, #4
 8002bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	1891      	adds	r1, r2, r2
 8002bf6:	61b9      	str	r1, [r7, #24]
 8002bf8:	415b      	adcs	r3, r3
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c00:	4641      	mov	r1, r8
 8002c02:	1851      	adds	r1, r2, r1
 8002c04:	6139      	str	r1, [r7, #16]
 8002c06:	4649      	mov	r1, r9
 8002c08:	414b      	adcs	r3, r1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c18:	4659      	mov	r1, fp
 8002c1a:	00cb      	lsls	r3, r1, #3
 8002c1c:	4651      	mov	r1, sl
 8002c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c22:	4651      	mov	r1, sl
 8002c24:	00ca      	lsls	r2, r1, #3
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	189b      	adds	r3, r3, r2
 8002c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c34:	464b      	mov	r3, r9
 8002c36:	460a      	mov	r2, r1
 8002c38:	eb42 0303 	adc.w	r3, r2, r3
 8002c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c58:	4649      	mov	r1, r9
 8002c5a:	008b      	lsls	r3, r1, #2
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c62:	4641      	mov	r1, r8
 8002c64:	008a      	lsls	r2, r1, #2
 8002c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c6a:	f7fd fad3 	bl	8000214 <__aeabi_uldivmod>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002c76:	fba3 2301 	umull	r2, r3, r3, r1
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2264      	movs	r2, #100	@ 0x64
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	1acb      	subs	r3, r1, r3
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	3332      	adds	r3, #50	@ 0x32
 8002c88:	4a33      	ldr	r2, [pc, #204]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c94:	441c      	add	r4, r3
 8002c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	1891      	adds	r1, r2, r2
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	415b      	adcs	r3, r3
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	1851      	adds	r1, r2, r1
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	4649      	mov	r1, r9
 8002cbc:	414b      	adcs	r3, r1
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ccc:	4659      	mov	r1, fp
 8002cce:	00cb      	lsls	r3, r1, #3
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	00ca      	lsls	r2, r1, #3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	460a      	mov	r2, r1
 8002cea:	eb42 0303 	adc.w	r3, r2, r3
 8002cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d08:	4649      	mov	r1, r9
 8002d0a:	008b      	lsls	r3, r1, #2
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d12:	4641      	mov	r1, r8
 8002d14:	008a      	lsls	r2, r1, #2
 8002d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d1a:	f7fd fa7b 	bl	8000214 <__aeabi_uldivmod>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002d24:	fba3 1302 	umull	r1, r3, r3, r2
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	2164      	movs	r1, #100	@ 0x64
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	3332      	adds	r3, #50	@ 0x32
 8002d36:	4a08      	ldr	r2, [pc, #32]	@ (8002d58 <UART_SetConfig+0x4e4>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4422      	add	r2, r4
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d52:	46bd      	mov	sp, r7
 8002d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d58:	51eb851f 	.word	0x51eb851f

08002d5c <TbxAssertTrigger>:
** \param     line The line number inside the file where the assertion occurred.
**
****************************************************************************************/
void TbxAssertTrigger(char     const * const file, 
                      uint32_t               line)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  /* Check if there is an application specific assertion handler configured. */
  if (tbxAssertHandlerPtr != NULL)
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <TbxAssertTrigger+0x28>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <TbxAssertTrigger+0x1e>
  {
    /* Call the application specific assertion handler. */
    tbxAssertHandlerPtr(file, line);
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <TbxAssertTrigger+0x28>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
    for (;;)
    {
      ;
    }
  }
} /*** end of TbxAssertTrigger ***/
 8002d78:	e000      	b.n	8002d7c <TbxAssertTrigger+0x20>
    for (;;)
 8002d7a:	e7fe      	b.n	8002d7a <TbxAssertTrigger+0x1e>
} /*** end of TbxAssertTrigger ***/
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200000c4 	.word	0x200000c4

08002d88 <TbxCriticalSectionEnter>:
**              ...access shared resource...
**              TbxCriticalSectionExit();
**
****************************************************************************************/
void TbxCriticalSectionEnter(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  /* Disable the interrupts and store the CPU status register value in a local variable.
   * Note that it should not write directly to tbxCritSectCpuSR yet, because the
   * tbxCritSectCpuSR variable is a shared resource and should only be accessed with
   * interrupts disabled.
   */
  cpuSR = TbxPortInterruptsDisable();
 8002d8e:	f7fd fa39 	bl	8000204 <TbxPortInterruptsDisable>
 8002d92:	6078      	str	r0, [r7, #4]

  /* It this the first time we enter the critical section, as opposed to a nested
   * entry?
   */
  if (tbxCritSectNestingCounter == 0U)
 8002d94:	4b07      	ldr	r3, [pc, #28]	@ (8002db4 <TbxCriticalSectionEnter+0x2c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <TbxCriticalSectionEnter+0x1a>
  {
    /* Store the CPU status register value in tbxCritSectCpuSR, since it is now safe
     * to access it. It is needed to restore the interrupt status upon exiting the
     * critical section.
     */
    tbxCritSectCpuSR = cpuSR;
 8002d9c:	4a06      	ldr	r2, [pc, #24]	@ (8002db8 <TbxCriticalSectionEnter+0x30>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6013      	str	r3, [r2, #0]
  }
  /* Increment the nesting counter. */
  tbxCritSectNestingCounter++;
 8002da2:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <TbxCriticalSectionEnter+0x2c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	4a02      	ldr	r2, [pc, #8]	@ (8002db4 <TbxCriticalSectionEnter+0x2c>)
 8002daa:	6013      	str	r3, [r2, #0]
} /*** end of TbxCriticalSectionEnter ***/
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200000c8 	.word	0x200000c8
 8002db8:	200000cc 	.word	0x200000cc

08002dbc <TbxCriticalSectionExit>:
**              ...access shared resource...
**              TbxCriticalSectionExit();
**
****************************************************************************************/
void TbxCriticalSectionExit(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* A call to this function must always be preceeded by a call to
   * TbxCriticalSectionEnter(). This means the tbxCritSectNestingCounter must be > 0.
   */
  TBX_ASSERT(tbxCritSectNestingCounter > 0U);
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <TbxCriticalSectionExit+0x3c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <TbxCriticalSectionExit+0x14>
 8002dc8:	2170      	movs	r1, #112	@ 0x70
 8002dca:	480c      	ldr	r0, [pc, #48]	@ (8002dfc <TbxCriticalSectionExit+0x40>)
 8002dcc:	f7ff ffc6 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if this function call was preceeded by a call to 
   * TbxCriticalSectionEnter().
   */
  if (tbxCritSectNestingCounter > 0U)
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <TbxCriticalSectionExit+0x3c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00d      	beq.n	8002df4 <TbxCriticalSectionExit+0x38>
  {
    /* Decrement the nesting counter. */
    tbxCritSectNestingCounter--;
 8002dd8:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <TbxCriticalSectionExit+0x3c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	4a06      	ldr	r2, [pc, #24]	@ (8002df8 <TbxCriticalSectionExit+0x3c>)
 8002de0:	6013      	str	r3, [r2, #0]

    /* Is this the final call meaning that it is time we exit the critical section by
     * actually restoring the interrupt status again?
     */
    if (tbxCritSectNestingCounter == 0U)
 8002de2:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <TbxCriticalSectionExit+0x3c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <TbxCriticalSectionExit+0x38>
    {
      /* Restore the interrupt status to the state it was right before the interrupts
       * were all disabled upon the first time the critical section was entered.
      */
      TbxPortInterruptsRestore(tbxCritSectCpuSR);
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <TbxCriticalSectionExit+0x44>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fa0c 	bl	800020c <TbxPortInterruptsRestore>
    }
  }
} /*** end of TbxCriticalSectionExit ***/
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200000c8 	.word	0x200000c8
 8002dfc:	08005cdc 	.word	0x08005cdc
 8002e00:	200000cc 	.word	0x200000cc

08002e04 <TbxHeapAllocate>:
** \return    Pointer to the start of the newly allocated heap memory if successful,
**            NULL otherwise.
**
****************************************************************************************/
void * TbxHeapAllocate(size_t size)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
   * The actual heap buffer. Whenever memory needs to be dynamically allocated, it will
   * be taken from this buffer. As such, it is okay to not be initialized and therefore
   * the warning about no value being assigned to this variable can be ignored.
   */
  static uint8_t   tbxHeapBuffer[TBX_CONF_HEAP_SIZE];
  void           * result = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <TbxHeapAllocate+0x1a>
 8002e16:	2151      	movs	r1, #81	@ 0x51
 8002e18:	4813      	ldr	r0, [pc, #76]	@ (8002e68 <TbxHeapAllocate+0x64>)
 8002e1a:	f7ff ff9f 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if (size > 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01c      	beq.n	8002e5e <TbxHeapAllocate+0x5a>
  {
    /* Align the desired size to the address size to make it work on all targets. */
    size_t sizeWanted = (size + (sizeof(void *) - 1U)) & ~(sizeof(void *) - 1U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3303      	adds	r3, #3
 8002e28:	f023 0303 	bic.w	r3, r3, #3
 8002e2c:	613b      	str	r3, [r7, #16]
    /* Obtain mutual exclusive access to tbxHeapAllocated. */
    TbxCriticalSectionEnter();
 8002e2e:	f7ff ffab 	bl	8002d88 <TbxCriticalSectionEnter>
      /* Determine the number of still available bytes in the heap buffer. */
    size_t sizeAvailable = TBX_CONF_HEAP_SIZE - tbxHeapAllocated;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <TbxHeapAllocate+0x68>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002e3a:	60fb      	str	r3, [r7, #12]
    /* Is there enough space left on the heap for this allocation request? */
    if (sizeAvailable >= sizeWanted)
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d30a      	bcc.n	8002e5a <TbxHeapAllocate+0x56>
    {
      /* Set the address for the newly allocated memory. */
      result = &tbxHeapBuffer[tbxHeapAllocated];
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <TbxHeapAllocate+0x68>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <TbxHeapAllocate+0x6c>)
 8002e4a:	4413      	add	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
      /* Perform the actual allocation by incrementing the counter. */
      tbxHeapAllocated += sizeWanted;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <TbxHeapAllocate+0x68>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <TbxHeapAllocate+0x68>)
 8002e58:	6013      	str	r3, [r2, #0]
    }
    /* Release mutual exclusive access to tbxHeapAllocated. */
    TbxCriticalSectionExit();
 8002e5a:	f7ff ffaf 	bl	8002dbc <TbxCriticalSectionExit>
  }

  /* Return the address of the allocated memory to the caller. */
  return result;
 8002e5e:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxHeapAllocate ***/
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	08005d00 	.word	0x08005d00
 8002e6c:	200000d0 	.word	0x200000d0
 8002e70:	200000d4 	.word	0x200000d4

08002e74 <TbxListCreate>:
**            is needed when calling the other API functions in this module.
** \return    The pointer to the created linked list or NULL in case or error.
**
****************************************************************************************/
tTbxList * TbxListCreate(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
  tTbxList         * result = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  static uint8_t     memPoolsCreated = TBX_FALSE;
  uint8_t            errorDetected = TBX_FALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	72fb      	strb	r3, [r7, #11]
  tTbxList         * newListPtr;

  /* Check if this is the first time that this function is called. */
  if (memPoolsCreated == TBX_FALSE)
 8002e82:	4b20      	ldr	r3, [pc, #128]	@ (8002f04 <TbxListCreate+0x90>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d114      	bne.n	8002eb4 <TbxListCreate+0x40>
  {
    /* Invert flag because this part only needs to run one time. */
    memPoolsCreated = TBX_TRUE;
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f04 <TbxListCreate+0x90>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
    /* This module allows the dynamic creation and deletion of a linked list and its
     * nodes. For both these times (tTbxList and tTbxListNode) a memory pool needs to be
     * created. An initial size of 1 is sufficient, because the plan is to expand each
     * memory pool whenever more blocks need to be allocated from it.
     */
    if (TbxMemPoolCreate(1, sizeof(tTbxList)) == TBX_ERROR)
 8002e90:	210c      	movs	r1, #12
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 fa34 	bl	8003300 <TbxMemPoolCreate>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <TbxListCreate+0x2e>
    {
      /* Flag the error. */
      errorDetected = TBX_TRUE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	72fb      	strb	r3, [r7, #11]
    }
    if (TbxMemPoolCreate(1, sizeof(tTbxListNode)) == TBX_ERROR)
 8002ea2:	210c      	movs	r1, #12
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f000 fa2b 	bl	8003300 <TbxMemPoolCreate>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <TbxListCreate+0x40>
    {
      /* Flag the error. */
      errorDetected = TBX_TRUE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	72fb      	strb	r3, [r7, #11]
    }
  }

  /* Only continue if no error was detected so far. */
  if (errorDetected == TBX_FALSE)
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11f      	bne.n	8002efa <TbxListCreate+0x86>
  {
    /* Attempt to allocate a block for the new list. */
    newListPtr = TbxMemPoolAllocate(sizeof(tTbxList));
 8002eba:	200c      	movs	r0, #12
 8002ebc:	f000 fac2 	bl	8003444 <TbxMemPoolAllocate>
 8002ec0:	6078      	str	r0, [r7, #4]
    /* In case the allocation failed, the memory pool could be exhausted. Try to add
     * another block to the memory pool. This works as long as there is enough heap
     * configured.
     */
    if (newListPtr == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <TbxListCreate+0x6a>
    {
      /* Try to add another block to the memory pool. */
      if (TbxMemPoolCreate(1, sizeof(tTbxList)) == TBX_OK)
 8002ec8:	210c      	movs	r1, #12
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f000 fa18 	bl	8003300 <TbxMemPoolCreate>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d103      	bne.n	8002ede <TbxListCreate+0x6a>
      {
        /* Second attempt of the block allocation. */
        newListPtr = TbxMemPoolAllocate(sizeof(tTbxList));
 8002ed6:	200c      	movs	r0, #12
 8002ed8:	f000 fab4 	bl	8003444 <TbxMemPoolAllocate>
 8002edc:	6078      	str	r0, [r7, #4]
      }
    }

    /* Only continue if the allocation was successful. */
    if (newListPtr != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <TbxListCreate+0x86>
    {
      /* By default the created list is empty. */
      newListPtr->firstNodePtr = NULL;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	605a      	str	r2, [r3, #4]
      newListPtr->lastNodePtr = NULL;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
      newListPtr->nodeCount = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
      /* The list was successfully created so update the result to give the pointer to
       * the newly created list back to the caller. This pointer serves as the handle to
       * the list and is needed when calling API function of this module.
       */
      result = newListPtr;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Give the result back to the caller. */
  return result;
 8002efa:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListCreate ***/
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	200008d4 	.word	0x200008d4

08002f08 <TbxListGetSize>:
** \param     list Pointer to a previously created linked list to operate on.
** \return    Total number of items currently stored in the list.
**
****************************************************************************************/
size_t TbxListGetSize(tTbxList const * list)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  size_t result = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <TbxListGetSize+0x1a>
 8002f1a:	21d2      	movs	r1, #210	@ 0xd2
 8002f1c:	4808      	ldr	r0, [pc, #32]	@ (8002f40 <TbxListGetSize+0x38>)
 8002f1e:	f7ff ff1d 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (list != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <TbxListGetSize+0x2e>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 8002f28:	f7ff ff2e 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Store the current number of items in the list in the result variable. */
    result = list->nodeCount;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 8002f32:	f7ff ff43 	bl	8002dbc <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8002f36:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetSize ***/
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	08005d20 	.word	0x08005d20

08002f44 <TbxListInsertItemBack>:
** \return    TBX_OK if the item could be inserted, TBX_ERROR otherwise.
**
****************************************************************************************/
uint8_t TbxListInsertItemBack(tTbxList * list, 
                              void     * item)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint8_t        result = TBX_ERROR;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
  tTbxListNode * newListNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <TbxListInsertItemBack+0x1e>
 8002f58:	f240 1143 	movw	r1, #323	@ 0x143
 8002f5c:	482d      	ldr	r0, [pc, #180]	@ (8003014 <TbxListInsertItemBack+0xd0>)
 8002f5e:	f7ff fefd 	bl	8002d5c <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <TbxListInsertItemBack+0x2e>
 8002f68:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8002f6c:	4829      	ldr	r0, [pc, #164]	@ (8003014 <TbxListInsertItemBack+0xd0>)
 8002f6e:	f7ff fef5 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d047      	beq.n	8003008 <TbxListInsertItemBack+0xc4>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d044      	beq.n	8003008 <TbxListInsertItemBack+0xc4>
  {
    /* Attempt to allocate a block for a node in the list. */
    newListNodePtr = TbxMemPoolAllocate(sizeof(tTbxListNode));
 8002f7e:	200c      	movs	r0, #12
 8002f80:	f000 fa60 	bl	8003444 <TbxMemPoolAllocate>
 8002f84:	60b8      	str	r0, [r7, #8]
    /* In case the allocation failed, the memory pool could be exhausted. Try to add
     * another block to the memory pool. This works as long as there is enough heap
     * configured.
     */
    if (newListNodePtr == NULL)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <TbxListInsertItemBack+0x5e>
    {
      /* Try to add another block to the memory pool. */
      if (TbxMemPoolCreate(1, sizeof(tTbxListNode)) == TBX_OK)
 8002f8c:	210c      	movs	r1, #12
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f000 f9b6 	bl	8003300 <TbxMemPoolCreate>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d103      	bne.n	8002fa2 <TbxListInsertItemBack+0x5e>
      {
        /* Second attempt of the block allocation. */
        newListNodePtr = TbxMemPoolAllocate(sizeof(tTbxListNode));
 8002f9a:	200c      	movs	r0, #12
 8002f9c:	f000 fa52 	bl	8003444 <TbxMemPoolAllocate>
 8002fa0:	60b8      	str	r0, [r7, #8]
      }
    }
    /* Only continue if the allocation was successful. */
    if (newListNodePtr != NULL)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02f      	beq.n	8003008 <TbxListInsertItemBack+0xc4>
    {
      /* Initialize the node for the list. */
      newListNodePtr->itemPtr = item;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	601a      	str	r2, [r3, #0]
      newListNodePtr->prevNodePtr = NULL;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	605a      	str	r2, [r3, #4]
      newListNodePtr->nextNodePtr = NULL;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
      /* Obtain mutual exclusive access to the list. */
      TbxCriticalSectionEnter();
 8002fba:	f7ff fee5 	bl	8002d88 <TbxCriticalSectionEnter>
      /* Check if the list is not empty. */
      if (list->firstNodePtr != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d011      	beq.n	8002fea <TbxListInsertItemBack+0xa6>
      {
        /* Sanity check. An non-empty list should have at least one node. */
        TBX_ASSERT(list->nodeCount > 0U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <TbxListInsertItemBack+0x94>
 8002fce:	f240 1165 	movw	r1, #357	@ 0x165
 8002fd2:	4810      	ldr	r0, [pc, #64]	@ (8003014 <TbxListInsertItemBack+0xd0>)
 8002fd4:	f7ff fec2 	bl	8002d5c <TbxAssertTrigger>
        /* The new node that is to be inserted will be added at the end and the current
         * end of the list should be moved up.
         */
        newListNodePtr->prevNodePtr = list->lastNodePtr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	605a      	str	r2, [r3, #4]
        newListNodePtr->prevNodePtr->nextNodePtr = newListNodePtr;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	e002      	b.n	8002ff0 <TbxListInsertItemBack+0xac>
      else
      {
        /* The to be added node will be the only node, so it is not only the last node
         * but also the first node.
         */
        list->firstNodePtr = newListNodePtr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	605a      	str	r2, [r3, #4]
      }
      /* Insert the new node at the end of the list. */
      list->lastNodePtr = newListNodePtr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	609a      	str	r2, [r3, #8]
      /* Increment the node counter. */
      list->nodeCount++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	601a      	str	r2, [r3, #0]
      /* Release mutual exclusive access for the list. */
      TbxCriticalSectionExit();
 8003000:	f7ff fedc 	bl	8002dbc <TbxCriticalSectionExit>
      /* Update the result for success. */
      result = TBX_OK;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Give the result back to the caller. */
  return result;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxListInsertItemBack ***/
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08005d20 	.word	0x08005d20

08003018 <TbxListRemoveItem>:
** \param     item Pointer to the item to remove.
**
****************************************************************************************/
void TbxListRemoveItem(tTbxList       * list, 
                       void     const * item)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  tTbxListNode * listNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d104      	bne.n	8003032 <TbxListRemoveItem+0x1a>
 8003028:	f240 214a 	movw	r1, #586	@ 0x24a
 800302c:	4867      	ldr	r0, [pc, #412]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 800302e:	f7ff fe95 	bl	8002d5c <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <TbxListRemoveItem+0x2a>
 8003038:	f240 214b 	movw	r1, #587	@ 0x24b
 800303c:	4863      	ldr	r0, [pc, #396]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 800303e:	f7ff fe8d 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80bc 	beq.w	80031c2 <TbxListRemoveItem+0x1aa>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80b8 	beq.w	80031c2 <TbxListRemoveItem+0x1aa>
  {
    /* Try to find the node that this item belongs to. */
    listNodePtr = TbxListFindListNode(list, item);
 8003052:	6839      	ldr	r1, [r7, #0]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f919 	bl	800328c <TbxListFindListNode>
 800305a:	60f8      	str	r0, [r7, #12]
    /* Only continue with removal if the item actually belongs to the list. */
    if (listNodePtr != NULL)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80af 	beq.w	80031c2 <TbxListRemoveItem+0x1aa>
    {
      /* Obtain mutual exclusive access to the list. */
      TbxCriticalSectionEnter();
 8003064:	f7ff fe90 	bl	8002d88 <TbxCriticalSectionEnter>
      /* Remove the node from the list. First check if it is the only node in the
       * list.
       */
      if ( (listNodePtr->prevNodePtr == NULL) && (listNodePtr->nextNodePtr == NULL) )
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d127      	bne.n	80030c0 <TbxListRemoveItem+0xa8>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d123      	bne.n	80030c0 <TbxListRemoveItem+0xa8>
      {
        /* Sanity check. This should also be the start of the list. */
        TBX_ASSERT(listNodePtr == list->firstNodePtr);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	429a      	cmp	r2, r3
 8003080:	d004      	beq.n	800308c <TbxListRemoveItem+0x74>
 8003082:	f240 215d 	movw	r1, #605	@ 0x25d
 8003086:	4851      	ldr	r0, [pc, #324]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 8003088:	f7ff fe68 	bl	8002d5c <TbxAssertTrigger>
        /* Sanity check. This should also be the end of the list. */
        TBX_ASSERT(listNodePtr == list->lastNodePtr);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	429a      	cmp	r2, r3
 8003094:	d004      	beq.n	80030a0 <TbxListRemoveItem+0x88>
 8003096:	f240 215f 	movw	r1, #607	@ 0x25f
 800309a:	484c      	ldr	r0, [pc, #304]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 800309c:	f7ff fe5e 	bl	8002d5c <TbxAssertTrigger>
        /* Sanity check. The list should only have one node. */
        TBX_ASSERT(list->nodeCount == 1U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d004      	beq.n	80030b2 <TbxListRemoveItem+0x9a>
 80030a8:	f240 2161 	movw	r1, #609	@ 0x261
 80030ac:	4847      	ldr	r0, [pc, #284]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 80030ae:	f7ff fe55 	bl	8002d5c <TbxAssertTrigger>
        /* Set the list to empty. */
        list->firstNodePtr = NULL;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	605a      	str	r2, [r3, #4]
        list->lastNodePtr = NULL;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	e076      	b.n	80031ae <TbxListRemoveItem+0x196>
      }
      /* Check if it is at the start of the list. */
      else if (listNodePtr->prevNodePtr == NULL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d124      	bne.n	8003112 <TbxListRemoveItem+0xfa>
      {
        /* Sanity check. This should be the start of the list. */
        TBX_ASSERT(listNodePtr == list->firstNodePtr);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d004      	beq.n	80030dc <TbxListRemoveItem+0xc4>
 80030d2:	f240 216a 	movw	r1, #618	@ 0x26a
 80030d6:	483d      	ldr	r0, [pc, #244]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 80030d8:	f7ff fe40 	bl	8002d5c <TbxAssertTrigger>
        /* Sanity check. There should be a next node. */
        TBX_ASSERT(listNodePtr->nextNodePtr != NULL);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <TbxListRemoveItem+0xd6>
 80030e4:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 80030e8:	4838      	ldr	r0, [pc, #224]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 80030ea:	f7ff fe37 	bl	8002d5c <TbxAssertTrigger>
        /* Sanity check. The list should have at least two nodes. */
        TBX_ASSERT(list->nodeCount > 1U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d804      	bhi.n	8003100 <TbxListRemoveItem+0xe8>
 80030f6:	f240 216e 	movw	r1, #622	@ 0x26e
 80030fa:	4834      	ldr	r0, [pc, #208]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 80030fc:	f7ff fe2e 	bl	8002d5c <TbxAssertTrigger>
        /* Make the next node the new start of the list. */
        list->firstNodePtr = listNodePtr->nextNodePtr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	605a      	str	r2, [r3, #4]
        list->firstNodePtr->prevNodePtr = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	e04d      	b.n	80031ae <TbxListRemoveItem+0x196>
      }
      /* Check if it is at the end of the list. */
      else if (listNodePtr->nextNodePtr == NULL)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d124      	bne.n	8003164 <TbxListRemoveItem+0x14c>
      {
        /* Sanity check. This should be the end of the list. */
        TBX_ASSERT(listNodePtr == list->lastNodePtr);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	429a      	cmp	r2, r3
 8003122:	d004      	beq.n	800312e <TbxListRemoveItem+0x116>
 8003124:	f240 2177 	movw	r1, #631	@ 0x277
 8003128:	4828      	ldr	r0, [pc, #160]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 800312a:	f7ff fe17 	bl	8002d5c <TbxAssertTrigger>
        /* Sanity check. There should be a previous node. */
        TBX_ASSERT(listNodePtr->prevNodePtr != NULL);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d104      	bne.n	8003140 <TbxListRemoveItem+0x128>
 8003136:	f240 2179 	movw	r1, #633	@ 0x279
 800313a:	4824      	ldr	r0, [pc, #144]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 800313c:	f7ff fe0e 	bl	8002d5c <TbxAssertTrigger>
        /* Sanity check. The list should have at least two nodes. */
        TBX_ASSERT(list->nodeCount > 1U);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d804      	bhi.n	8003152 <TbxListRemoveItem+0x13a>
 8003148:	f240 217b 	movw	r1, #635	@ 0x27b
 800314c:	481f      	ldr	r0, [pc, #124]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 800314e:	f7ff fe05 	bl	8002d5c <TbxAssertTrigger>
        /* Make the previous node the end of the list. */
        list->lastNodePtr = listNodePtr->prevNodePtr;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	609a      	str	r2, [r3, #8]
        list->lastNodePtr->nextNodePtr = NULL;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	e024      	b.n	80031ae <TbxListRemoveItem+0x196>
       * in the middle.
       */
      else
      {
        /* Sanity check. There should be a previous node. */
        TBX_ASSERT(listNodePtr->prevNodePtr != NULL);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <TbxListRemoveItem+0x15e>
 800316c:	f240 2187 	movw	r1, #647	@ 0x287
 8003170:	4816      	ldr	r0, [pc, #88]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 8003172:	f7ff fdf3 	bl	8002d5c <TbxAssertTrigger>
        /* Sanity check. There should be a next node. */
        TBX_ASSERT(listNodePtr->nextNodePtr != NULL);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d104      	bne.n	8003188 <TbxListRemoveItem+0x170>
 800317e:	f240 2189 	movw	r1, #649	@ 0x289
 8003182:	4812      	ldr	r0, [pc, #72]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 8003184:	f7ff fdea 	bl	8002d5c <TbxAssertTrigger>
        /* Sanity check. The list should have at least three nodes. */
        TBX_ASSERT(list->nodeCount > 2U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d804      	bhi.n	800319a <TbxListRemoveItem+0x182>
 8003190:	f240 218b 	movw	r1, #651	@ 0x28b
 8003194:	480d      	ldr	r0, [pc, #52]	@ (80031cc <TbxListRemoveItem+0x1b4>)
 8003196:	f7ff fde1 	bl	8002d5c <TbxAssertTrigger>
        /* Remove ourselves from the list. */
        listNodePtr->prevNodePtr->nextNodePtr = listNodePtr->nextNodePtr;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6892      	ldr	r2, [r2, #8]
 80031a2:	609a      	str	r2, [r3, #8]
        listNodePtr->nextNodePtr->prevNodePtr = listNodePtr->prevNodePtr;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	6852      	ldr	r2, [r2, #4]
 80031ac:	605a      	str	r2, [r3, #4]
      }
      /* Decrement the node counter. */
      list->nodeCount--;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	601a      	str	r2, [r3, #0]
      /* Release mutual exclusive access of the list. */
      TbxCriticalSectionExit();
 80031b8:	f7ff fe00 	bl	8002dbc <TbxCriticalSectionExit>
      /* Give the node back to the memory pool. */
      TbxMemPoolRelease(listNodePtr);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f991 	bl	80034e4 <TbxMemPoolRelease>
    }
  }
} /*** end of TbxListRemoveItem ***/
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	08005d20 	.word	0x08005d20

080031d0 <TbxListGetFirstItem>:
** \param     list Pointer to a previously created linked list to operate on.
** \return    The item at the start of the list or NULL if the list is empty.
**
****************************************************************************************/
void * TbxListGetFirstItem(tTbxList const * list)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  void * result = NULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <TbxListGetFirstItem+0x1c>
 80031e2:	f240 21a7 	movw	r1, #679	@ 0x2a7
 80031e6:	480b      	ldr	r0, [pc, #44]	@ (8003214 <TbxListGetFirstItem+0x44>)
 80031e8:	f7ff fdb8 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if (list != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <TbxListGetFirstItem+0x3a>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 80031f2:	f7ff fdc9 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Get the first item in the list if there is one. */
    if (list->firstNodePtr != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <TbxListGetFirstItem+0x36>
    {
      result = list->firstNodePtr->itemPtr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 8003206:	f7ff fdd9 	bl	8002dbc <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 800320a:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetFirstItem ***/
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	08005d20 	.word	0x08005d20

08003218 <TbxListGetNextItem>:
**            more items in the list after the item given in the parameter.
**
****************************************************************************************/
void * TbxListGetNextItem(tTbxList const * list, 
                          void     const * itemRef)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  void               * result = NULL;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  tTbxListNode const * listNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <TbxListGetNextItem+0x1e>
 800322c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8003230:	4815      	ldr	r0, [pc, #84]	@ (8003288 <TbxListGetNextItem+0x70>)
 8003232:	f7ff fd93 	bl	8002d5c <TbxAssertTrigger>
  TBX_ASSERT(itemRef != NULL);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d104      	bne.n	8003246 <TbxListGetNextItem+0x2e>
 800323c:	f240 3121 	movw	r1, #801	@ 0x321
 8003240:	4811      	ldr	r0, [pc, #68]	@ (8003288 <TbxListGetNextItem+0x70>)
 8003242:	f7ff fd8b 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (itemRef != NULL) )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d017      	beq.n	800327c <TbxListGetNextItem+0x64>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d014      	beq.n	800327c <TbxListGetNextItem+0x64>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 8003252:	f7ff fd99 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Obtain the node of the item specified in the parameter. */
    listNodePtr = TbxListFindListNode(list, itemRef);
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f817 	bl	800328c <TbxListFindListNode>
 800325e:	60b8      	str	r0, [r7, #8]
    /* Only continue if the node could be found. */
    if (listNodePtr != NULL)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <TbxListGetNextItem+0x60>
    {
      /* Get the pointer to the next node. */
      listNodePtr = listNodePtr->nextNodePtr;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60bb      	str	r3, [r7, #8]
      /* Only continue if there is actually a node here. */
      if (listNodePtr != NULL)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <TbxListGetNextItem+0x60>
      {
        /* Set the result to the item of the next node. */
        result = listNodePtr->itemPtr;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 8003278:	f7ff fda0 	bl	8002dbc <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 800327c:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetNextItem ***/
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	08005d20 	.word	0x08005d20

0800328c <TbxListFindListNode>:
** \return    Pointer to the node if successful, NULL otherwise.
**
****************************************************************************************/
static tTbxListNode * TbxListFindListNode(tTbxList const * list, 
                                          void     const * item)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  tTbxListNode * result = NULL;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
  tTbxListNode * currentListNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <TbxListFindListNode+0x1e>
 80032a0:	f240 31b3 	movw	r1, #947	@ 0x3b3
 80032a4:	4815      	ldr	r0, [pc, #84]	@ (80032fc <TbxListFindListNode+0x70>)
 80032a6:	f7ff fd59 	bl	8002d5c <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <TbxListFindListNode+0x2e>
 80032b0:	f44f 716d 	mov.w	r1, #948	@ 0x3b4
 80032b4:	4811      	ldr	r0, [pc, #68]	@ (80032fc <TbxListFindListNode+0x70>)
 80032b6:	f7ff fd51 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d018      	beq.n	80032f2 <TbxListFindListNode+0x66>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d015      	beq.n	80032f2 <TbxListFindListNode+0x66>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 80032c6:	f7ff fd5f 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Get the pointer to the node at the head of the internal linked list. */
    currentListNodePtr = list->firstNodePtr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	60bb      	str	r3, [r7, #8]
    /* Loop through the nodes to find the node that the item belongs to. */
    while (currentListNodePtr != NULL)
 80032d0:	e00a      	b.n	80032e8 <TbxListFindListNode+0x5c>
    {
      /* Is this the node we are looking for? */
      if (currentListNodePtr->itemPtr == item)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d102      	bne.n	80032e2 <TbxListFindListNode+0x56>
      {
        /* Found the node. Update the result and stop looping. */
        result = currentListNodePtr;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60fb      	str	r3, [r7, #12]
        break;
 80032e0:	e005      	b.n	80032ee <TbxListFindListNode+0x62>
      }
      /* Update the node pointer to continue with the next node in the following loop
       * iteration.
       */
      currentListNodePtr = currentListNodePtr->nextNodePtr;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60bb      	str	r3, [r7, #8]
    while (currentListNodePtr != NULL)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f1      	bne.n	80032d2 <TbxListFindListNode+0x46>
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 80032ee:	f7ff fd65 	bl	8002dbc <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 80032f2:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListFindListNode ***/
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	08005d20 	.word	0x08005d20

08003300 <TbxMemPoolCreate>:
**            more space available on the heap to statically preallocated the blocks.
**
****************************************************************************************/
uint8_t TbxMemPoolCreate(size_t numBlocks, 
                         size_t blockSize)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint8_t      result = TBX_ERROR;
 800330a:	2300      	movs	r3, #0
 800330c:	77fb      	strb	r3, [r7, #31]
  void       * blockPtr;
  tPool      * poolPtr;

  /* Verify parameters. */
  TBX_ASSERT(numBlocks > 0U);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <TbxMemPoolCreate+0x1c>
 8003314:	219b      	movs	r1, #155	@ 0x9b
 8003316:	484a      	ldr	r0, [pc, #296]	@ (8003440 <TbxMemPoolCreate+0x140>)
 8003318:	f7ff fd20 	bl	8002d5c <TbxAssertTrigger>
  TBX_ASSERT(blockSize > 0U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <TbxMemPoolCreate+0x2a>
 8003322:	219c      	movs	r1, #156	@ 0x9c
 8003324:	4846      	ldr	r0, [pc, #280]	@ (8003440 <TbxMemPoolCreate+0x140>)
 8003326:	f7ff fd19 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (numBlocks > 0U) && (blockSize > 0U) )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8081 	beq.w	8003434 <TbxMemPoolCreate+0x134>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d07d      	beq.n	8003434 <TbxMemPoolCreate+0x134>
  {
    /* Set the result value to okay. */
    result = TBX_OK;
 8003338:	2301      	movs	r3, #1
 800333a:	77fb      	strb	r3, [r7, #31]
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 800333c:	f7ff fd24 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Attempt to locate a memory pool node in the list that is configured for the same
     * block size.
     */
    tPoolNode * poolNodePtr = TbxMemPoolListFind(blockSize);
 8003340:	6838      	ldr	r0, [r7, #0]
 8003342:	f000 f92b 	bl	800359c <TbxMemPoolListFind>
 8003346:	61b8      	str	r0, [r7, #24]
    /* Create a new memory pool node and its associated empty memory pool if a memory
     * pool node for this block size does not yet exist.
     */
    if (poolNodePtr == NULL)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d134      	bne.n	80033b8 <TbxMemPoolCreate+0xb8>
    {
      /* Create a new memory pool node. */
      poolNodePtr = TbxHeapAllocate(sizeof(tPoolNode));
 800334e:	2008      	movs	r0, #8
 8003350:	f7ff fd58 	bl	8002e04 <TbxHeapAllocate>
 8003354:	61b8      	str	r0, [r7, #24]
      /* Verify that the memory pool node could be created. */
      if (poolNodePtr == NULL)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <TbxMemPoolCreate+0x62>
      {
        /* Flag the error. */
        result = TBX_ERROR;
 800335c:	2300      	movs	r3, #0
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e02a      	b.n	80033b8 <TbxMemPoolCreate+0xb8>
      }
      /* Continue with creating the memory pool object. */
      else
      {
        /* Create a new memory pool object. */
        poolPtr = TbxHeapAllocate(sizeof(tPool));
 8003362:	200c      	movs	r0, #12
 8003364:	f7ff fd4e 	bl	8002e04 <TbxHeapAllocate>
 8003368:	6138      	str	r0, [r7, #16]
        /* Verify that the memory pool object could be created. */
        if (poolPtr == NULL)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <TbxMemPoolCreate+0x76>
        {
          /* Flag the error. */
          result = TBX_ERROR;
 8003370:	2300      	movs	r3, #0
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e020      	b.n	80033b8 <TbxMemPoolCreate+0xb8>
        }
        /* Continue with initializing both the memory pool and its node. */
        else
        {
          /* Initialize the memory pool node. */
          poolNodePtr->nextNodePtr = NULL;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
          poolNodePtr->poolPtr = poolPtr;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	601a      	str	r2, [r3, #0]
          /* Store the data size of the blocks managed by the memory pool. */
          poolPtr->blockSize = blockSize;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	601a      	str	r2, [r3, #0]
          /* Create the block list object that will hold blocks that are still free. */
          poolPtr->freeBlockListPtr = TbxMemPoolBlockListCreate();
 8003388:	f000 fa8e 	bl	80038a8 <TbxMemPoolBlockListCreate>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]
          /* Create the block list object that will hold blocks that are in use. */
          poolPtr->usedBlockListPtr = TbxMemPoolBlockListCreate();
 8003392:	f000 fa89 	bl	80038a8 <TbxMemPoolBlockListCreate>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	609a      	str	r2, [r3, #8]
          /* Verify that the block list objects could be created. */
          if ( (poolPtr->freeBlockListPtr == NULL) ||
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <TbxMemPoolCreate+0xac>
               (poolPtr->usedBlockListPtr == NULL) )
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	689b      	ldr	r3, [r3, #8]
          if ( (poolPtr->freeBlockListPtr == NULL) ||
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <TbxMemPoolCreate+0xb2>
          {
            /* Flag the error. */
            result = TBX_ERROR;
 80033ac:	2300      	movs	r3, #0
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e002      	b.n	80033b8 <TbxMemPoolCreate+0xb8>
          /* The (empty) memory pool and its node were created. Time to insert it into
           * the list.
           */
          else
          {
            TbxMemPoolListInsert(poolNodePtr);
 80033b2:	69b8      	ldr	r0, [r7, #24]
 80033b4:	f000 f958 	bl	8003668 <TbxMemPoolListInsert>
          }
        }
      }
    }
    /* Only continue if all is okay so far. */
    if (result == TBX_OK)
 80033b8:	7ffb      	ldrb	r3, [r7, #31]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d138      	bne.n	8003430 <TbxMemPoolCreate+0x130>
      /* The pool node pointer it now valid. It either points to a node that holds a
       * newly created and empty memory pool or to a node that holds an already existing
       * memory pool that can be extended. Create the blocks one by one and add them as
       * nodes to the free block list.
       */
      for (size_t blockNodeIdx = 0U; blockNodeIdx < numBlocks; blockNodeIdx++)
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e031      	b.n	8003428 <TbxMemPoolCreate+0x128>
      {
        /* Allocate memory for the block node. */
        tBlockNode * blockNodePtr = TbxHeapAllocate(sizeof(tBlockNode));
 80033c4:	2008      	movs	r0, #8
 80033c6:	f7ff fd1d 	bl	8002e04 <TbxHeapAllocate>
 80033ca:	60f8      	str	r0, [r7, #12]
        /* Verify that the node could be allocated. */
        if (blockNodePtr == NULL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <TbxMemPoolCreate+0xd8>
        {
          /* Flag the error. */
          result = TBX_ERROR;
 80033d2:	2300      	movs	r3, #0
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e024      	b.n	8003422 <TbxMemPoolCreate+0x122>
        }
        /* The node was created. */
        else
        {
          /* Allocate memory for the actual data block itself. */
          blockPtr = TbxMemPoolBlockCreate(blockSize);
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	f000 f9dd 	bl	8003798 <TbxMemPoolBlockCreate>
 80033de:	60b8      	str	r0, [r7, #8]
          /* Verify that the the data block could be allocated. */
          if (blockPtr == NULL)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <TbxMemPoolCreate+0xec>
          {
            /* Flag the error. */
            result = TBX_ERROR;
 80033e6:	2300      	movs	r3, #0
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e01a      	b.n	8003422 <TbxMemPoolCreate+0x122>
          }
          /* The data block was created. */
          else
          {
            /* Initialize the block node. */
            blockNodePtr->blockPtr = blockPtr;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	601a      	str	r2, [r3, #0]
            blockNodePtr->nextNodePtr = NULL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	605a      	str	r2, [r3, #4]
            /* Sanity check. The pool node pointer should not be NULL here. */
            TBX_ASSERT(poolNodePtr != NULL);
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <TbxMemPoolCreate+0x108>
 80033fe:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003402:	480f      	ldr	r0, [pc, #60]	@ (8003440 <TbxMemPoolCreate+0x140>)
 8003404:	f7ff fcaa 	bl	8002d5c <TbxAssertTrigger>
            /* Flag error in case the sanity check failed. */
            if (poolNodePtr == NULL)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <TbxMemPoolCreate+0x114>
            {
              /* Flag the error. */
              result = TBX_ERROR;
 800340e:	2300      	movs	r3, #0
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e006      	b.n	8003422 <TbxMemPoolCreate+0x122>
            }
            else
            {
              /* Insert the block node into the free block list. */
              TbxMemPoolBlockListInsert(poolNodePtr->poolPtr->freeBlockListPtr,
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fa55 	bl	80038cc <TbxMemPoolBlockListInsert>
      for (size_t blockNodeIdx = 0U; blockNodeIdx < numBlocks; blockNodeIdx++)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3301      	adds	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d3c9      	bcc.n	80033c4 <TbxMemPoolCreate+0xc4>
          }
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 8003430:	f7ff fcc4 	bl	8002dbc <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8003434:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMemPoolCreate ***/
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	08005d40 	.word	0x08005d40

08003444 <TbxMemPoolAllocate>:
** \return    Pointer to the start of the newly allocated memory if successful, NULL
**            otherwise.
**
****************************************************************************************/
void * TbxMemPoolAllocate(size_t size)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  void            * result = NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	61fb      	str	r3, [r7, #28]
  void            * blockDataPtr;
  tPoolNode const * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <TbxMemPoolAllocate+0x1c>
 8003456:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800345a:	4821      	ldr	r0, [pc, #132]	@ (80034e0 <TbxMemPoolAllocate+0x9c>)
 800345c:	f7ff fc7e 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (size > 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d037      	beq.n	80034d6 <TbxMemPoolAllocate+0x92>
  {
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 8003466:	f7ff fc8f 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Try to find the best fitting memory pool that has a block available. */
    poolNodePtr = TbxMemPoolListFindBestFit(size);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8c4 	bl	80035f8 <TbxMemPoolListFindBestFit>
 8003470:	61b8      	str	r0, [r7, #24]
    /* Only continue with the allocation of a memory pool candidate was found. */
    if (poolNodePtr != NULL)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02c      	beq.n	80034d2 <TbxMemPoolAllocate+0x8e>
    {
      /* Get the pointer to the actual memory pool. */
      tPool const * poolPtr = poolNodePtr->poolPtr;
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	617b      	str	r3, [r7, #20]
      /* Sanity check. The memory pool should not be NULL here. */
      TBX_ASSERT(poolPtr != NULL);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <TbxMemPoolAllocate+0x4a>
 8003484:	f240 1147 	movw	r1, #327	@ 0x147
 8003488:	4815      	ldr	r0, [pc, #84]	@ (80034e0 <TbxMemPoolAllocate+0x9c>)
 800348a:	f7ff fc67 	bl	8002d5c <TbxAssertTrigger>
      /* Only continue if the sanity check passed. */
      if (poolPtr != NULL)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01e      	beq.n	80034d2 <TbxMemPoolAllocate+0x8e>
      {
        /* Attempt to extract a block node from the linked list with free block nodes. */
        tBlockNode * blockNodePtr = TbxMemPoolBlockListExtract(poolPtr->freeBlockListPtr);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fa47 	bl	800392c <TbxMemPoolBlockListExtract>
 800349e:	6138      	str	r0, [r7, #16]
        /* Only continue if a free block node could be extracted. */
        if (blockNodePtr != NULL)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d015      	beq.n	80034d2 <TbxMemPoolAllocate+0x8e>
        {
          /* Read and store the pointer that points to the block's data. */
          blockDataPtr = TbxMemPoolBlockGetDataPtr(blockNodePtr->blockPtr);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f99c 	bl	80037e8 <TbxMemPoolBlockGetDataPtr>
 80034b0:	60f8      	str	r0, [r7, #12]
          /* Now the node itself needs to be inserted into the linked list with used
           * block nodes. This way this node can be reused when freeing this or another
           * block.
           */
          TbxMemPoolBlockListInsert(poolPtr->usedBlockListPtr, blockNodePtr);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	6939      	ldr	r1, [r7, #16]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fa07 	bl	80038cc <TbxMemPoolBlockListInsert>
          /* Perform a sanity check. The block's data pointer should not be NULL here. */
          TBX_ASSERT(blockDataPtr != NULL);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d104      	bne.n	80034ce <TbxMemPoolAllocate+0x8a>
 80034c4:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 80034c8:	4805      	ldr	r0, [pc, #20]	@ (80034e0 <TbxMemPoolAllocate+0x9c>)
 80034ca:	f7ff fc47 	bl	8002d5c <TbxAssertTrigger>
          /* Set the result value. */
          result = blockDataPtr;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 80034d2:	f7ff fc73 	bl	8002dbc <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 80034d6:	69fb      	ldr	r3, [r7, #28]
} /*** end of TbxMemPoolAllocate ***/
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	08005d40 	.word	0x08005d40

080034e4 <TbxMemPoolRelease>:
**            that was returned by function TbxMemPoolAllocate(), when the memory was
**            initially allocated.
**
****************************************************************************************/
void TbxMemPoolRelease(void * memPtr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  void            * blockPtr;
  tPoolNode const * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d104      	bne.n	80034fc <TbxMemPoolRelease+0x18>
 80034f2:	f240 1177 	movw	r1, #375	@ 0x177
 80034f6:	4828      	ldr	r0, [pc, #160]	@ (8003598 <TbxMemPoolRelease+0xb4>)
 80034f8:	f7ff fc30 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d045      	beq.n	800358e <TbxMemPoolRelease+0xaa>
  {
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 8003502:	f7ff fc41 	bl	8002d88 <TbxCriticalSectionEnter>
    /* First convert the block's data pointer to the block's base memory pointer. */
    blockPtr = TbxMemPoolBlockGetMemPtr(memPtr);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9ae 	bl	8003868 <TbxMemPoolBlockGetMemPtr>
 800350c:	61f8      	str	r0, [r7, #28]
    /* Only continue if the block pointer is valid. */
    if (blockPtr != NULL)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03a      	beq.n	800358a <TbxMemPoolRelease+0xa6>
    {
      /* Get the block's data size. */
      size_t blockSize = TbxMemPoolBlockGetBlockSize(blockPtr);
 8003514:	69f8      	ldr	r0, [r7, #28]
 8003516:	f000 f987 	bl	8003828 <TbxMemPoolBlockGetBlockSize>
 800351a:	61b8      	str	r0, [r7, #24]
      /* Attempt to locate the memory pool node that holds the memory pool with this
       * block size.
       */
      poolNodePtr = TbxMemPoolListFind(blockSize);
 800351c:	69b8      	ldr	r0, [r7, #24]
 800351e:	f000 f83d 	bl	800359c <TbxMemPoolListFind>
 8003522:	6178      	str	r0, [r7, #20]
      /* Sanity check. The memory pool node that the to be released memory originally
       * belonged to should have been found.
       */
      TBX_ASSERT(poolNodePtr != NULL);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <TbxMemPoolRelease+0x50>
 800352a:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800352e:	481a      	ldr	r0, [pc, #104]	@ (8003598 <TbxMemPoolRelease+0xb4>)
 8003530:	f7ff fc14 	bl	8002d5c <TbxAssertTrigger>
      /* Only continue if the sanity check passed. */
      if (poolNodePtr != NULL)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d027      	beq.n	800358a <TbxMemPoolRelease+0xa6>
      {
        /* Get the pointer to the actual memory pool. */
        tPool const * poolPtr = poolNodePtr->poolPtr;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	613b      	str	r3, [r7, #16]
        /* Sanity check. The memory pool should not be NULL here. */
        TBX_ASSERT(poolPtr != NULL);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <TbxMemPoolRelease+0x6c>
 8003546:	f240 1193 	movw	r1, #403	@ 0x193
 800354a:	4813      	ldr	r0, [pc, #76]	@ (8003598 <TbxMemPoolRelease+0xb4>)
 800354c:	f7ff fc06 	bl	8002d5c <TbxAssertTrigger>
        /* Only continue if the sanity check passed. */
        if (poolPtr != NULL)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d019      	beq.n	800358a <TbxMemPoolRelease+0xa6>
        {
          /* Attempt to extract a block node from the linked list with used block
           * nodes.
           */
          tBlockNode * blockNodePtr = TbxMemPoolBlockListExtract(poolPtr->usedBlockListPtr);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f9e6 	bl	800392c <TbxMemPoolBlockListExtract>
 8003560:	60f8      	str	r0, [r7, #12]
          /* Sanity check. A node should be available, otherwise more blocks were
           * released than actually allocated, which shouldn't happen.
           */
          TBX_ASSERT(blockNodePtr != NULL);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d104      	bne.n	8003572 <TbxMemPoolRelease+0x8e>
 8003568:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 800356c:	480a      	ldr	r0, [pc, #40]	@ (8003598 <TbxMemPoolRelease+0xb4>)
 800356e:	f7ff fbf5 	bl	8002d5c <TbxAssertTrigger>
          /* Only continue if a block node could be extracted. */
          if (blockNodePtr != NULL)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <TbxMemPoolRelease+0xa6>
          {
            /* Initialize the block. */
            blockNodePtr->blockPtr = blockPtr;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	601a      	str	r2, [r3, #0]
            /* Now the node itself needs to be inserted into the linked list with free
             * block nodes. This way this node can be allocated again in the future.
             */
            TbxMemPoolBlockListInsert(poolPtr->freeBlockListPtr, blockNodePtr);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f9a1 	bl	80038cc <TbxMemPoolBlockListInsert>
          }
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 800358a:	f7ff fc17 	bl	8002dbc <TbxCriticalSectionExit>
  }
} /*** end of TbxMemPoolRelease ***/
 800358e:	bf00      	nop
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	08005d40 	.word	0x08005d40

0800359c <TbxMemPoolListFind>:
** \param     blockSize Size of the blocks managed by the memory pool.
** \return    Pointer to the found memory pool node if successful, NULL otherwise.
**
****************************************************************************************/
static tPoolNode * TbxMemPoolListFind(size_t blockSize)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  tPoolNode * result = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
  tPoolNode * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(blockSize > 0U);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <TbxMemPoolListFind+0x1c>
 80035ae:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80035b2:	480f      	ldr	r0, [pc, #60]	@ (80035f0 <TbxMemPoolListFind+0x54>)
 80035b4:	f7ff fbd2 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (blockSize > 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d012      	beq.n	80035e4 <TbxMemPoolListFind+0x48>
  {
    /* Get pointer to the pool node at the head of the linked list. */
    poolNodePtr = tbxPoolList;
 80035be:	4b0d      	ldr	r3, [pc, #52]	@ (80035f4 <TbxMemPoolListFind+0x58>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60bb      	str	r3, [r7, #8]
    /* Loop through all nodes until a match is found. */
    while (poolNodePtr != NULL)
 80035c4:	e00b      	b.n	80035de <TbxMemPoolListFind+0x42>
    {
      /* Does this node hold a memory pool created for the same block size as we are
       * trying to find?
       */
      if (poolNodePtr->poolPtr->blockSize == blockSize)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d102      	bne.n	80035d8 <TbxMemPoolListFind+0x3c>
      {
        /* Update the result because a match was found. */
        result = poolNodePtr;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	60fb      	str	r3, [r7, #12]
        /* No need to continue looping since a match was found. */
        break;
 80035d6:	e005      	b.n	80035e4 <TbxMemPoolListFind+0x48>
      }
      /* Continue with the next pool node in the list. */
      poolNodePtr = poolNodePtr->nextNodePtr;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	60bb      	str	r3, [r7, #8]
    while (poolNodePtr != NULL)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <TbxMemPoolListFind+0x2a>
    }
  }

  /* Give the result back to the caller. */
  return result;
 80035e4:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolListFind ***/
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	08005d40 	.word	0x08005d40
 80035f4:	200008d8 	.word	0x200008d8

080035f8 <TbxMemPoolListFindBestFit>:
** \param     blockSize Size of the block to fit.
** \return    Pointer to the found memory pool node if successful, NULL otherwise.
**
****************************************************************************************/
static tPoolNode * TbxMemPoolListFindBestFit(size_t blockSize)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  tPoolNode * result = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  tPoolNode * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(blockSize > 0U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d104      	bne.n	8003614 <TbxMemPoolListFindBestFit+0x1c>
 800360a:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800360e:	4814      	ldr	r0, [pc, #80]	@ (8003660 <TbxMemPoolListFindBestFit+0x68>)
 8003610:	f7ff fba4 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (blockSize > 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01d      	beq.n	8003656 <TbxMemPoolListFindBestFit+0x5e>
  {
    /* Get pointer to the pool node at the head of the linked list. */
    poolNodePtr = tbxPoolList;
 800361a:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <TbxMemPoolListFindBestFit+0x6c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60bb      	str	r3, [r7, #8]
    /* Loop through all nodes until a fit is found. */
    while (poolNodePtr != NULL)
 8003620:	e014      	b.n	800364c <TbxMemPoolListFindBestFit+0x54>
    {
      /* Does this memory pool hold blocks that would fit the specified block size? */
      if (poolNodePtr->poolPtr->blockSize >= blockSize)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d80b      	bhi.n	8003646 <TbxMemPoolListFindBestFit+0x4e>
      {
        /* A fit is found. Now check if this memory pool has free blocks available. */
        if (TbxMemPoolBlockListIsEmpty(poolNodePtr->poolPtr->freeBlockListPtr) \
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f9a5 	bl	8003984 <TbxMemPoolBlockListIsEmpty>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <TbxMemPoolListFindBestFit+0x5c>
            == TBX_FALSE)
        {
          /* Found a match so update the result value. */
          result = poolNodePtr;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	60fb      	str	r3, [r7, #12]
        }
        /* Best fit is found, so no need to continue searching even if the memory pool
         * does not have any free blocks available.
         */
        break;
 8003644:	e006      	b.n	8003654 <TbxMemPoolListFindBestFit+0x5c>
      }
      /* Continue with the next pool node in the list. */
      poolNodePtr = poolNodePtr->nextNodePtr;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60bb      	str	r3, [r7, #8]
    while (poolNodePtr != NULL)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e7      	bne.n	8003622 <TbxMemPoolListFindBestFit+0x2a>
 8003652:	e000      	b.n	8003656 <TbxMemPoolListFindBestFit+0x5e>
        break;
 8003654:	bf00      	nop
    }
  }

  /* Give the result back to the caller. */
  return result;
 8003656:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolListFindBestFit ***/
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	08005d40 	.word	0x08005d40
 8003664:	200008d8 	.word	0x200008d8

08003668 <TbxMemPoolListInsert>:
**            this function should insert.
** \param     nodePtr Pointer to the memory pool node to insert.
**
****************************************************************************************/
static void TbxMemPoolListInsert(tPoolNode * nodePtr)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  tPoolNode * currentNodePtr;
  tPoolNode * prevNodePtr = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
  uint8_t     nodeInserted = TBX_FALSE;
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]

  /* Verify parameter. */
  TBX_ASSERT(nodePtr != NULL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <TbxMemPoolListInsert+0x20>
 800367e:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8003682:	4843      	ldr	r0, [pc, #268]	@ (8003790 <TbxMemPoolListInsert+0x128>)
 8003684:	f7ff fb6a 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (nodePtr != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d07c      	beq.n	8003788 <TbxMemPoolListInsert+0x120>
  {
    /* Sanity check. The pointer to the memory pool should not be NULL here. */
    TBX_ASSERT(nodePtr->poolPtr != NULL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <TbxMemPoolListInsert+0x38>
 8003696:	f240 2132 	movw	r1, #562	@ 0x232
 800369a:	483d      	ldr	r0, [pc, #244]	@ (8003790 <TbxMemPoolListInsert+0x128>)
 800369c:	f7ff fb5e 	bl	8002d5c <TbxAssertTrigger>
    /* Is the list with memory pools empty? */
    if (tbxPoolList == NULL)
 80036a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <TbxMemPoolListInsert+0x12c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <TbxMemPoolListInsert+0x4e>
    {
      /* Add the node at the start of the list. */
      nodePtr->nextNodePtr = NULL;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
      tbxPoolList = nodePtr;
 80036ae:	4a39      	ldr	r2, [pc, #228]	@ (8003794 <TbxMemPoolListInsert+0x12c>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6013      	str	r3, [r2, #0]
        prevNodePtr = currentNodePtr;
        currentNodePtr = currentNodePtr->nextNodePtr;
      }
    }
  }
} /*** end of TbxMemPoolListInsert ***/
 80036b4:	e068      	b.n	8003788 <TbxMemPoolListInsert+0x120>
      currentNodePtr = tbxPoolList;
 80036b6:	4b37      	ldr	r3, [pc, #220]	@ (8003794 <TbxMemPoolListInsert+0x12c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
      while (currentNodePtr != NULL)
 80036bc:	e05f      	b.n	800377e <TbxMemPoolListInsert+0x116>
        TBX_ASSERT(currentNodePtr->poolPtr != NULL);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <TbxMemPoolListInsert+0x68>
 80036c6:	f240 2145 	movw	r1, #581	@ 0x245
 80036ca:	4831      	ldr	r0, [pc, #196]	@ (8003790 <TbxMemPoolListInsert+0x128>)
 80036cc:	f7ff fb46 	bl	8002d5c <TbxAssertTrigger>
        if (currentNodePtr->poolPtr != NULL)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d03b      	beq.n	8003750 <TbxMemPoolListInsert+0xe8>
          TBX_ASSERT(currentNodePtr->poolPtr->blockSize != nodePtr->poolPtr->blockSize);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d104      	bne.n	80036f2 <TbxMemPoolListInsert+0x8a>
 80036e8:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80036ec:	4828      	ldr	r0, [pc, #160]	@ (8003790 <TbxMemPoolListInsert+0x128>)
 80036ee:	f7ff fb35 	bl	8002d5c <TbxAssertTrigger>
          if (currentNodePtr->poolPtr->blockSize > nodePtr->poolPtr->blockSize)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d926      	bls.n	8003750 <TbxMemPoolListInsert+0xe8>
            if (currentNodePtr == tbxPoolList)
 8003702:	4b24      	ldr	r3, [pc, #144]	@ (8003794 <TbxMemPoolListInsert+0x12c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d10e      	bne.n	800372a <TbxMemPoolListInsert+0xc2>
              TBX_ASSERT(prevNodePtr == NULL);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <TbxMemPoolListInsert+0xb4>
 8003712:	f240 2156 	movw	r1, #598	@ 0x256
 8003716:	481e      	ldr	r0, [pc, #120]	@ (8003790 <TbxMemPoolListInsert+0x128>)
 8003718:	f7ff fb20 	bl	8002d5c <TbxAssertTrigger>
              nodePtr->nextNodePtr = currentNodePtr;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	605a      	str	r2, [r3, #4]
              tbxPoolList = nodePtr;
 8003722:	4a1c      	ldr	r2, [pc, #112]	@ (8003794 <TbxMemPoolListInsert+0x12c>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e010      	b.n	800374c <TbxMemPoolListInsert+0xe4>
              TBX_ASSERT(prevNodePtr != NULL);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <TbxMemPoolListInsert+0xd2>
 8003730:	f240 2161 	movw	r1, #609	@ 0x261
 8003734:	4816      	ldr	r0, [pc, #88]	@ (8003790 <TbxMemPoolListInsert+0x128>)
 8003736:	f7ff fb11 	bl	8002d5c <TbxAssertTrigger>
              if (prevNodePtr != NULL)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <TbxMemPoolListInsert+0xe4>
                nodePtr->nextNodePtr = currentNodePtr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	605a      	str	r2, [r3, #4]
                prevNodePtr->nextNodePtr = nodePtr;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	605a      	str	r2, [r3, #4]
            nodeInserted = TBX_TRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
        if ( (currentNodePtr->nextNodePtr == NULL) && (nodeInserted == TBX_FALSE) )
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <TbxMemPoolListInsert+0x106>
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <TbxMemPoolListInsert+0x106>
          nodePtr->nextNodePtr = NULL;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
          currentNodePtr->nextNodePtr = nodePtr;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	605a      	str	r2, [r3, #4]
          nodeInserted = TBX_TRUE;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
        if (nodeInserted == TBX_TRUE)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d008      	beq.n	8003786 <TbxMemPoolListInsert+0x11e>
        prevNodePtr = currentNodePtr;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	613b      	str	r3, [r7, #16]
        currentNodePtr = currentNodePtr->nextNodePtr;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	617b      	str	r3, [r7, #20]
      while (currentNodePtr != NULL)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d19c      	bne.n	80036be <TbxMemPoolListInsert+0x56>
} /*** end of TbxMemPoolListInsert ***/
 8003784:	e000      	b.n	8003788 <TbxMemPoolListInsert+0x120>
          break;
 8003786:	bf00      	nop
} /*** end of TbxMemPoolListInsert ***/
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	08005d40 	.word	0x08005d40
 8003794:	200008d8 	.word	0x200008d8

08003798 <TbxMemPoolBlockCreate>:
** \param     size The data size of the block in bytes.
** \return    Pointer to the memory of the created block if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockCreate(size_t size)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  void   * blockMemPtr;

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <TbxMemPoolBlockCreate+0x1c>
 80037aa:	f240 21a1 	movw	r1, #673	@ 0x2a1
 80037ae:	480d      	ldr	r0, [pc, #52]	@ (80037e4 <TbxMemPoolBlockCreate+0x4c>)
 80037b0:	f7ff fad4 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (size > 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00f      	beq.n	80037da <TbxMemPoolBlockCreate+0x42>
  {
    /* Allocate memory for the block data and an extra size_t value at the start. */
    blockMemPtr = TbxHeapAllocate(sizeof(size_t) + size);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fb20 	bl	8002e04 <TbxHeapAllocate>
 80037c4:	6138      	str	r0, [r7, #16]
    /* Only continue if the memory allocation was successful. */
    if (blockMemPtr != NULL)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d006      	beq.n	80037da <TbxMemPoolBlockCreate+0x42>
    {
      /* Set the result value. */
      result = blockMemPtr;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	617b      	str	r3, [r7, #20]
      /* Create a pointer to an array of size_t elements. */
      size_t * blockSizeArray = blockMemPtr;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	60fb      	str	r3, [r7, #12]
      /* Write to the first element, which should hold the block size. */
      blockSizeArray[0U] = size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Give the result back to the caller. */
  return result;
 80037da:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockCreate ***/
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	08005d40 	.word	0x08005d40

080037e8 <TbxMemPoolBlockGetDataPtr>:
** \param     memPtr Pointer to the start of the block's allocated memory.
** \return    Pointer to where the block's data starts if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockGetDataPtr(void * memPtr)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
  size_t * blockSizeArray;
  void   * dataPtr;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <TbxMemPoolBlockGetDataPtr+0x1c>
 80037fa:	f240 21c7 	movw	r1, #711	@ 0x2c7
 80037fe:	4809      	ldr	r0, [pc, #36]	@ (8003824 <TbxMemPoolBlockGetDataPtr+0x3c>)
 8003800:	f7ff faac 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d006      	beq.n	8003818 <TbxMemPoolBlockGetDataPtr+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = memPtr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	613b      	str	r3, [r7, #16]
    /* The block data starts after the block size value. */
    dataPtr = &blockSizeArray[1U];
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3304      	adds	r3, #4
 8003812:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = dataPtr;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 8003818:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetDataPtr ***/
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	08005d40 	.word	0x08005d40

08003828 <TbxMemPoolBlockGetBlockSize>:
** \param     memPtr Pointer to the start of the block's allocated memory.
** \return    Size in bytes of the block's data if successful, 0 otherwise.
**
****************************************************************************************/
static size_t TbxMemPoolBlockGetBlockSize(void const * memPtr)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  size_t         result = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  size_t const * blockSizeArray;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <TbxMemPoolBlockGetBlockSize+0x1c>
 800383a:	f240 21e6 	movw	r1, #742	@ 0x2e6
 800383e:	4809      	ldr	r0, [pc, #36]	@ (8003864 <TbxMemPoolBlockGetBlockSize+0x3c>)
 8003840:	f7ff fa8c 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <TbxMemPoolBlockGetBlockSize+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = memPtr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	613b      	str	r3, [r7, #16]
    /* The block size value is located at the start of the block, */
    size_t blockSize = blockSizeArray[0U];
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = blockSize;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 8003858:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetBlockSize ***/
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	08005d40 	.word	0x08005d40

08003868 <TbxMemPoolBlockGetMemPtr>:
** \param     dataPtr Pointer to the start of the block's data.
** \return    Pointer to the memory of the block if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockGetMemPtr(void * dataPtr)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  void   * blockMemPtr;
  size_t * blockSizeArray;

  /* Verify parameter. */
  TBX_ASSERT(dataPtr != NULL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <TbxMemPoolBlockGetMemPtr+0x1c>
 800387a:	f240 3106 	movw	r1, #774	@ 0x306
 800387e:	4809      	ldr	r0, [pc, #36]	@ (80038a4 <TbxMemPoolBlockGetMemPtr+0x3c>)
 8003880:	f7ff fa6c 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (dataPtr != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <TbxMemPoolBlockGetMemPtr+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = dataPtr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	613b      	str	r3, [r7, #16]
    /* Get pointer to the start of the block, which is one size_t element before the
     * pointer to the block's data.
     */
    blockMemPtr = &blockSizeArray[-1];
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3b04      	subs	r3, #4
 8003892:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = blockMemPtr;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 8003898:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetMemPtr ***/
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08005d40 	.word	0x08005d40

080038a8 <TbxMemPoolBlockListCreate>:
**            allocated on the heap.
** \return    Pointer to the newly created blocks list if successful, NULL otherwise.
**
****************************************************************************************/
static tBlockList * TbxMemPoolBlockListCreate(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  tBlockList * result;

  /* Attempt to create the linked list object on the heap. */
  result = TbxHeapAllocate(sizeof(tBlockList));
 80038ae:	2004      	movs	r0, #4
 80038b0:	f7ff faa8 	bl	8002e04 <TbxHeapAllocate>
 80038b4:	6078      	str	r0, [r7, #4]
  /* Only continue with the linked list initialization when the allocation was
   * successful.
   */
  if (result != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <TbxMemPoolBlockListCreate+0x1a>
  {
    /* Initialize the linked list to be empty. */
    *result = NULL;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Give the result back to the caller. */
  return result;
 80038c2:	687b      	ldr	r3, [r7, #4]
} /*** end of TbxMemPoolBlockListCreate ***/
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <TbxMemPoolBlockListInsert>:
** \param     nodePtr Pointer to the block node to insert.
**
****************************************************************************************/
static void TbxMemPoolBlockListInsert(tBlockList * listPtr, 
                                      tBlockNode * nodePtr)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Verify parameters. */
  TBX_ASSERT(listPtr != NULL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <TbxMemPoolBlockListInsert+0x1a>
 80038dc:	f240 3143 	movw	r1, #835	@ 0x343
 80038e0:	4811      	ldr	r0, [pc, #68]	@ (8003928 <TbxMemPoolBlockListInsert+0x5c>)
 80038e2:	f7ff fa3b 	bl	8002d5c <TbxAssertTrigger>
  TBX_ASSERT(nodePtr != NULL);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <TbxMemPoolBlockListInsert+0x2a>
 80038ec:	f44f 7151 	mov.w	r1, #836	@ 0x344
 80038f0:	480d      	ldr	r0, [pc, #52]	@ (8003928 <TbxMemPoolBlockListInsert+0x5c>)
 80038f2:	f7ff fa33 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (listPtr != NULL) && (nodePtr != NULL) )
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d011      	beq.n	8003920 <TbxMemPoolBlockListInsert+0x54>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00e      	beq.n	8003920 <TbxMemPoolBlockListInsert+0x54>
  {
    /* Is the list currently empty? */
    if (*listPtr == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <TbxMemPoolBlockListInsert+0x46>
    {
      /* There is no next node. */
      nodePtr->nextNodePtr = NULL;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	e003      	b.n	800391a <TbxMemPoolBlockListInsert+0x4e>
    }
    /* Linked list is not empty. */
    else
    {
      /* The new node will be the current head of the list. */
      nodePtr->nextNodePtr = *listPtr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]
    }
    /* Insert the new node at the start of the list. */
    *listPtr = nodePtr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	601a      	str	r2, [r3, #0]
  }
} /*** end of TbxMemPoolBlockListInsert ***/
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	08005d40 	.word	0x08005d40

0800392c <TbxMemPoolBlockListExtract>:
** \return    Pointer to the block node that was extracted or NULL if the linked list
**            contained no more nodes.
**
****************************************************************************************/
static tBlockNode * TbxMemPoolBlockListExtract(tBlockList * listPtr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  tBlockNode * result = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

  /* Verify parameter. */
  TBX_ASSERT(listPtr != NULL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <TbxMemPoolBlockListExtract+0x1c>
 800393e:	f240 3167 	movw	r1, #871	@ 0x367
 8003942:	480f      	ldr	r0, [pc, #60]	@ (8003980 <TbxMemPoolBlockListExtract+0x54>)
 8003944:	f7ff fa0a 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (listPtr != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <TbxMemPoolBlockListExtract+0x4a>
  {
    /* Only extract a node if the list currently not empty. */
    if (*listPtr != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00f      	beq.n	8003976 <TbxMemPoolBlockListExtract+0x4a>
    {
      /* Get the first node. */
      result = *listPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
      /* Is there currently only one node in the list? */
      if ((*listPtr)->nextNodePtr == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <TbxMemPoolBlockListExtract+0x42>
      {
        /* Set the list to be empty. */
        *listPtr = NULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e003      	b.n	8003976 <TbxMemPoolBlockListExtract+0x4a>
      }
      /* There are currently at least two nodes in the list. */
      else
      {
        /* Make the second node the first one. */
        *listPtr = result->nextNodePtr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* Give the result back to the caller. */
  return result;
 8003976:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolBlockListExtract ***/
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	08005d40 	.word	0x08005d40

08003984 <TbxMemPoolBlockListIsEmpty>:
** \param     listPtr Pointer to the linked list with blocks.
** \return    TBX_TRUE if the block list is empty, TBX_FALSE otherwise.
**
****************************************************************************************/
static uint8_t TbxMemPoolBlockListIsEmpty(tBlockList const * listPtr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_FALSE;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]

  /* Verify parameter. */
  TBX_ASSERT(listPtr != NULL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <TbxMemPoolBlockListIsEmpty+0x1c>
 8003996:	f240 3191 	movw	r1, #913	@ 0x391
 800399a:	4808      	ldr	r0, [pc, #32]	@ (80039bc <TbxMemPoolBlockListIsEmpty+0x38>)
 800399c:	f7ff f9de 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (listPtr != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <TbxMemPoolBlockListIsEmpty+0x2e>
  {
    /* Is the list empty? */
    if (*listPtr == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <TbxMemPoolBlockListIsEmpty+0x2e>
    {
      /* Update the result value. */
      result = TBX_TRUE;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Give the result back to the caller. */
  return result;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMemPoolBlockListIsEmpty ***/
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	08005d40 	.word	0x08005d40

080039c0 <TbxMbEventTask>:
**            For this reason it is recommended to use an RTOS in combination with a
**            Modbus client.
**
****************************************************************************************/
void TbxMbEventTask(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
  static tTbxList * pollerList = NULL;
  static uint8_t    pollerListInitialized = TBX_FALSE;
  const  uint16_t   defaultWaitTimeoutMs = 5000U;
 80039c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80039ca:	827b      	strh	r3, [r7, #18]
  static uint16_t   waitTimeoutMS = 5000U;
  tTbxMbEvent       newEvent = { 0 };
 80039cc:	463b      	mov	r3, r7
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]

  /* Only initialize the event poller once, */
  if (pollerListInitialized == TBX_FALSE)
 80039d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003b00 <TbxMbEventTask+0x140>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10f      	bne.n	80039fc <TbxMbEventTask+0x3c>
  {
    pollerListInitialized = TBX_TRUE;
 80039dc:	4b48      	ldr	r3, [pc, #288]	@ (8003b00 <TbxMbEventTask+0x140>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
    /* Ceate the queue for storing context of which the pollFcn should be called. */
    pollerList = TbxListCreate();
 80039e2:	f7ff fa47 	bl	8002e74 <TbxListCreate>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4a46      	ldr	r2, [pc, #280]	@ (8003b04 <TbxMbEventTask+0x144>)
 80039ea:	6013      	str	r3, [r2, #0]
    /* Verify that the queue creation succeeded. If this assertion fails, increase the
     * heap size using configuration macro TBX_CONF_HEAP_SIZE.
     */
    TBX_ASSERT(pollerList != NULL);
 80039ec:	4b45      	ldr	r3, [pc, #276]	@ (8003b04 <TbxMbEventTask+0x144>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d103      	bne.n	80039fc <TbxMbEventTask+0x3c>
 80039f4:	2168      	movs	r1, #104	@ 0x68
 80039f6:	4844      	ldr	r0, [pc, #272]	@ (8003b08 <TbxMbEventTask+0x148>)
 80039f8:	f7ff f9b0 	bl	8002d5c <TbxAssertTrigger>

  /* Wait for a new event to be posted to the event queue. Note that that wait time only
   * applies in case an RTOS is configured for the OSAL. Otherwise (TBX_MB_OPT_OSAL_NONE)
   * this function returns immediately.
   */
  if (TbxMbOsalEventWait(&newEvent, waitTimeoutMS) == TBX_TRUE)
 80039fc:	4b43      	ldr	r3, [pc, #268]	@ (8003b0c <TbxMbEventTask+0x14c>)
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	463b      	mov	r3, r7
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 ff95 	bl	8005934 <TbxMbOsalEventWait>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d14b      	bne.n	8003aa8 <TbxMbEventTask+0xe8>
  {
    /* Check the opaque context pointer. */
    TBX_ASSERT(newEvent.context != NULL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <TbxMbEventTask+0x5e>
 8003a16:	2172      	movs	r1, #114	@ 0x72
 8003a18:	483b      	ldr	r0, [pc, #236]	@ (8003b08 <TbxMbEventTask+0x148>)
 8003a1a:	f7ff f99f 	bl	8002d5c <TbxAssertTrigger>
    /* Only continue with a valid opaque context pointer. */
    if (newEvent.context != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d041      	beq.n	8003aa8 <TbxMbEventTask+0xe8>
    {
      /* Filter on the event identifier. */
      switch (newEvent.id)
 8003a24:	783b      	ldrb	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <TbxMbEventTask+0x70>
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d025      	beq.n	8003a7a <TbxMbEventTask+0xba>
 8003a2e:	e02c      	b.n	8003a8a <TbxMbEventTask+0xca>
        {
          /* Poller list entries are allocated from a memory pool. This means that there
           * is no need to worry about heap fragmentation. Just make sure to cap the
           * maximum number of entries to prevent heap exhaustion.
           */
          TBX_ASSERT(TbxListGetSize(pollerList) <= TBX_MB_EVENT_QUEUE_SIZE);
 8003a30:	4b34      	ldr	r3, [pc, #208]	@ (8003b04 <TbxMbEventTask+0x144>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fa67 	bl	8002f08 <TbxListGetSize>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d903      	bls.n	8003a48 <TbxMbEventTask+0x88>
 8003a40:	217f      	movs	r1, #127	@ 0x7f
 8003a42:	4831      	ldr	r0, [pc, #196]	@ (8003b08 <TbxMbEventTask+0x148>)
 8003a44:	f7ff f98a 	bl	8002d5c <TbxAssertTrigger>
          /* Only continue if the current poller list size is not yet maxed out. */
          if (TbxListGetSize(pollerList) <= TBX_MB_EVENT_QUEUE_SIZE)
 8003a48:	4b2e      	ldr	r3, [pc, #184]	@ (8003b04 <TbxMbEventTask+0x144>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fa5b 	bl	8002f08 <TbxListGetSize>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d824      	bhi.n	8003aa2 <TbxMbEventTask+0xe2>
          {
            /* Add the context at the end of the event poller list. */
            uint8_t insertResult = TbxListInsertItemBack(pollerList, newEvent.context);
 8003a58:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <TbxMbEventTask+0x144>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fa6f 	bl	8002f44 <TbxListInsertItemBack>
 8003a66:	4603      	mov	r3, r0
 8003a68:	747b      	strb	r3, [r7, #17]
            /* Check that the item could be added to the queue. If not, then the heaps size
             * is configured too small. In this case increase the heap size using
            * configuration macro TBX_CONF_HEAP_SIZE. 
            */
            TBX_ASSERT(insertResult == TBX_OK);
 8003a6a:	7c7b      	ldrb	r3, [r7, #17]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d018      	beq.n	8003aa2 <TbxMbEventTask+0xe2>
 8003a70:	2189      	movs	r1, #137	@ 0x89
 8003a72:	4825      	ldr	r0, [pc, #148]	@ (8003b08 <TbxMbEventTask+0x148>)
 8003a74:	f7ff f972 	bl	8002d5c <TbxAssertTrigger>
          }
        }
        break;
 8003a78:	e013      	b.n	8003aa2 <TbxMbEventTask+0xe2>
      
        case TBX_MB_EVENT_ID_STOP_POLLING:
        {
          /* Remove the context from the event poller list. */
          TbxListRemoveItem(pollerList, newEvent.context);
 8003a7a:	4b22      	ldr	r3, [pc, #136]	@ (8003b04 <TbxMbEventTask+0x144>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fac8 	bl	8003018 <TbxListRemoveItem>
        }
        break;
 8003a88:	e00e      	b.n	8003aa8 <TbxMbEventTask+0xe8>

        default:
        {
          /* Convert the opaque pointer to the event context structure. */
          tTbxMbEventCtx * eventCtx = (tTbxMbEventCtx *)newEvent.context;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]
          /* Pass the event on to the context's event processor. */
          if (eventCtx->processFcn != NULL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <TbxMbEventTask+0xe6>
          {
            eventCtx->processFcn(&newEvent);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	463a      	mov	r2, r7
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4798      	blx	r3
          }
        }
        break;
 8003aa0:	e001      	b.n	8003aa6 <TbxMbEventTask+0xe6>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <TbxMbEventTask+0xe8>
        break;
 8003aa6:	bf00      	nop
      }
    }
  }

  /* Iterate over the event poller list. */
  void * listItem = TbxListGetFirstItem(pollerList);
 8003aa8:	4b16      	ldr	r3, [pc, #88]	@ (8003b04 <TbxMbEventTask+0x144>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fb8f 	bl	80031d0 <TbxListGetFirstItem>
 8003ab2:	6178      	str	r0, [r7, #20]
  while (listItem != NULL)
 8003ab4:	e010      	b.n	8003ad8 <TbxMbEventTask+0x118>
  {
    /* Convert the opaque pointer to the event context structure. */
    tTbxMbEventCtx * eventPollCtx = (tTbxMbEventCtx *)listItem;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	60bb      	str	r3, [r7, #8]
    /* Call its poll function if configured. */
    if (eventPollCtx->pollFcn != NULL)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <TbxMbEventTask+0x10a>
    {
      eventPollCtx->pollFcn(listItem);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	6978      	ldr	r0, [r7, #20]
 8003ac8:	4798      	blx	r3
    }
    /* Move on to the next item in the list. */
    listItem = TbxListGetNextItem(pollerList, listItem);
 8003aca:	4b0e      	ldr	r3, [pc, #56]	@ (8003b04 <TbxMbEventTask+0x144>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fba1 	bl	8003218 <TbxListGetNextItem>
 8003ad6:	6178      	str	r0, [r7, #20]
  while (listItem != NULL)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1eb      	bne.n	8003ab6 <TbxMbEventTask+0xf6>
  /* Set the event wait timeout for the next call to this task function. If the event
   * poller list is not empty, keep the wait time short to make sure the poll functions
   * get continuously called. Otherwise go back to the default wait time to not hog up
   * CPU time unnecessarily.
   */
  waitTimeoutMS = (TbxListGetSize(pollerList) > 0U) ? 1U : defaultWaitTimeoutMs;
 8003ade:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <TbxMbEventTask+0x144>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fa10 	bl	8002f08 <TbxListGetSize>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <TbxMbEventTask+0x132>
 8003aee:	8a7b      	ldrh	r3, [r7, #18]
 8003af0:	e000      	b.n	8003af4 <TbxMbEventTask+0x134>
 8003af2:	2301      	movs	r3, #1
 8003af4:	4a05      	ldr	r2, [pc, #20]	@ (8003b0c <TbxMbEventTask+0x14c>)
 8003af6:	8013      	strh	r3, [r2, #0]
} /*** end of TbxMbEventTask ***/
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	200008dc 	.word	0x200008dc
 8003b04:	200008e0 	.word	0x200008e0
 8003b08:	08005d64 	.word	0x08005d64
 8003b0c:	2000000a 	.word	0x2000000a

08003b10 <TbxMbPortUartInit>:
void TbxMbPortUartInit(tTbxMbUartPort     port, 
                       tTbxMbUartBaudrate baudrate,
                       tTbxMbUartDatabits databits, 
                       tTbxMbUartStopbits stopbits,
                       tTbxMbUartParity   parity)
{
 8003b10:	b490      	push	{r4, r7}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	71fb      	strb	r3, [r7, #7]
 8003b22:	4603      	mov	r3, r0
 8003b24:	71bb      	strb	r3, [r7, #6]
 8003b26:	460b      	mov	r3, r1
 8003b28:	717b      	strb	r3, [r7, #5]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	713b      	strb	r3, [r7, #4]
   *   - Configure the baudrate, number of databits, number of stopbits, and parity mode.
   *   - Enable the UART transmitter and receiver.
   *   - Enable the receive data register full (RXNE) interrupt.
   */

} /*** end of TbxMbPortUartInit ***/
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc90      	pop	{r4, r7}
 8003b36:	4770      	bx	lr

08003b38 <TbxMbPortUartTransmit>:
**
****************************************************************************************/
uint8_t TbxMbPortUartTransmit(tTbxMbUartPort         port, 
                              uint8_t        const * data, 
                              uint16_t               len)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
 8003b44:	4613      	mov	r3, r2
 8003b46:	80bb      	strh	r3, [r7, #4]
  uint8_t result = TBX_OK;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]

  /* Prepare the transmit information taking into account that this function will already
   * start the transmission of the first byte.
   */
  transmitInfo[port].data = data;
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	490b      	ldr	r1, [pc, #44]	@ (8003b7c <TbxMbPortUartTransmit+0x44>)
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
  transmitInfo[port].totalLen = len;
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	4a08      	ldr	r2, [pc, #32]	@ (8003b7c <TbxMbPortUartTransmit+0x44>)
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	88ba      	ldrh	r2, [r7, #4]
 8003b60:	80da      	strh	r2, [r3, #6]
  transmitInfo[port].nextIdx = 1U;
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	4a05      	ldr	r2, [pc, #20]	@ (8003b7c <TbxMbPortUartTransmit+0x44>)
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	809a      	strh	r2, [r3, #4]
   *   byte (len == 1), otherwise enable the transmit data register empty (TXE)
   *   interrupt.
   */

  /* Give the result back to the caller. */
  return result;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbPortUartTransmit ***/
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	200008e4 	.word	0x200008e4

08003b80 <TbxMbPortTimerCount>:
**            accuracy of the T1_5 and T3_5 timings, so there's a trade off involved.
** \return    Free running counter value.
**
****************************************************************************************/
uint16_t TbxMbPortTimerCount(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
   * approach would cause a high interrupt load. It is therefore better from a run-time
   * performance perspective to simply  configure your timer to increment its free
   * running counter every 50 microseconds.
   */

  return 0U;
 8003b84:	2300      	movs	r3, #0
} /*** end of TbxMbPortTimerCount ***/
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TbxMbRtuCreate>:
tTbxMbTp TbxMbRtuCreate(uint8_t            nodeAddr, 
                        tTbxMbUartPort     port, 
                        tTbxMbUartBaudrate baudrate,
                        tTbxMbUartStopbits stopbits,
                        tTbxMbUartParity   parity)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b08f      	sub	sp, #60	@ 0x3c
 8003b94:	af04      	add	r7, sp, #16
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	71fb      	strb	r3, [r7, #7]
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71bb      	strb	r3, [r7, #6]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	717b      	strb	r3, [r7, #5]
 8003baa:	4613      	mov	r3, r2
 8003bac:	713b      	strb	r3, [r7, #4]
  tTbxMbTp result = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Make sure the OSAL event module is initialized. The application will always first
   * create a transport layer object before a channel object. Consequently, this is the
   * best place to do the OSAL module initialization.
   */
  TbxMbOsalEventInit();
 8003bb2:	f001 fe51 	bl	8005858 <TbxMbOsalEventInit>

  /* Verify parameters. */
  TBX_ASSERT((nodeAddr <= TBX_MB_TP_NODE_ADDR_MAX) &&
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	2bf7      	cmp	r3, #247	@ 0xf7
 8003bba:	d80c      	bhi.n	8003bd6 <TbxMbRtuCreate+0x46>
 8003bbc:	79bb      	ldrb	r3, [r7, #6]
 8003bbe:	2b07      	cmp	r3, #7
 8003bc0:	d809      	bhi.n	8003bd6 <TbxMbRtuCreate+0x46>
 8003bc2:	797b      	ldrb	r3, [r7, #5]
 8003bc4:	2b07      	cmp	r3, #7
 8003bc6:	d806      	bhi.n	8003bd6 <TbxMbRtuCreate+0x46>
 8003bc8:	793b      	ldrb	r3, [r7, #4]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d803      	bhi.n	8003bd6 <TbxMbRtuCreate+0x46>
 8003bce:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d903      	bls.n	8003bde <TbxMbRtuCreate+0x4e>
 8003bd6:	2193      	movs	r1, #147	@ 0x93
 8003bd8:	486a      	ldr	r0, [pc, #424]	@ (8003d84 <TbxMbRtuCreate+0x1f4>)
 8003bda:	f7ff f8bf 	bl	8002d5c <TbxAssertTrigger>
             (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
             (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
             (parity < TBX_MB_UART_NUM_PARITY));

  /* Only continue with valid parameters. */
  if ((nodeAddr <= TBX_MB_TP_NODE_ADDR_MAX) &&
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	2bf7      	cmp	r3, #247	@ 0xf7
 8003be2:	f200 80c9 	bhi.w	8003d78 <TbxMbRtuCreate+0x1e8>
 8003be6:	79bb      	ldrb	r3, [r7, #6]
 8003be8:	2b07      	cmp	r3, #7
 8003bea:	f200 80c5 	bhi.w	8003d78 <TbxMbRtuCreate+0x1e8>
      (port < TBX_MB_UART_NUM_PORT) && 
 8003bee:	797b      	ldrb	r3, [r7, #5]
 8003bf0:	2b07      	cmp	r3, #7
 8003bf2:	f200 80c1 	bhi.w	8003d78 <TbxMbRtuCreate+0x1e8>
      (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
 8003bf6:	793b      	ldrb	r3, [r7, #4]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f200 80bd 	bhi.w	8003d78 <TbxMbRtuCreate+0x1e8>
      (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
 8003bfe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	f200 80b8 	bhi.w	8003d78 <TbxMbRtuCreate+0x1e8>
      (parity < TBX_MB_UART_NUM_PARITY))
  {
    /* Allocate memory for the new transport context. */
    tTbxMbTpCtx * newTpCtx = TbxMemPoolAllocate(sizeof(tTbxMbTpCtx));
 8003c08:	f44f 7015 	mov.w	r0, #596	@ 0x254
 8003c0c:	f7ff fc1a 	bl	8003444 <TbxMemPoolAllocate>
 8003c10:	6238      	str	r0, [r7, #32]
    /* Automatically increase the memory pool, if it was too small. */
    if (newTpCtx == NULL)
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <TbxMbRtuCreate+0x9c>
    {
      /* No need to check the return value, because if it failed, the following
       * allocation fails too, which is verified later on.
       */
      (void)TbxMemPoolCreate(1U, sizeof(tTbxMbTpCtx));
 8003c18:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f7ff fb6f 	bl	8003300 <TbxMemPoolCreate>
      newTpCtx = TbxMemPoolAllocate(sizeof(tTbxMbTpCtx));      
 8003c22:	f44f 7015 	mov.w	r0, #596	@ 0x254
 8003c26:	f7ff fc0d 	bl	8003444 <TbxMemPoolAllocate>
 8003c2a:	6238      	str	r0, [r7, #32]
    }
    /* Verify memory allocation of the transport context. */
    TBX_ASSERT(newTpCtx != NULL);
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <TbxMbRtuCreate+0xaa>
 8003c32:	21ac      	movs	r1, #172	@ 0xac
 8003c34:	4853      	ldr	r0, [pc, #332]	@ (8003d84 <TbxMbRtuCreate+0x1f4>)
 8003c36:	f7ff f891 	bl	8002d5c <TbxAssertTrigger>
    /* Only continue if the memory allocation succeeded. */
    if (newTpCtx != NULL)
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 809b 	beq.w	8003d78 <TbxMbRtuCreate+0x1e8>
    {
      /* Initialize the transport context. */
      newTpCtx->type = TBX_MB_RTU_CONTEXT_TYPE;
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2254      	movs	r2, #84	@ 0x54
 8003c46:	731a      	strb	r2, [r3, #12]
      newTpCtx->instancePtr = NULL;
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
      newTpCtx->pollFcn = TbxMbRtuPoll;
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	4a4d      	ldr	r2, [pc, #308]	@ (8003d88 <TbxMbRtuCreate+0x1f8>)
 8003c52:	605a      	str	r2, [r3, #4]
      newTpCtx->processFcn = NULL;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
      newTpCtx->transmitFcn = TbxMbRtuTransmit;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d8c <TbxMbRtuCreate+0x1fc>)
 8003c5e:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
      newTpCtx->receptionDoneFcn = TbxMbRtuReceptionDone;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	4a4a      	ldr	r2, [pc, #296]	@ (8003d90 <TbxMbRtuCreate+0x200>)
 8003c66:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248
      newTpCtx->getRxPacketFcn = TbxMbRtuGetRxPacket;
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	4a49      	ldr	r2, [pc, #292]	@ (8003d94 <TbxMbRtuCreate+0x204>)
 8003c6e:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
      newTpCtx->getTxPacketFcn = TbxMbRtuGetTxPacket;
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	4a48      	ldr	r2, [pc, #288]	@ (8003d98 <TbxMbRtuCreate+0x208>)
 8003c76:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
      newTpCtx->nodeAddr = nodeAddr;
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	79fa      	ldrb	r2, [r7, #7]
 8003c7e:	735a      	strb	r2, [r3, #13]
      newTpCtx->port = port;
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	79ba      	ldrb	r2, [r7, #6]
 8003c84:	739a      	strb	r2, [r3, #14]
      newTpCtx->state = TBX_MB_RTU_STATE_INIT;
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
      newTpCtx->rxTime = TbxMbPortTimerCount();
 8003c8e:	f7ff ff77 	bl	8003b80 <TbxMbPortTimerCount>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f8a3 2222 	strh.w	r2, [r3, #546]	@ 0x222
      newTpCtx->initStateExitSem = TbxMbOsalSemCreate();
 8003c9c:	f001 fe96 	bl	80059cc <TbxMbOsalSemCreate>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
      newTpCtx->diagInfo.busMsgCnt = 0U;
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
      newTpCtx->diagInfo.busCommErrCnt = 0U;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8a3 223a 	strh.w	r2, [r3, #570]	@ 0x23a
      newTpCtx->diagInfo.busExcpErrCnt = 0U;
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8a3 223c 	strh.w	r2, [r3, #572]	@ 0x23c
      newTpCtx->diagInfo.srvMsgCnt = 0U;
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8a3 223e 	strh.w	r2, [r3, #574]	@ 0x23e
      newTpCtx->diagInfo.srvNoRespCnt = 0U;
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
      /* Store the transport context in the lookup table. */
      tbxMbRtuCtx[port] = newTpCtx;
 8003cd0:	79bb      	ldrb	r3, [r7, #6]
 8003cd2:	4932      	ldr	r1, [pc, #200]	@ (8003d9c <TbxMbRtuCreate+0x20c>)
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      /* Initialize the port. Note the RTU always uses 8 databits. */
      TbxMbUartInit(port, baudrate, TBX_MB_UART_8_DATABITS, stopbits, parity,
 8003cda:	793a      	ldrb	r2, [r7, #4]
 8003cdc:	7979      	ldrb	r1, [r7, #5]
 8003cde:	79b8      	ldrb	r0, [r7, #6]
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8003da0 <TbxMbRtuCreate+0x210>)
 8003ce2:	9302      	str	r3, [sp, #8]
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8003da4 <TbxMbRtuCreate+0x214>)
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f001 ff3d 	bl	8005b70 <TbxMbUartInit>
      /* Determine the 1.5 and 3.5 character times in units of 50us ticks. If the
       * baudrate is greater than 19200, then these are fixed to 750us and 1750us,
       * respectively. Make sure to add one extra to adjust for timer resolution
       * inaccuracy.
       */
      if (baudrate > TBX_MB_UART_9600BPS)
 8003cf6:	797b      	ldrb	r3, [r7, #5]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d908      	bls.n	8003d0e <TbxMbRtuCreate+0x17e>
      {
        newTpCtx->t1_5Ticks = 16U;                         /* 750us / 50us ticks.      */
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	2210      	movs	r2, #16
 8003d00:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228
        newTpCtx->t3_5Ticks = 36U;                         /* 1750us / 50us ticks      */
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2224      	movs	r2, #36	@ 0x24
 8003d08:	f8a3 222a 	strh.w	r2, [r3, #554]	@ 0x22a
 8003d0c:	e028      	b.n	8003d60 <TbxMbRtuCreate+0x1d0>
         * 
         * t1_5CharTicks = (16500000 / 50) / baudrate = 330000 / baudrate
         * t3_5CharTicks = (38500000 / 50) / baudrate = 770000 / baudrate
         * 
         */
        const uint16_t baudrateLookup[] =
 8003d0e:	4a26      	ldr	r2, [pc, #152]	@ (8003da8 <TbxMbRtuCreate+0x218>)
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d16:	c303      	stmia	r3!, {r0, r1}
 8003d18:	801a      	strh	r2, [r3, #0]
          19200                                            /* TBX_MB_UART_19200BPS     */
        };
        /* The following calculation does integer roundup (A + (B-1)) / B and adds one
         * extra to adjust for timer resolution inaccuracy.
         */
        uint16_t baudBps = baudrateLookup[baudrate];
 8003d1a:	797b      	ldrb	r3, [r7, #5]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	3328      	adds	r3, #40	@ 0x28
 8003d20:	443b      	add	r3, r7
 8003d22:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003d26:	83fb      	strh	r3, [r7, #30]
        newTpCtx->t1_5Ticks = (uint16_t)(((330000UL + (baudBps - 1UL)) / baudBps) + 1U);
 8003d28:	8bfb      	ldrh	r3, [r7, #30]
 8003d2a:	f503 23a1 	add.w	r3, r3, #329728	@ 0x50800
 8003d2e:	f203 130f 	addw	r3, r3, #271	@ 0x10f
 8003d32:	8bfa      	ldrh	r2, [r7, #30]
 8003d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228
        newTpCtx->t3_5Ticks = (uint16_t)(((770000UL + (baudBps - 1UL)) / baudBps) + 1U);
 8003d44:	8bfb      	ldrh	r3, [r7, #30]
 8003d46:	f503 233b 	add.w	r3, r3, #765952	@ 0xbb000
 8003d4a:	f603 73cf 	addw	r3, r3, #4047	@ 0xfcf
 8003d4e:	8bfa      	ldrh	r2, [r7, #30]
 8003d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f8a3 222a 	strh.w	r2, [r3, #554]	@ 0x22a
      }
      /* Instruct the event task to call our polling function to be able to determine
       * when it's time to transition from INIT to IDLE.
       */
      tTbxMbEvent newEvent = {.context = newTpCtx, .id = TBX_MB_EVENT_ID_START_POLLING};
 8003d60:	2300      	movs	r3, #0
 8003d62:	753b      	strb	r3, [r7, #20]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	61bb      	str	r3, [r7, #24]
      TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 fd90 	bl	8005894 <TbxMbOsalEventPost>
      /* Update the result. */
      result = newTpCtx;
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
} /*** end of TbxMbRtuCreate ***/  
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	372c      	adds	r7, #44	@ 0x2c
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd90      	pop	{r4, r7, pc}
 8003d82:	bf00      	nop
 8003d84:	08005d90 	.word	0x08005d90
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	08003fc5 	.word	0x08003fc5
 8003d90:	08004161 	.word	0x08004161
 8003d94:	080041d9 	.word	0x080041d9
 8003d98:	0800423d 	.word	0x0800423d
 8003d9c:	20000924 	.word	0x20000924
 8003da0:	08004475 	.word	0x08004475
 8003da4:	080043d5 	.word	0x080043d5
 8003da8:	08005db8 	.word	0x08005db8

08003dac <TbxMbRtuPoll>:
**            TBX_MB_EVENT_ID_STOP_POLLING events to activate and deactivate.
** \param     transport Handle to RTU transport layer object.
**
****************************************************************************************/
static void TbxMbRtuPoll(tTbxMbTp transport)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b090      	sub	sp, #64	@ 0x40
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <TbxMbRtuPoll+0x18>
 8003dba:	f240 1131 	movw	r1, #305	@ 0x131
 8003dbe:	4880      	ldr	r0, [pc, #512]	@ (8003fc0 <TbxMbRtuPoll+0x214>)
 8003dc0:	f7fe ffcc 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80f5 	beq.w	8003fb6 <TbxMbRtuPoll+0x20a>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd2:	7b1b      	ldrb	r3, [r3, #12]
 8003dd4:	2b54      	cmp	r3, #84	@ 0x54
 8003dd6:	d004      	beq.n	8003de2 <TbxMbRtuPoll+0x36>
 8003dd8:	f240 1139 	movw	r1, #313	@ 0x139
 8003ddc:	4878      	ldr	r0, [pc, #480]	@ (8003fc0 <TbxMbRtuPoll+0x214>)
 8003dde:	f7fe ffbd 	bl	8002d5c <TbxAssertTrigger>
    /* Filter on the current state. */
    TbxCriticalSectionEnter();
 8003de2:	f7fe ffd1 	bl	8002d88 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de8:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8003dec:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    TbxCriticalSectionExit();
 8003df0:	f7fe ffe4 	bl	8002dbc <TbxCriticalSectionExit>
    switch (currentState)
 8003df4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d008      	beq.n	8003e0e <TbxMbRtuPoll+0x62>
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	f300 80d3 	bgt.w	8003fa8 <TbxMbRtuPoll+0x1fc>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80a1 	beq.w	8003f4a <TbxMbRtuPoll+0x19e>
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d06a      	beq.n	8003ee2 <TbxMbRtuPoll+0x136>

      default:
      {
        /* In the current state, nothing needs to be done. */
      }
      break;
 8003e0c:	e0cc      	b.n	8003fa8 <TbxMbRtuPoll+0x1fc>
        TbxCriticalSectionEnter();
 8003e0e:	f7fe ffbb 	bl	8002d88 <TbxCriticalSectionEnter>
        uint16_t rxTimeCopy = tpCtx->rxTime;
 8003e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e14:	f8b3 3222 	ldrh.w	r3, [r3, #546]	@ 0x222
 8003e18:	873b      	strh	r3, [r7, #56]	@ 0x38
        TbxCriticalSectionExit();
 8003e1a:	f7fe ffcf 	bl	8002dbc <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - rxTimeCopy;
 8003e1e:	f7ff feaf 	bl	8003b80 <TbxMbPortTimerCount>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if (deltaTicks >= tpCtx->t3_5Ticks)
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2e:	f8b3 322a 	ldrh.w	r3, [r3, #554]	@ 0x22a
 8003e32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f0c0 80b9 	bcc.w	8003fac <TbxMbRtuPoll+0x200>
          newEvent.context = tpCtx;
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fd22 	bl	8005894 <TbxMbOsalEventPost>
          TbxCriticalSectionEnter();
 8003e50:	f7fe ff9a 	bl	8002d88 <TbxCriticalSectionEnter>
          uint8_t rxAduOkayCpy = tpCtx->rxAduOkay;
 8003e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e56:	f893 3226 	ldrb.w	r3, [r3, #550]	@ 0x226
 8003e5a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
          TbxCriticalSectionExit();
 8003e5e:	f7fe ffad 	bl	8002dbc <TbxCriticalSectionExit>
          if (rxAduOkayCpy == TBX_TRUE)
 8003e62:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d132      	bne.n	8003ed0 <TbxMbRtuPoll+0x124>
            TbxCriticalSectionEnter();
 8003e6a:	f7fe ff8d 	bl	8002d88 <TbxCriticalSectionEnter>
            tpCtx->state = TBX_MB_RTU_STATE_VALIDATION;
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e70:	2204      	movs	r2, #4
 8003e72:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
            TbxCriticalSectionExit();
 8003e76:	f7fe ffa1 	bl	8002dbc <TbxCriticalSectionExit>
            tpCtx->rxPacket.dataLen = tpCtx->rxAduWrIdx - 4U;
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7c:	f8b3 3224 	ldrh.w	r3, [r3, #548]	@ 0x224
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	3b04      	subs	r3, #4
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e88:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
            tpCtx->rxPacket.node = tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8e:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8003e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e94:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
            if (TbxMbRtuValidate(tpCtx) != TBX_OK)
 8003e98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003e9a:	f000 fa01 	bl	80042a0 <TbxMbRtuValidate>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d008      	beq.n	8003eb6 <TbxMbRtuPoll+0x10a>
              TbxCriticalSectionEnter();
 8003ea4:	f7fe ff70 	bl	8002d88 <TbxCriticalSectionEnter>
              tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
              TbxCriticalSectionExit();
 8003eb0:	f7fe ff84 	bl	8002dbc <TbxCriticalSectionExit>
      break;
 8003eb4:	e07a      	b.n	8003fac <TbxMbRtuPoll+0x200>
              pduRxEvent.context = tpCtx->channelCtx;
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb8:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8003ebc:	623b      	str	r3, [r7, #32]
              pduRxEvent.id = TBX_MB_EVENT_ID_PDU_RECEIVED;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	773b      	strb	r3, [r7, #28]
              TbxMbOsalEventPost(&pduRxEvent, TBX_FALSE);
 8003ec2:	f107 031c 	add.w	r3, r7, #28
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 fce3 	bl	8005894 <TbxMbOsalEventPost>
      break;
 8003ece:	e06d      	b.n	8003fac <TbxMbRtuPoll+0x200>
            TbxCriticalSectionEnter();
 8003ed0:	f7fe ff5a 	bl	8002d88 <TbxCriticalSectionEnter>
            tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
            TbxCriticalSectionExit();
 8003edc:	f7fe ff6e 	bl	8002dbc <TbxCriticalSectionExit>
      break;
 8003ee0:	e064      	b.n	8003fac <TbxMbRtuPoll+0x200>
        TbxCriticalSectionEnter();
 8003ee2:	f7fe ff51 	bl	8002d88 <TbxCriticalSectionEnter>
        uint16_t txDoneTimeCopy = tpCtx->txDoneTime;
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee8:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8003eec:	867b      	strh	r3, [r7, #50]	@ 0x32
        TbxCriticalSectionExit();
 8003eee:	f7fe ff65 	bl	8002dbc <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - txDoneTimeCopy;
 8003ef2:	f7ff fe45 	bl	8003b80 <TbxMbPortTimerCount>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	863b      	strh	r3, [r7, #48]	@ 0x30
        if (deltaTicks >= tpCtx->t3_5Ticks)
 8003f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f02:	f8b3 322a 	ldrh.w	r3, [r3, #554]	@ 0x22a
 8003f06:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d351      	bcc.n	8003fb0 <TbxMbRtuPoll+0x204>
          TbxCriticalSectionEnter();
 8003f0c:	f7fe ff3c 	bl	8002d88 <TbxCriticalSectionEnter>
          tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
          TbxCriticalSectionExit();
 8003f18:	f7fe ff50 	bl	8002dbc <TbxCriticalSectionExit>
          newEvent.context = tpCtx;
 8003f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1e:	61bb      	str	r3, [r7, #24]
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 8003f20:	2301      	movs	r3, #1
 8003f22:	753b      	strb	r3, [r7, #20]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 fcb2 	bl	8005894 <TbxMbOsalEventPost>
          newEvent.context = tpCtx->channelCtx;
 8003f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f32:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8003f36:	61bb      	str	r3, [r7, #24]
          newEvent.id = TBX_MB_EVENT_ID_PDU_TRANSMITTED;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	753b      	strb	r3, [r7, #20]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003f3c:	f107 0314 	add.w	r3, r7, #20
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 fca6 	bl	8005894 <TbxMbOsalEventPost>
      break;
 8003f48:	e032      	b.n	8003fb0 <TbxMbRtuPoll+0x204>
        TbxCriticalSectionEnter();
 8003f4a:	f7fe ff1d 	bl	8002d88 <TbxCriticalSectionEnter>
        uint16_t rxTimeCopy = tpCtx->rxTime;
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f50:	f8b3 3222 	ldrh.w	r3, [r3, #546]	@ 0x222
 8003f54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        TbxCriticalSectionExit();
 8003f56:	f7fe ff31 	bl	8002dbc <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - rxTimeCopy;
 8003f5a:	f7ff fe11 	bl	8003b80 <TbxMbPortTimerCount>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        if (deltaTicks >= tpCtx->t3_5Ticks)
 8003f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f6a:	f8b3 322a 	ldrh.w	r3, [r3, #554]	@ 0x22a
 8003f6e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d31f      	bcc.n	8003fb4 <TbxMbRtuPoll+0x208>
          TbxCriticalSectionEnter();
 8003f74:	f7fe ff08 	bl	8002d88 <TbxCriticalSectionEnter>
          tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
          TbxCriticalSectionExit();
 8003f80:	f7fe ff1c 	bl	8002dbc <TbxCriticalSectionExit>
          newEvent.context = tpCtx;
 8003f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f86:	613b      	str	r3, [r7, #16]
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	733b      	strb	r3, [r7, #12]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003f8c:	f107 030c 	add.w	r3, r7, #12
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 fc7e 	bl	8005894 <TbxMbOsalEventPost>
          TbxMbOsalSemGive(tpCtx->initStateExitSem, TBX_FALSE);
 8003f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f9a:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 fd41 	bl	8005a28 <TbxMbOsalSemGive>
      break;
 8003fa6:	e005      	b.n	8003fb4 <TbxMbRtuPoll+0x208>
      break;
 8003fa8:	bf00      	nop
 8003faa:	e004      	b.n	8003fb6 <TbxMbRtuPoll+0x20a>
      break;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <TbxMbRtuPoll+0x20a>
      break;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <TbxMbRtuPoll+0x20a>
      break;
 8003fb4:	bf00      	nop
    }
  }
} /*** end of TbxMbRtuPoll ***/
 8003fb6:	bf00      	nop
 8003fb8:	3740      	adds	r7, #64	@ 0x40
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08005d90 	.word	0x08005d90

08003fc4 <TbxMbRtuTransmit>:
** \param     transport Handle to RTU transport layer object.
** \return    TBX_OK if successful, TBX_ERROR otherwise. 
**
****************************************************************************************/
static uint8_t TbxMbRtuTransmit(tTbxMbTp transport)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_ERROR;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	77fb      	strb	r3, [r7, #31]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <TbxMbRtuTransmit+0x1c>
 8003fd6:	f240 11e5 	movw	r1, #485	@ 0x1e5
 8003fda:	485f      	ldr	r0, [pc, #380]	@ (8004158 <TbxMbRtuTransmit+0x194>)
 8003fdc:	f7fe febe 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80b3 	beq.w	800414e <TbxMbRtuTransmit+0x18a>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	61bb      	str	r3, [r7, #24]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	7b1b      	ldrb	r3, [r3, #12]
 8003ff0:	2b54      	cmp	r3, #84	@ 0x54
 8003ff2:	d004      	beq.n	8003ffe <TbxMbRtuTransmit+0x3a>
 8003ff4:	f240 11ed 	movw	r1, #493	@ 0x1ed
 8003ff8:	4857      	ldr	r0, [pc, #348]	@ (8004158 <TbxMbRtuTransmit+0x194>)
 8003ffa:	f7fe feaf 	bl	8002d5c <TbxAssertTrigger>
    /* Are we requested to transmit an exception response? */
    TbxCriticalSectionEnter();
 8003ffe:	f7fe fec3 	bl	8002d88 <TbxCriticalSectionEnter>
    uint8_t codeCopy = tpCtx->txPacket.pdu.code;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	7d9b      	ldrb	r3, [r3, #22]
 8004006:	75fb      	strb	r3, [r7, #23]
    TbxCriticalSectionExit();
 8004008:	f7fe fed8 	bl	8002dbc <TbxCriticalSectionExit>
    if ((codeCopy & TBX_MB_FC_EXCEPTION_MASK) == TBX_MB_FC_EXCEPTION_MASK)
 800400c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004010:	2b00      	cmp	r3, #0
 8004012:	da07      	bge.n	8004024 <TbxMbRtuTransmit+0x60>
    {
      /* Increment the total number of exception responses. */
      tpCtx->diagInfo.busExcpErrCnt++;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f8b3 323c 	ldrh.w	r3, [r3, #572]	@ 0x23c
 800401a:	3301      	adds	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f8a3 223c 	strh.w	r2, [r3, #572]	@ 0x23c
    }
    TbxCriticalSectionEnter();
 8004024:	f7fe feb0 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Still in the INIT state and configured as a client? */
    if ( (tpCtx->state == TBX_MB_RTU_STATE_INIT) && (tpCtx->isClient == TBX_TRUE) )
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d121      	bne.n	8004076 <TbxMbRtuTransmit+0xb2>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f893 322d 	ldrb.w	r3, [r3, #557]	@ 0x22d
 8004038:	2b01      	cmp	r3, #1
 800403a:	d11c      	bne.n	8004076 <TbxMbRtuTransmit+0xb2>
       * The largest ADU to receive is 256 bytes. Adding the t3_5 end-of-frame time, 
       * means the longest time to wait for a transition to the IDLE state is:
       * 256 + 3.5 = 259.5 characters. This is ceil(259.5/3.5) = 75 times the t3_5
       * timer interval. Use this to calculate the timeout in ticks of the RTU timer.
       */
      uint16_t waitTimeoutTicks = tpCtx->t3_5Ticks * 75U;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f8b3 322a 	ldrh.w	r3, [r3, #554]	@ 0x22a
 8004042:	461a      	mov	r2, r3
 8004044:	0092      	lsls	r2, r2, #2
 8004046:	4413      	add	r3, r2
 8004048:	461a      	mov	r2, r3
 800404a:	0112      	lsls	r2, r2, #4
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	82bb      	strh	r3, [r7, #20]
      /* Convert it to milliseconds. Knowing that the RTU timer always runs at 20 kHz,
       * divide by 20. Just make sure to do integer roundup (A + (B-1)) / B.
       */
      uint16_t waitTimeoutMs = (waitTimeoutTicks + 19U) / 20U;
 8004050:	8abb      	ldrh	r3, [r7, #20]
 8004052:	3313      	adds	r3, #19
 8004054:	4a41      	ldr	r2, [pc, #260]	@ (800415c <TbxMbRtuTransmit+0x198>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	827b      	strh	r3, [r7, #18]
       * done later on in this function, so that error situation is already handled.
       * Make sure to briefly leave the critical section for calling TbxMbOsalSemTake().
       * With an RTOS this could lead to a context switch for which interrupts need to
       * be enabled.
       */
      TbxCriticalSectionExit();
 800405e:	f7fe fead 	bl	8002dbc <TbxCriticalSectionExit>
      (void)TbxMbOsalSemTake(tpCtx->initStateExitSem, waitTimeoutMs);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8004068:	8a7a      	ldrh	r2, [r7, #18]
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f001 fd05 	bl	8005a7c <TbxMbOsalSemTake>
      TbxCriticalSectionEnter();
 8004072:	f7fe fe89 	bl	8002d88 <TbxCriticalSectionEnter>
    }
    /* New transmissions are only possible from the IDLE state. */
    uint8_t okayToTransmit = TBX_FALSE;
 8004076:	2300      	movs	r3, #0
 8004078:	77bb      	strb	r3, [r7, #30]
    if (tpCtx->state == TBX_MB_RTU_STATE_IDLE)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d112      	bne.n	80040aa <TbxMbRtuTransmit+0xe6>
      /* Should a response actually be transmitted? If we are a server, then upon
       * reception packet validation, txPacket.node was already set to 
       * TBX_MB_TP_NODE_ADDR_BROADCAST for us, in case of a broadcast request, which
       * does not require a response.
       */
      if ( (tpCtx->isClient == TBX_FALSE) && 
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f893 322d 	ldrb.w	r3, [r3, #557]	@ 0x22d
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <TbxMbRtuTransmit+0xda>
           (tpCtx->txPacket.node == TBX_MB_TP_NODE_ADDR_BROADCAST) )
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
      if ( (tpCtx->isClient == TBX_FALSE) && 
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <TbxMbRtuTransmit+0xda>
      {
        /* To bypass the actual response transmission, simply update the result to
         * indicate success and keep the okayToTransmit set to its default TBX_FALSE.
         */
        result = TBX_OK;
 8004098:	2301      	movs	r3, #1
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e005      	b.n	80040aa <TbxMbRtuTransmit+0xe6>
      }
      /* Okay to transmit the response. */
      else
      {
        okayToTransmit = TBX_TRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	77bb      	strb	r3, [r7, #30]
        /* Transition to the TRANSMISSION state to lock access to the txPacket for the
         * duration of the transmission. Note that the unlock happens once the state 
         * transitions back to IDLE. This happens 3.5 character times after the 
         * completion of the transmission.
         */
        tpCtx->state = TBX_MB_RTU_STATE_TRANSMISSION;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2202      	movs	r2, #2
 80040a6:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
      }
    }
    TbxCriticalSectionExit();
 80040aa:	f7fe fe87 	bl	8002dbc <TbxCriticalSectionExit>
    /* Only continue if no other packet transmission is already in progress. */
    if (okayToTransmit == TBX_TRUE)
 80040ae:	7fbb      	ldrb	r3, [r7, #30]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d141      	bne.n	8004138 <TbxMbRtuTransmit+0x174>
       * - Node address (1 byte)
       * - Function code (1 byte)
       * - Packet data (dataLen bytes)
       * - CRC16 (2 bytes)
       */
      uint8_t * aduPtr = &tpCtx->txPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	3315      	adds	r3, #21
 80040b8:	60fb      	str	r3, [r7, #12]
      uint16_t  aduLen = tpCtx->txPacket.dataLen + 4U;
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80040c0:	3304      	adds	r3, #4
 80040c2:	817b      	strh	r3, [r7, #10]
       * PDU. For client->server transfers the address field is the servers's node
       * address (unicast) or 0 (broadcast) and the client channel will have stored it in
       * the txPacket.node element. For server-client transfers it always the servers's
       * node address as stored when creating the RTU transport layer context.
       */
      aduPtr[0] = (tpCtx->isClient == TBX_TRUE) ? tpCtx->txPacket.node : tpCtx->nodeAddr;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f893 322d 	ldrb.w	r3, [r3, #557]	@ 0x22d
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d103      	bne.n	80040d6 <TbxMbRtuTransmit+0x112>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
 80040d4:	e001      	b.n	80040da <TbxMbRtuTransmit+0x116>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	7b5b      	ldrb	r3, [r3, #13]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	7013      	strb	r3, [r2, #0]
      /* Populate the ADU tail. For RTU it is the CRC16 right after the PDU's data. */
      uint16_t adu_crc = TbxMbRtuCalculatCrc(aduPtr, aduLen - 2U);
 80040de:	897b      	ldrh	r3, [r7, #10]
 80040e0:	3b02      	subs	r3, #2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4619      	mov	r1, r3
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa90 	bl	800460c <TbxMbRtuCalculatCrc>
 80040ec:	4603      	mov	r3, r0
 80040ee:	813b      	strh	r3, [r7, #8]
      aduPtr[aduLen - 2U] = (uint8_t)adu_crc;                         /* CRC16 low.  */
 80040f0:	897b      	ldrh	r3, [r7, #10]
 80040f2:	3b02      	subs	r3, #2
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	893a      	ldrh	r2, [r7, #8]
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
      aduPtr[aduLen - 1U] = (uint8_t)(adu_crc >> 8U);                 /* CRC16 high. */
 80040fe:	893b      	ldrh	r3, [r7, #8]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	b299      	uxth	r1, r3
 8004104:	897b      	ldrh	r3, [r7, #10]
 8004106:	3b01      	subs	r3, #1
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	b2ca      	uxtb	r2, r1
 800410e:	701a      	strb	r2, [r3, #0]
      /* Pass ADU transmit request on to the UART module. */
      result = TbxMbUartTransmit(tpCtx->port, aduPtr, aduLen);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	7b9b      	ldrb	r3, [r3, #14]
 8004114:	897a      	ldrh	r2, [r7, #10]
 8004116:	68f9      	ldr	r1, [r7, #12]
 8004118:	4618      	mov	r0, r3
 800411a:	f001 fd77 	bl	8005c0c <TbxMbUartTransmit>
 800411e:	4603      	mov	r3, r0
 8004120:	77fb      	strb	r3, [r7, #31]
      /* Transition back to the IDLE state, because the transmission could not be
       * started. The unlocks access to txPacket for a possible future transmission.
       */
      if (result != TBX_OK)
 8004122:	7ffb      	ldrb	r3, [r7, #31]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d007      	beq.n	8004138 <TbxMbRtuTransmit+0x174>
      {
        TbxCriticalSectionEnter();
 8004128:	f7fe fe2e 	bl	8002d88 <TbxCriticalSectionEnter>
        tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
        TbxCriticalSectionExit();
 8004134:	f7fe fe42 	bl	8002dbc <TbxCriticalSectionExit>
      }
    }
    /* Problem detected that prevented the response from being sent? */
    if (result == TBX_ERROR)
 8004138:	7ffb      	ldrb	r3, [r7, #31]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d107      	bne.n	800414e <TbxMbRtuTransmit+0x18a>
    {
      /* Increment the total number of not sent responses. */
      tpCtx->diagInfo.srvNoRespCnt++;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f8b3 3240 	ldrh.w	r3, [r3, #576]	@ 0x240
 8004144:	3301      	adds	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
    }
  }
  /* Give the result back to the caller. */
  return result;
 800414e:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMbRtuTransmit ***/
 8004150:	4618      	mov	r0, r3
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	08005d90 	.word	0x08005d90
 800415c:	cccccccd 	.word	0xcccccccd

08004160 <TbxMbRtuReceptionDone>:
**            context.
** \param     transport Handle to RTU transport layer object.
**
****************************************************************************************/
static void TbxMbRtuReceptionDone(tTbxMbTp transport)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <TbxMbRtuReceptionDone+0x18>
 800416e:	f240 2173 	movw	r1, #627	@ 0x273
 8004172:	4818      	ldr	r0, [pc, #96]	@ (80041d4 <TbxMbRtuReceptionDone+0x74>)
 8004174:	f7fe fdf2 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d025      	beq.n	80041ca <TbxMbRtuReceptionDone+0x6a>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60fb      	str	r3, [r7, #12]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	7b1b      	ldrb	r3, [r3, #12]
 8004186:	2b54      	cmp	r3, #84	@ 0x54
 8004188:	d004      	beq.n	8004194 <TbxMbRtuReceptionDone+0x34>
 800418a:	f240 217b 	movw	r1, #635	@ 0x27b
 800418e:	4811      	ldr	r0, [pc, #68]	@ (80041d4 <TbxMbRtuReceptionDone+0x74>)
 8004190:	f7fe fde4 	bl	8002d5c <TbxAssertTrigger>
    /* This function should only be called in the VALIDATION state. Verify this. */
    TbxCriticalSectionEnter();
 8004194:	f7fe fdf8 	bl	8002d88 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 800419e:	72fb      	strb	r3, [r7, #11]
    TbxCriticalSectionExit();
 80041a0:	f7fe fe0c 	bl	8002dbc <TbxCriticalSectionExit>
    TBX_ASSERT(currentState == TBX_MB_RTU_STATE_VALIDATION);
 80041a4:	7afb      	ldrb	r3, [r7, #11]
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d004      	beq.n	80041b4 <TbxMbRtuReceptionDone+0x54>
 80041aa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80041ae:	4809      	ldr	r0, [pc, #36]	@ (80041d4 <TbxMbRtuReceptionDone+0x74>)
 80041b0:	f7fe fdd4 	bl	8002d5c <TbxAssertTrigger>
    /* Only continue in the VALIDATION state. Note that in the VALIDATION state, the data
     * reception path is locked until a transition back to IDLE state is made, which is
     * handled by this function.
     */
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 80041b4:	7afb      	ldrb	r3, [r7, #11]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d107      	bne.n	80041ca <TbxMbRtuReceptionDone+0x6a>
    {
      /* Transistion back to the IDLE state to unlock the data reception path, allowing
       * the reception of new packets.
       */
      TbxCriticalSectionEnter();
 80041ba:	f7fe fde5 	bl	8002d88 <TbxCriticalSectionEnter>
      tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
      TbxCriticalSectionExit();
 80041c6:	f7fe fdf9 	bl	8002dbc <TbxCriticalSectionExit>
    }
  }
} /*** end of TbxMbRtuReceptionDone ****/
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	08005d90 	.word	0x08005d90

080041d8 <TbxMbRtuGetRxPacket>:
** \param     transport Handle to RTU transport layer object.
** \return    Pointer to the packet or NULL if currently not accessible.
**
****************************************************************************************/
static tTbxMbTpPacket * TbxMbRtuGetRxPacket(tTbxMbTp transport)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  tTbxMbTpPacket * result = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <TbxMbRtuGetRxPacket+0x1c>
 80041ea:	f240 219f 	movw	r1, #671	@ 0x29f
 80041ee:	4812      	ldr	r0, [pc, #72]	@ (8004238 <TbxMbRtuGetRxPacket+0x60>)
 80041f0:	f7fe fdb4 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d019      	beq.n	800422e <TbxMbRtuGetRxPacket+0x56>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	7b1b      	ldrb	r3, [r3, #12]
 8004202:	2b54      	cmp	r3, #84	@ 0x54
 8004204:	d004      	beq.n	8004210 <TbxMbRtuGetRxPacket+0x38>
 8004206:	f240 21a7 	movw	r1, #679	@ 0x2a7
 800420a:	480b      	ldr	r0, [pc, #44]	@ (8004238 <TbxMbRtuGetRxPacket+0x60>)
 800420c:	f7fe fda6 	bl	8002d5c <TbxAssertTrigger>
    /* Access to the reception packet by a channel is only allowed in the VALIDATION
     * state. In this state the reception path is locked until a transition back to IDLE
     * state is made. This happens once the channel called receptionDoneFcn().
     */
    TbxCriticalSectionEnter();
 8004210:	f7fe fdba 	bl	8002d88 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 800421a:	73fb      	strb	r3, [r7, #15]
    TbxCriticalSectionExit();
 800421c:	f7fe fdce 	bl	8002dbc <TbxCriticalSectionExit>
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b04      	cmp	r3, #4
 8004224:	d103      	bne.n	800422e <TbxMbRtuGetRxPacket+0x56>
    {
      /* Update the result. */
      result = &tpCtx->rxPacket;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800422c:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 800422e:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbRtuGetRxPacket ***/
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	08005d90 	.word	0x08005d90

0800423c <TbxMbRtuGetTxPacket>:
** \param     transport Handle to RTU transport layer object.
** \return    Pointer to the packet or NULL if currently not accessible.
**
****************************************************************************************/
static tTbxMbTpPacket * TbxMbRtuGetTxPacket(tTbxMbTp transport)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  tTbxMbTpPacket * result = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <TbxMbRtuGetTxPacket+0x1c>
 800424e:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
 8004252:	4812      	ldr	r0, [pc, #72]	@ (800429c <TbxMbRtuGetTxPacket+0x60>)
 8004254:	f7fe fd82 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d018      	beq.n	8004290 <TbxMbRtuGetTxPacket+0x54>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	7b1b      	ldrb	r3, [r3, #12]
 8004266:	2b54      	cmp	r3, #84	@ 0x54
 8004268:	d004      	beq.n	8004274 <TbxMbRtuGetTxPacket+0x38>
 800426a:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800426e:	480b      	ldr	r0, [pc, #44]	@ (800429c <TbxMbRtuGetTxPacket+0x60>)
 8004270:	f7fe fd74 	bl	8002d5c <TbxAssertTrigger>
    /* Access to the transmission packet by a channel is only allowed outside the 
     * TRANSMISSION state. In this state the transmission path is locked until a
     * transition back to IDLE state is made. This happens once the transport layer
     * completed the packet transmission.
     */
    TbxCriticalSectionEnter();
 8004274:	f7fe fd88 	bl	8002d88 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 800427e:	73fb      	strb	r3, [r7, #15]
    TbxCriticalSectionExit();
 8004280:	f7fe fd9c 	bl	8002dbc <TbxCriticalSectionExit>
    if (currentState != TBX_MB_RTU_STATE_TRANSMISSION)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d002      	beq.n	8004290 <TbxMbRtuGetTxPacket+0x54>
    {
      /* Update the result. */
      result = &tpCtx->txPacket;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	330f      	adds	r3, #15
 800428e:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 8004290:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbRtuGetTxPacket ***/
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	08005d90 	.word	0x08005d90

080042a0 <TbxMbRtuValidate>:
** \param     transport Handle to RTU transport layer object.
** \return    TBX_OK if successful, TBX_ERROR otherwise. 
**
****************************************************************************************/
static uint8_t TbxMbRtuValidate(tTbxMbTp transport)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_ERROR;
 80042a8:	2300      	movs	r3, #0
 80042aa:	77fb      	strb	r3, [r7, #31]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <TbxMbRtuValidate+0x1c>
 80042b2:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 80042b6:	4846      	ldr	r0, [pc, #280]	@ (80043d0 <TbxMbRtuValidate+0x130>)
 80042b8:	f7fe fd50 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8081 	beq.w	80043c6 <TbxMbRtuValidate+0x126>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	61bb      	str	r3, [r7, #24]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	7b1b      	ldrb	r3, [r3, #12]
 80042cc:	2b54      	cmp	r3, #84	@ 0x54
 80042ce:	d004      	beq.n	80042da <TbxMbRtuValidate+0x3a>
 80042d0:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 80042d4:	483e      	ldr	r0, [pc, #248]	@ (80043d0 <TbxMbRtuValidate+0x130>)
 80042d6:	f7fe fd41 	bl	8002d5c <TbxAssertTrigger>
    /* This function should only be called in the VALIDATION state. Verify this. */
    TbxCriticalSectionEnter();
 80042da:	f7fe fd55 	bl	8002d88 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 80042e4:	75fb      	strb	r3, [r7, #23]
    TbxCriticalSectionExit();
 80042e6:	f7fe fd69 	bl	8002dbc <TbxCriticalSectionExit>
    TBX_ASSERT(currentState == TBX_MB_RTU_STATE_VALIDATION);
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d004      	beq.n	80042fa <TbxMbRtuValidate+0x5a>
 80042f0:	f240 21fd 	movw	r1, #765	@ 0x2fd
 80042f4:	4836      	ldr	r0, [pc, #216]	@ (80043d0 <TbxMbRtuValidate+0x130>)
 80042f6:	f7fe fd31 	bl	8002d5c <TbxAssertTrigger>
    /* Only continue in the VALIDATION state. Note that in the VALIDATION state, the data
     * reception path is locked until a transition back to IDLE state is made.
     * Consequenty, there is no need for critical sections when accessing the .rxXyz
     * elements of the TP context. 
     */
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d162      	bne.n	80043c6 <TbxMbRtuValidate+0x126>
    {
      /* Increment the total number of received packets, regardless of addressing or
       * CRC.
       */
      tpCtx->diagInfo.busMsgCnt++;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 8004306:	3301      	adds	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
      /* The ADU for an RTU packet starts at one byte before the PDU, which is the last
       * byte of head[]. Get the pointer of where the ADU starts in the rxPacket.
       */
      uint8_t * aduPtr = &tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004316:	613b      	str	r3, [r7, #16]
       * - Node address (1 byte)
       * - Function code (1 byte)
       * - Packet data (dataLen bytes)
       * - CRC16 (2 bytes)
       */
      uint8_t const * crcPtr = &aduPtr[2U + tpCtx->rxPacket.dataLen];
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800431e:	3302      	adds	r3, #2
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
      /* Read out the CRC16 stored in the ADU packet. */
      uint16_t packetCrc = crcPtr[0] | (uint16_t)(crcPtr[1] << 8U);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	b29b      	uxth	r3, r3
 8004336:	4313      	orrs	r3, r2
 8004338:	817b      	strh	r3, [r7, #10]
      /* Calculate the CRC16 based on the packet contents. It's calculated over the
       * entire ADU data, just excluding the last two byte with the CRC16.
       */
      uint16_t calcCrc = TbxMbRtuCalculatCrc(aduPtr, tpCtx->rxPacket.dataLen + 2U);
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8004340:	3302      	adds	r3, #2
 8004342:	b29b      	uxth	r3, r3
 8004344:	4619      	mov	r1, r3
 8004346:	6938      	ldr	r0, [r7, #16]
 8004348:	f000 f960 	bl	800460c <TbxMbRtuCalculatCrc>
 800434c:	4603      	mov	r3, r0
 800434e:	813b      	strh	r3, [r7, #8]
      /* Are the two CRC16s a mismatch? */
      if (packetCrc != calcCrc)
 8004350:	897a      	ldrh	r2, [r7, #10]
 8004352:	893b      	ldrh	r3, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	d008      	beq.n	800436a <TbxMbRtuValidate+0xca>
      {
        /* Increment the total number of received packets with an incorrect CRC. */
        tpCtx->diagInfo.busCommErrCnt++;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 800435e:	3301      	adds	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f8a3 223a 	strh.w	r2, [r3, #570]	@ 0x23a
 8004368:	e02d      	b.n	80043c6 <TbxMbRtuValidate+0x126>
      else
      {
        /* Continue checking if the ADU is addressed to us. This check is different for a
         * server and a client. Start with the server case.
         */
        if (tpCtx->isClient == TBX_FALSE)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f893 322d 	ldrb.w	r3, [r3, #557]	@ 0x22d
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11c      	bne.n	80043ae <TbxMbRtuValidate+0x10e>
        {
          /* Only process frames that are addressed to us (unicast or broadcast). */
          if ((tpCtx->rxPacket.node == tpCtx->nodeAddr) ||
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f893 2221 	ldrb.w	r2, [r3, #545]	@ 0x221
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	7b5b      	ldrb	r3, [r3, #13]
 800437e:	429a      	cmp	r2, r3
 8004380:	d004      	beq.n	800438c <TbxMbRtuValidate+0xec>
              (tpCtx->rxPacket.node == TBX_MB_TP_NODE_ADDR_BROADCAST))
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f893 3221 	ldrb.w	r3, [r3, #545]	@ 0x221
          if ((tpCtx->rxPacket.node == tpCtx->nodeAddr) ||
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11c      	bne.n	80043c6 <TbxMbRtuValidate+0x126>
          {
            /* Increment the total number of received packets with a correct CRC, that
             * were addressed to us. Either via unicast of broadcast.
             */
            tpCtx->diagInfo.srvMsgCnt++;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f8b3 323e 	ldrh.w	r3, [r3, #574]	@ 0x23e
 8004392:	3301      	adds	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f8a3 223e 	strh.w	r2, [r3, #574]	@ 0x23e
             * transmission to decide if the actual sending of the response should be
             * suppressed, which is the case for TBX_MB_TP_NODE_ADDR_BROADCAST. No need
             * for a critical section, because we are guaranteed not in the IDLE or
             * TRANSMISSION states.
             */
            tpCtx->txPacket.node = tpCtx->rxPacket.node;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f893 2221 	ldrb.w	r2, [r3, #545]	@ 0x221
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
            /* Packet is valid. Update the result accordingly. */
            result = TBX_OK;
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e00b      	b.n	80043c6 <TbxMbRtuValidate+0x126>
        }
        /* Linked to a client channel. */
        else
        {
          /* Only process frames that are send from a valid server. */
          if ( (tpCtx->rxPacket.node >= TBX_MB_TP_NODE_ADDR_MIN) ||
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f893 3221 	ldrb.w	r3, [r3, #545]	@ 0x221
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <TbxMbRtuValidate+0x122>
               (tpCtx->rxPacket.node <= TBX_MB_TP_NODE_ADDR_MAX) )
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f893 3221 	ldrb.w	r3, [r3, #545]	@ 0x221
          if ( (tpCtx->rxPacket.node >= TBX_MB_TP_NODE_ADDR_MIN) ||
 80043be:	2bf7      	cmp	r3, #247	@ 0xf7
 80043c0:	d801      	bhi.n	80043c6 <TbxMbRtuValidate+0x126>
          {
            /* Packet is valid. Update the result accordingly. */
            result = TBX_OK;
 80043c2:	2301      	movs	r3, #1
 80043c4:	77fb      	strb	r3, [r7, #31]
        }
      }
    }
  }
  /* Give the result back to the caller. */
  return result;
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMbRtuValidate ***/
 80043c8:	4618      	mov	r0, r3
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	08005d90 	.word	0x08005d90

080043d4 <TbxMbRtuTransmitComplete>:
**            access to the shared resource.
** \param     port The serial port that the transfer completed on.
**
****************************************************************************************/
static void TbxMbRtuTransmitComplete(tTbxMbUartPort port)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  /* Verify parameters. */
  TBX_ASSERT(port < TBX_MB_UART_NUM_PORT);
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b07      	cmp	r3, #7
 80043e2:	d904      	bls.n	80043ee <TbxMbRtuTransmitComplete+0x1a>
 80043e4:	f240 315e 	movw	r1, #862	@ 0x35e
 80043e8:	4820      	ldr	r0, [pc, #128]	@ (800446c <TbxMbRtuTransmitComplete+0x98>)
 80043ea:	f7fe fcb7 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (port < TBX_MB_UART_NUM_PORT)
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	2b07      	cmp	r3, #7
 80043f2:	d837      	bhi.n	8004464 <TbxMbRtuTransmitComplete+0x90>
  {
    /* Obtain transport layer context linked to UART port of this event. */
    tTbxMbTpCtx volatile * tpCtx = tbxMbRtuCtx[port];
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004470 <TbxMbRtuTransmitComplete+0x9c>)
 80043f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043fc:	617b      	str	r3, [r7, #20]
    /* Verify transport layer context. */
    TBX_ASSERT(tpCtx != NULL)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <TbxMbRtuTransmitComplete+0x3a>
 8004404:	f240 3166 	movw	r1, #870	@ 0x366
 8004408:	4818      	ldr	r0, [pc, #96]	@ (800446c <TbxMbRtuTransmitComplete+0x98>)
 800440a:	f7fe fca7 	bl	8002d5c <TbxAssertTrigger>
    /* Only continue with a valid transport layer context. Note that there is no need
     * to also check the transport layer type, because only RTU types are stored in the
     * tbxMbRtuCtx[] array.
     */
    if (tpCtx != NULL)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d027      	beq.n	8004464 <TbxMbRtuTransmitComplete+0x90>
    {
      TbxCriticalSectionEnter();
 8004414:	f7fe fcb8 	bl	8002d88 <TbxCriticalSectionEnter>
      uint8_t stateCopy = tpCtx->state;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 800441e:	74fb      	strb	r3, [r7, #19]
      TbxCriticalSectionExit();
 8004420:	f7fe fccc 	bl	8002dbc <TbxCriticalSectionExit>
      /* This function should only be called when in the TRANSMISSION state. Verify
       * this. 
       */
      TBX_ASSERT(stateCopy == TBX_MB_RTU_STATE_TRANSMISSION);
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d004      	beq.n	8004434 <TbxMbRtuTransmitComplete+0x60>
 800442a:	f240 3173 	movw	r1, #883	@ 0x373
 800442e:	480f      	ldr	r0, [pc, #60]	@ (800446c <TbxMbRtuTransmitComplete+0x98>)
 8004430:	f7fe fc94 	bl	8002d5c <TbxAssertTrigger>
      /* Only continue in the TRANSMISSION state. */
      if (stateCopy == TBX_MB_RTU_STATE_TRANSMISSION)
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d114      	bne.n	8004464 <TbxMbRtuTransmitComplete+0x90>
      {
        /* Store the time that the transmission completed. */
        TbxCriticalSectionEnter();
 800443a:	f7fe fca5 	bl	8002d88 <TbxCriticalSectionEnter>
        tpCtx->txDoneTime = TbxMbPortTimerCount();
 800443e:	f7ff fb9f 	bl	8003b80 <TbxMbPortTimerCount>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
        TbxCriticalSectionExit();
 800444c:	f7fe fcb6 	bl	8002dbc <TbxCriticalSectionExit>
        /* Instruct the event task to start calling our polling function. Needed to
         * detect the 3.5 character timeout, after which we can transition back to the
         * IDLE state.
         */
        tTbxMbEvent newEvent;
        newEvent.context = (void *)tpCtx;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	60fb      	str	r3, [r7, #12]
        newEvent.id = TBX_MB_EVENT_ID_START_POLLING;
 8004454:	2300      	movs	r3, #0
 8004456:	723b      	strb	r3, [r7, #8]
        TbxMbOsalEventPost(&newEvent, TBX_TRUE);
 8004458:	f107 0308 	add.w	r3, r7, #8
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f001 fa18 	bl	8005894 <TbxMbOsalEventPost>
      }
    }
  }
} /*** end of TbxMbRtuTransmitComplete ***/
 8004464:	bf00      	nop
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	08005d90 	.word	0x08005d90
 8004470:	20000924 	.word	0x20000924

08004474 <TbxMbRtuDataReceived>:
**
****************************************************************************************/
static void TbxMbRtuDataReceived(tTbxMbUartPort         port, 
                                 uint8_t        const * data, 
                                 uint8_t                len)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	@ 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	71fb      	strb	r3, [r7, #7]
 8004480:	4613      	mov	r3, r2
 8004482:	71bb      	strb	r3, [r7, #6]
  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	2b07      	cmp	r3, #7
 8004488:	d805      	bhi.n	8004496 <TbxMbRtuDataReceived+0x22>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <TbxMbRtuDataReceived+0x22>
 8004490:	79bb      	ldrb	r3, [r7, #6]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <TbxMbRtuDataReceived+0x2c>
 8004496:	f240 319d 	movw	r1, #925	@ 0x39d
 800449a:	485a      	ldr	r0, [pc, #360]	@ (8004604 <TbxMbRtuDataReceived+0x190>)
 800449c:	f7fe fc5e 	bl	8002d5c <TbxAssertTrigger>
             (data != NULL) &&
             (len > 0U));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	2b07      	cmp	r3, #7
 80044a4:	f200 80a9 	bhi.w	80045fa <TbxMbRtuDataReceived+0x186>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a5 	beq.w	80045fa <TbxMbRtuDataReceived+0x186>
      (data != NULL) &&
 80044b0:	79bb      	ldrb	r3, [r7, #6]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80a1 	beq.w	80045fa <TbxMbRtuDataReceived+0x186>
      (len > 0U))
  {
    /* Obtain transport layer context linked to UART port of this event. */
    tTbxMbTpCtx volatile * tpCtx = tbxMbRtuCtx[port];
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	4a53      	ldr	r2, [pc, #332]	@ (8004608 <TbxMbRtuDataReceived+0x194>)
 80044bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c0:	623b      	str	r3, [r7, #32]
    /* Verify transport layer context. */
    TBX_ASSERT(tpCtx != NULL)
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <TbxMbRtuDataReceived+0x5e>
 80044c8:	f240 31a9 	movw	r1, #937	@ 0x3a9
 80044cc:	484d      	ldr	r0, [pc, #308]	@ (8004604 <TbxMbRtuDataReceived+0x190>)
 80044ce:	f7fe fc45 	bl	8002d5c <TbxAssertTrigger>
    /* Only continue with a valid transport layer context. Note that there is no need
     * to also check the transport layer type, because only RTU types are stored in the
     * tbxMbRtuCtx[] array.
     */
    if (tpCtx != NULL)
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8090 	beq.w	80045fa <TbxMbRtuDataReceived+0x186>
    {
      /* Get current time in RTU timer ticks. */
      uint16_t currentTime = TbxMbPortTimerCount();
 80044da:	f7ff fb51 	bl	8003b80 <TbxMbPortTimerCount>
 80044de:	4603      	mov	r3, r0
 80044e0:	83fb      	strh	r3, [r7, #30]
      TbxCriticalSectionEnter();
 80044e2:	f7fe fc51 	bl	8002d88 <TbxCriticalSectionEnter>
       * which is needed later on to do the 1.5 character timeout detection.
       */
      #if (TBX_MB_RTU_T1_5_TIMEOUT_ENABLE > 0U)        
      uint16_t oldRxTime = tpCtx->rxTime;
      #endif
      tpCtx->rxTime = currentTime;
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	8bfa      	ldrh	r2, [r7, #30]
 80044ea:	f8a3 2222 	strh.w	r2, [r3, #546]	@ 0x222
      /* The ADU for an RTU packet starts at one byte before the PDU, which is the last
       * byte of head[]. Get the pointer of where the ADU starts in the rxPacket.
       */
      uint8_t volatile * aduPtr = &tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80044f4:	61bb      	str	r3, [r7, #24]
      /* Get copy of the state so the we can exit the critical section. */
      uint8_t stateCopy = tpCtx->state;
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 80044fc:	75fb      	strb	r3, [r7, #23]
      TbxCriticalSectionExit();
 80044fe:	f7fe fc5d 	bl	8002dbc <TbxCriticalSectionExit>
      /* Are we in the RECEPTION state? Make sure to check this one first, as it will 
       * happen the most.
       */
      if (stateCopy == TBX_MB_RTU_STATE_RECEPTION)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d142      	bne.n	800458e <TbxMbRtuDataReceived+0x11a>
      {
        TbxCriticalSectionEnter();
 8004508:	f7fe fc3e 	bl	8002d88 <TbxCriticalSectionEnter>
         * - Node address (1 byte)
         * - Function code (1 byte)
         * - Packet data (max 252 bytes)
         * - CRC16 (2 bytes)
         */
        if ((tpCtx->rxAduWrIdx + len) > 256U)
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	f8b3 3224 	ldrh.w	r3, [r3, #548]	@ 0x224
 8004512:	b29b      	uxth	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	79bb      	ldrb	r3, [r7, #6]
 8004518:	4413      	add	r3, r2
 800451a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800451e:	d903      	bls.n	8004528 <TbxMbRtuDataReceived+0xb4>
        {
          /* Flag frame as not okay (NOK). */
          tpCtx->rxAduOkay = TBX_FALSE;
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
        /* Only process the newly received data if the ADU reception frame is still
         * flagged as OK. If not, then eventually a 3.5 character idle time will be
         * detected to mark the end of the packet/frame. At which point its data will be
         * discarded.
         */
        if (tpCtx->rxAduOkay == TBX_TRUE)
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f893 3226 	ldrb.w	r3, [r3, #550]	@ 0x226
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d129      	bne.n	8004588 <TbxMbRtuDataReceived+0x114>
        {
          /* Append the received data to the ADU. */
          for (uint8_t idx = 0U; idx < len; idx++)
 8004534:	2300      	movs	r3, #0
 8004536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800453a:	e015      	b.n	8004568 <TbxMbRtuDataReceived+0xf4>
          {
            aduPtr[tpCtx->rxAduWrIdx + idx] = data[idx];
 800453c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	441a      	add	r2, r3
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f8b3 3224 	ldrh.w	r3, [r3, #548]	@ 0x224
 800454a:	b29b      	uxth	r3, r3
 800454c:	4619      	mov	r1, r3
 800454e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004552:	440b      	add	r3, r1
 8004554:	4619      	mov	r1, r3
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	440b      	add	r3, r1
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	701a      	strb	r2, [r3, #0]
          for (uint8_t idx = 0U; idx < len; idx++)
 800455e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004562:	3301      	adds	r3, #1
 8004564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004568:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800456c:	79bb      	ldrb	r3, [r7, #6]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3e4      	bcc.n	800453c <TbxMbRtuDataReceived+0xc8>
          }
          /* Update the write indexer into the ADU reception packet. */
          tpCtx->rxAduWrIdx += len;
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f8b3 3224 	ldrh.w	r3, [r3, #548]	@ 0x224
 8004578:	b29a      	uxth	r2, r3
 800457a:	79bb      	ldrb	r3, [r7, #6]
 800457c:	b29b      	uxth	r3, r3
 800457e:	4413      	add	r3, r2
 8004580:	b29a      	uxth	r2, r3
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
        }
        TbxCriticalSectionExit();
 8004588:	f7fe fc18 	bl	8002dbc <TbxCriticalSectionExit>
      {
        /* Nothing left to do, but MISRA requires this terminating else statement. */
      }
    }
  }
} /*** end of TbxMbRtuDataReceived ***/
 800458c:	e035      	b.n	80045fa <TbxMbRtuDataReceived+0x186>
      else if (stateCopy == TBX_MB_RTU_STATE_IDLE)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d132      	bne.n	80045fa <TbxMbRtuDataReceived+0x186>
        TbxCriticalSectionEnter();
 8004594:	f7fe fbf8 	bl	8002d88 <TbxCriticalSectionEnter>
        tpCtx->state = TBX_MB_RTU_STATE_RECEPTION;
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2203      	movs	r2, #3
 800459c:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c
        for (uint8_t idx = 0U; idx < len; idx++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80045a6:	e00e      	b.n	80045c6 <TbxMbRtuDataReceived+0x152>
          aduPtr[idx] = data[idx];
 80045a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	441a      	add	r2, r3
 80045b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	440b      	add	r3, r1
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
        for (uint8_t idx = 0U; idx < len; idx++)
 80045bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045c0:	3301      	adds	r3, #1
 80045c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80045c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80045ca:	79bb      	ldrb	r3, [r7, #6]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d3eb      	bcc.n	80045a8 <TbxMbRtuDataReceived+0x134>
        tpCtx->rxAduWrIdx = len;
 80045d0:	79bb      	ldrb	r3, [r7, #6]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
        tpCtx->rxAduOkay = TBX_TRUE;
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
        TbxCriticalSectionExit();
 80045e2:	f7fe fbeb 	bl	8002dbc <TbxCriticalSectionExit>
        newEvent.context = (void *)tpCtx;
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	613b      	str	r3, [r7, #16]
        newEvent.id = TBX_MB_EVENT_ID_START_POLLING;
 80045ea:	2300      	movs	r3, #0
 80045ec:	733b      	strb	r3, [r7, #12]
        TbxMbOsalEventPost(&newEvent, TBX_TRUE);
 80045ee:	f107 030c 	add.w	r3, r7, #12
 80045f2:	2101      	movs	r1, #1
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f94d 	bl	8005894 <TbxMbOsalEventPost>
} /*** end of TbxMbRtuDataReceived ***/
 80045fa:	bf00      	nop
 80045fc:	3728      	adds	r7, #40	@ 0x28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	08005d90 	.word	0x08005d90
 8004608:	20000924 	.word	0x20000924

0800460c <TbxMbRtuCalculatCrc>:
** \return    The calculated CRC16 checksum value.
**
****************************************************************************************/
static uint16_t TbxMbRtuCalculatCrc(uint8_t  const * data, 
                                    uint16_t         len)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
    0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
    0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
  };
  uint16_t result = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	817b      	strh	r3, [r7, #10]
  uint16_t crc = 0xFFFFU;
 800461c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004620:	81fb      	strh	r3, [r7, #14]

  /* Loop over all the data bytes. */
  for (uint16_t byteIdx = 0; byteIdx < len; byteIdx++)
 8004622:	2300      	movs	r3, #0
 8004624:	81bb      	strh	r3, [r7, #12]
 8004626:	e014      	b.n	8004652 <TbxMbRtuCalculatCrc+0x46>
  {
    /* Calculate the index into the CRC lookup table. */
    uint8_t tableIdx = data[byteIdx] ^ crc;
 8004628:	89bb      	ldrh	r3, [r7, #12]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	781a      	ldrb	r2, [r3, #0]
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4053      	eors	r3, r2
 8004636:	727b      	strb	r3, [r7, #9]
    crc >>= 8;
 8004638:	89fb      	ldrh	r3, [r7, #14]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	81fb      	strh	r3, [r7, #14]
    crc ^= tbxMbRtuCrcTable[tableIdx];
 800463e:	7a7b      	ldrb	r3, [r7, #9]
 8004640:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <TbxMbRtuCalculatCrc+0x60>)
 8004642:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004646:	89fb      	ldrh	r3, [r7, #14]
 8004648:	4053      	eors	r3, r2
 800464a:	81fb      	strh	r3, [r7, #14]
  for (uint16_t byteIdx = 0; byteIdx < len; byteIdx++)
 800464c:	89bb      	ldrh	r3, [r7, #12]
 800464e:	3301      	adds	r3, #1
 8004650:	81bb      	strh	r3, [r7, #12]
 8004652:	89ba      	ldrh	r2, [r7, #12]
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	429a      	cmp	r2, r3
 8004658:	d3e6      	bcc.n	8004628 <TbxMbRtuCalculatCrc+0x1c>
  }
  /* Update the result. */
  result = crc;
 800465a:	89fb      	ldrh	r3, [r7, #14]
 800465c:	817b      	strh	r3, [r7, #10]
  /* Give the result back to the caller. */
  return result;
 800465e:	897b      	ldrh	r3, [r7, #10]
} /*** end of TbxMbRtuCalculatCrc ***/
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	08005e60 	.word	0x08005e60

08004670 <TbxMbCommonExtractUInt16BE>:
**            in the big endian format.
** \return    The 16-bit unsigned integer value.
**
****************************************************************************************/
static inline uint16_t TbxMbCommonExtractUInt16BE(uint8_t const * data)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  return ((uint16_t)data[0] << 8U) | data[1];
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	b21a      	sxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3301      	adds	r3, #1
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b21b      	sxth	r3, r3
 8004688:	4313      	orrs	r3, r2
 800468a:	b21b      	sxth	r3, r3
 800468c:	b29b      	uxth	r3, r3
} /*** end of TbxMbCommonExtractUInt16BE ***/
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <TbxMbCommonStoreUInt16BE>:
**            format.
**
****************************************************************************************/
static inline void TbxMbCommonStoreUInt16BE(uint16_t   value,
                                            uint8_t  * data)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	4603      	mov	r3, r0
 80046a2:	6039      	str	r1, [r7, #0]
 80046a4:	80fb      	strh	r3, [r7, #6]
  data[0] = (uint8_t)(value >> 8U);
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t)value;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
} /*** end of TbxMbCommonExtractUInt16BE ***/
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <TbxMbServerCreate>:
** \return    Handle to the newly created Modbus server channel object if successful,
**            NULL otherwise.
**
****************************************************************************************/
tTbxMbServer TbxMbServerCreate(tTbxMbTp transport)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  tTbxMbServer result = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d103      	bne.n	80046e2 <TbxMbServerCreate+0x1a>
 80046da:	2169      	movs	r1, #105	@ 0x69
 80046dc:	4839      	ldr	r0, [pc, #228]	@ (80047c4 <TbxMbServerCreate+0xfc>)
 80046de:	f7fe fb3d 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d067      	beq.n	80047b8 <TbxMbServerCreate+0xf0>
  {
    /* Allocate memory for the new channel context. */
    tTbxMbServerCtx * newServerCtx = TbxMemPoolAllocate(sizeof(tTbxMbServerCtx));
 80046e8:	2030      	movs	r0, #48	@ 0x30
 80046ea:	f7fe feab 	bl	8003444 <TbxMemPoolAllocate>
 80046ee:	6138      	str	r0, [r7, #16]
    /* Automatically increase the memory pool, if it was too small. */
    if (newServerCtx == NULL)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d107      	bne.n	8004706 <TbxMbServerCreate+0x3e>
    {
      /* No need to check the return value, because if it failed, the following
       * allocation fails too, which is verified later on.
       */
      (void)TbxMemPoolCreate(1U, sizeof(tTbxMbServerCtx));
 80046f6:	2130      	movs	r1, #48	@ 0x30
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7fe fe01 	bl	8003300 <TbxMemPoolCreate>
      newServerCtx = TbxMemPoolAllocate(sizeof(tTbxMbServerCtx));      
 80046fe:	2030      	movs	r0, #48	@ 0x30
 8004700:	f7fe fea0 	bl	8003444 <TbxMemPoolAllocate>
 8004704:	6138      	str	r0, [r7, #16]
    }
    /* Verify memory allocation of the channel context. */
    TBX_ASSERT(newServerCtx != NULL);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <TbxMbServerCreate+0x4c>
 800470c:	217a      	movs	r1, #122	@ 0x7a
 800470e:	482d      	ldr	r0, [pc, #180]	@ (80047c4 <TbxMbServerCreate+0xfc>)
 8004710:	f7fe fb24 	bl	8002d5c <TbxAssertTrigger>
    /* Only continue if the memory allocation succeeded. */
    if (newServerCtx != NULL)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d04e      	beq.n	80047b8 <TbxMbServerCreate+0xf0>
    {
      /* Convert the TP channel pointer to the context structure. */
      tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60fb      	str	r3, [r7, #12]
      /* Sanity check on the transport layer's interface function. That way there is 
       * no need to do it later on, making it more run-time efficient. Also check that
       * it's not already linked to another channel.
       */
      TBX_ASSERT((tpCtx->transmitFcn != NULL) && (tpCtx->receptionDoneFcn != NULL) &&
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 8004724:	2b00      	cmp	r3, #0
 8004726:	d013      	beq.n	8004750 <TbxMbServerCreate+0x88>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00e      	beq.n	8004750 <TbxMbServerCreate+0x88>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <TbxMbServerCreate+0x88>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
 8004742:	2b00      	cmp	r3, #0
 8004744:	d004      	beq.n	8004750 <TbxMbServerCreate+0x88>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <TbxMbServerCreate+0x90>
 8004750:	2184      	movs	r1, #132	@ 0x84
 8004752:	481c      	ldr	r0, [pc, #112]	@ (80047c4 <TbxMbServerCreate+0xfc>)
 8004754:	f7fe fb02 	bl	8002d5c <TbxAssertTrigger>
                 (tpCtx->getRxPacketFcn != NULL) && (tpCtx->getTxPacketFcn != NULL) &&
                 (tpCtx->channelCtx == NULL));              
      /* Initialize the channel context. Start by crosslinking the transport layer. */
      newServerCtx->type = TBX_MB_SERVER_CONTEXT_TYPE;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2225      	movs	r2, #37	@ 0x25
 800475c:	731a      	strb	r2, [r3, #12]
      newServerCtx->instancePtr = NULL;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
      newServerCtx->pollFcn = NULL;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2200      	movs	r2, #0
 8004768:	605a      	str	r2, [r3, #4]
      newServerCtx->processFcn = TbxMbServerProcessEvent;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <TbxMbServerCreate+0x100>)
 800476e:	609a      	str	r2, [r3, #8]
      newServerCtx->readInputFcn = NULL;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2200      	movs	r2, #0
 8004774:	615a      	str	r2, [r3, #20]
      newServerCtx->readCoilFcn = NULL;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2200      	movs	r2, #0
 800477a:	619a      	str	r2, [r3, #24]
      newServerCtx->writeCoilFcn = NULL;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2200      	movs	r2, #0
 8004780:	61da      	str	r2, [r3, #28]
      newServerCtx->readInputRegFcn = NULL;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2200      	movs	r2, #0
 8004786:	621a      	str	r2, [r3, #32]
      newServerCtx->readHoldingRegFcn = NULL;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2200      	movs	r2, #0
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24
      newServerCtx->writeHoldingRegFcn = NULL;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2200      	movs	r2, #0
 8004792:	629a      	str	r2, [r3, #40]	@ 0x28
      newServerCtx->customFunctionFcn = NULL;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2200      	movs	r2, #0
 8004798:	62da      	str	r2, [r3, #44]	@ 0x2c
      newServerCtx->tpCtx = tpCtx;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	611a      	str	r2, [r3, #16]
      newServerCtx->tpCtx->channelCtx = newServerCtx;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
      newServerCtx->tpCtx->isClient = TBX_FALSE;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 222d 	strb.w	r2, [r3, #557]	@ 0x22d
      /* Update the result. */
      result = newServerCtx;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 80047b8:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbServerCreate ****/
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	08005dc4 	.word	0x08005dc4
 80047c8:	080047cd 	.word	0x080047cd

080047cc <TbxMbServerProcessEvent>:
** \param     event Pointer to the event to process. Note that the event->context points
**            to the handle of the Modbus server channel object.
**
****************************************************************************************/
static void TbxMbServerProcessEvent(tTbxMbEvent * event)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b08b      	sub	sp, #44	@ 0x2c
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d104      	bne.n	80047e4 <TbxMbServerProcessEvent+0x18>
 80047da:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80047de:	488d      	ldr	r0, [pc, #564]	@ (8004a14 <TbxMbServerProcessEvent+0x248>)
 80047e0:	f7fe fabc 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 810f 	beq.w	8004a0a <TbxMbServerProcessEvent+0x23e>
  {
    /* Sanity check the context. */
    TBX_ASSERT(event->context != NULL);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d104      	bne.n	80047fe <TbxMbServerProcessEvent+0x32>
 80047f4:	f44f 71cb 	mov.w	r1, #406	@ 0x196
 80047f8:	4886      	ldr	r0, [pc, #536]	@ (8004a14 <TbxMbServerProcessEvent+0x248>)
 80047fa:	f7fe faaf 	bl	8002d5c <TbxAssertTrigger>
    /* Convert the event context to the server channel context structure. */
    tTbxMbServerCtx * serverCtx = (tTbxMbServerCtx *)event->context;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	623b      	str	r3, [r7, #32]
    /* Make sure the context is valid. */
    TBX_ASSERT(serverCtx != NULL);
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <TbxMbServerProcessEvent+0x48>
 800480a:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800480e:	4881      	ldr	r0, [pc, #516]	@ (8004a14 <TbxMbServerProcessEvent+0x248>)
 8004810:	f7fe faa4 	bl	8002d5c <TbxAssertTrigger>
    /* Only continue with a valid context. */
    if (serverCtx != NULL)
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80f7 	beq.w	8004a0a <TbxMbServerProcessEvent+0x23e>
    {
      /* Sanity check on the context type. */
      TBX_ASSERT(serverCtx->type == TBX_MB_SERVER_CONTEXT_TYPE);
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	7b1b      	ldrb	r3, [r3, #12]
 8004820:	2b25      	cmp	r3, #37	@ 0x25
 8004822:	d004      	beq.n	800482e <TbxMbServerProcessEvent+0x62>
 8004824:	f240 119f 	movw	r1, #415	@ 0x19f
 8004828:	487a      	ldr	r0, [pc, #488]	@ (8004a14 <TbxMbServerProcessEvent+0x248>)
 800482a:	f7fe fa97 	bl	8002d5c <TbxAssertTrigger>
      /* Filter on the event identifier. */
      switch (event->id)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d003      	beq.n	800483e <TbxMbServerProcessEvent+0x72>
 8004836:	2b03      	cmp	r3, #3
 8004838:	f000 80e4 	beq.w	8004a04 <TbxMbServerProcessEvent+0x238>
 800483c:	e0dc      	b.n	80049f8 <TbxMbServerProcessEvent+0x22c>
      {
        case TBX_MB_EVENT_ID_PDU_RECEIVED:
        {
          uint8_t okayToSendResponse = TBX_FALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          /* Obtain read access to the newly received packet and write access to the
           * response packet. 
           */
          tTbxMbTpPacket * rxPacket = serverCtx->tpCtx->getRxPacketFcn(serverCtx->tpCtx);
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	6912      	ldr	r2, [r2, #16]
 8004850:	4610      	mov	r0, r2
 8004852:	4798      	blx	r3
 8004854:	61f8      	str	r0, [r7, #28]
          tTbxMbTpPacket * txPacket = serverCtx->tpCtx->getTxPacketFcn(serverCtx->tpCtx);
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
 800485e:	6a3a      	ldr	r2, [r7, #32]
 8004860:	6912      	ldr	r2, [r2, #16]
 8004862:	4610      	mov	r0, r2
 8004864:	4798      	blx	r3
 8004866:	61b8      	str	r0, [r7, #24]
          /* Since we're requested to process a newly received PDU, these packet accesses
           * should always succeed. Sanity check anyways, just in case.
           */
          TBX_ASSERT((rxPacket != NULL) && (txPacket != NULL));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <TbxMbServerProcessEvent+0xa8>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <TbxMbServerProcessEvent+0xb2>
 8004874:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004878:	4866      	ldr	r0, [pc, #408]	@ (8004a14 <TbxMbServerProcessEvent+0x248>)
 800487a:	f7fe fa6f 	bl	8002d5c <TbxAssertTrigger>
          /* Only continue with packet access. */
          if ((rxPacket != NULL) && (txPacket != NULL))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a4 	beq.w	80049ce <TbxMbServerProcessEvent+0x202>
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80a0 	beq.w	80049ce <TbxMbServerProcessEvent+0x202>
          {
            /* Update flag that we can actually send a response, now that we know we 
             * have access to txPacket.
             */
            okayToSendResponse = TBX_TRUE;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* Prepare the response packet function code. */
            txPacket->pdu.code = rxPacket->pdu.code;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	79da      	ldrb	r2, [r3, #7]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	71da      	strb	r2, [r3, #7]
            /* Filter on the function code. */
            switch (rxPacket->pdu.code)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	79db      	ldrb	r3, [r3, #7]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d858      	bhi.n	8004958 <TbxMbServerProcessEvent+0x18c>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <TbxMbServerProcessEvent+0xe0>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048ed 	.word	0x080048ed
 80048b0:	080048f9 	.word	0x080048f9
 80048b4:	08004905 	.word	0x08004905
 80048b8:	08004911 	.word	0x08004911
 80048bc:	0800491d 	.word	0x0800491d
 80048c0:	08004929 	.word	0x08004929
 80048c4:	08004959 	.word	0x08004959
 80048c8:	08004935 	.word	0x08004935
 80048cc:	08004959 	.word	0x08004959
 80048d0:	08004959 	.word	0x08004959
 80048d4:	08004959 	.word	0x08004959
 80048d8:	08004959 	.word	0x08004959
 80048dc:	08004959 	.word	0x08004959
 80048e0:	08004959 	.word	0x08004959
 80048e4:	08004941 	.word	0x08004941
 80048e8:	0800494d 	.word	0x0800494d
            {
              /* ---------------- FC01 - Read Coils ---------------------------------- */
              case TBX_MB_FC01_READ_COILS:
              {
                TbxMbServerFC01ReadCoils(serverCtx, rxPacket, txPacket);
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	69f9      	ldr	r1, [r7, #28]
 80048f0:	6a38      	ldr	r0, [r7, #32]
 80048f2:	f000 f891 	bl	8004a18 <TbxMbServerFC01ReadCoils>
              }
              break;
 80048f6:	e06a      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC02 - Read Discrete Inputs ------------------------ */
              case TBX_MB_FC02_READ_DISCRETE_INPUTS:
              {
                TbxMbServerFC02ReadInputs(serverCtx, rxPacket, txPacket);
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	69f9      	ldr	r1, [r7, #28]
 80048fc:	6a38      	ldr	r0, [r7, #32]
 80048fe:	f000 f96d 	bl	8004bdc <TbxMbServerFC02ReadInputs>
              }
              break;
 8004902:	e064      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC03 - Read Holding Registers ---------------------- */
              case TBX_MB_FC03_READ_HOLDING_REGISTERS:
              {
                TbxMbServerFC03ReadHoldingRegs(serverCtx, rxPacket, txPacket);
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	6a38      	ldr	r0, [r7, #32]
 800490a:	f000 fa49 	bl	8004da0 <TbxMbServerFC03ReadHoldingRegs>
              }
              break;
 800490e:	e05e      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC04 - Read Input Registers ------------------------ */
              case TBX_MB_FC04_READ_INPUT_REGISTERS:
              {
                TbxMbServerFC04ReadInputRegs(serverCtx, rxPacket, txPacket);
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	69f9      	ldr	r1, [r7, #28]
 8004914:	6a38      	ldr	r0, [r7, #32]
 8004916:	f000 faeb 	bl	8004ef0 <TbxMbServerFC04ReadInputRegs>
              }
              break;
 800491a:	e058      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC05 - Write Single Coil --------------------------- */
              case TBX_MB_FC05_WRITE_SINGLE_COIL:
              {
                TbxMbServerFC05WriteSingleCoil(serverCtx, rxPacket, txPacket);
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	69f9      	ldr	r1, [r7, #28]
 8004920:	6a38      	ldr	r0, [r7, #32]
 8004922:	f000 fb8d 	bl	8005040 <TbxMbServerFC05WriteSingleCoil>
              }
              break;
 8004926:	e052      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC06 - Write Single Register ----------------------- */
              case TBX_MB_FC06_WRITE_SINGLE_REGISTER:
              {
                TbxMbServerFC06WriteSingleReg(serverCtx, rxPacket, txPacket);
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	69f9      	ldr	r1, [r7, #28]
 800492c:	6a38      	ldr	r0, [r7, #32]
 800492e:	f000 fc1d 	bl	800516c <TbxMbServerFC06WriteSingleReg>
              }
              break;
 8004932:	e04c      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC08 - Diagnostics --------------------------------- */
              case TBX_MB_FC08_DIAGNOSTICS:
              {
                TbxMbServerFC08Diagnostics(serverCtx, rxPacket, txPacket);
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	69f9      	ldr	r1, [r7, #28]
 8004938:	6a38      	ldr	r0, [r7, #32]
 800493a:	f000 fc8f 	bl	800525c <TbxMbServerFC08Diagnostics>
              }
              break;
 800493e:	e046      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC15 - Write Multiple Coils ------------------------ */
              case TBX_MB_FC15_WRITE_MULTIPLE_COILS:
              {
                TbxMbServerFC15WriteMultipleCoils(serverCtx, rxPacket, txPacket);
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	69f9      	ldr	r1, [r7, #28]
 8004944:	6a38      	ldr	r0, [r7, #32]
 8004946:	f000 fde1 	bl	800550c <TbxMbServerFC15WriteMultipleCoils>
              }
              break;
 800494a:	e040      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC16 - Write Multiple Registers -------------------- */
              case TBX_MB_FC16_WRITE_MULTIPLE_REGISTERS:
              {
                TbxMbServerFC16WriteMultipleRegs(serverCtx, rxPacket, txPacket);
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	69f9      	ldr	r1, [r7, #28]
 8004950:	6a38      	ldr	r0, [r7, #32]
 8004952:	f000 fecd 	bl	80056f0 <TbxMbServerFC16WriteMultipleRegs>
              }
              break;
 8004956:	e03a      	b.n	80049ce <TbxMbServerProcessEvent+0x202>

              /* ---------------- Unsupported function code -------------------------- */
              default:
              {
                uint8_t handled = TBX_FALSE;
 8004958:	2300      	movs	r3, #0
 800495a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                /* Is a custom function code callback configured? */
                if (serverCtx->customFunctionFcn != NULL)
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <TbxMbServerProcessEvent+0x1dc>
                {
                  /* Prepare callback parameters. */
                  uint8_t const * rxPdu  = &rxPacket->pdu.code;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3307      	adds	r3, #7
 800496a:	617b      	str	r3, [r7, #20]
                  uint8_t       * txPdu  = &txPacket->pdu.code;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	3307      	adds	r3, #7
 8004970:	613b      	str	r3, [r7, #16]
                  uint8_t         pduLen = rxPacket->dataLen + 1U;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004978:	3301      	adds	r3, #1
 800497a:	b2db      	uxtb	r3, r3
 800497c:	73fb      	strb	r3, [r7, #15]
                  /* Call the custom function code callback. */
                  handled = serverCtx->customFunctionFcn(serverCtx, rxPdu, txPdu, 
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004982:	f107 030f 	add.w	r3, r7, #15
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	6a38      	ldr	r0, [r7, #32]
 800498c:	47a0      	blx	r4
 800498e:	4603      	mov	r3, r0
 8004990:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                                                         &pduLen);
                  /* Did the callback process the PDU and prepare a response? */
                  if (handled == TBX_TRUE)
 8004994:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004998:	2b01      	cmp	r3, #1
 800499a:	d105      	bne.n	80049a8 <TbxMbServerProcessEvent+0x1dc>
                  {
                    /* Set the response data length. */
                    txPacket->dataLen = pduLen - 1U;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	3b01      	subs	r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                  }
                }
                /* Did the custom function code callback not handle the PDU? */
                if (handled == TBX_FALSE)
 80049a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10d      	bne.n	80049cc <TbxMbServerProcessEvent+0x200>
                {
                  /* This function code is currently not supported. */
                  txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	79db      	ldrb	r3, [r3, #7]
 80049b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	71da      	strb	r2, [r3, #7]
                  txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2201      	movs	r2, #1
 80049c2:	721a      	strb	r2, [r3, #8]
                  txPacket->dataLen = 1U;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                }
              }
              break;
 80049cc:	bf00      	nop
            }
          }
          /* Inform the transport layer that were done with the rx packet and no longer
           * need access to it.
           */
          serverCtx->tpCtx->receptionDoneFcn(serverCtx->tpCtx);
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 80049d6:	6a3a      	ldr	r2, [r7, #32]
 80049d8:	6912      	ldr	r2, [r2, #16]
 80049da:	4610      	mov	r0, r2
 80049dc:	4798      	blx	r3
          /* Request the transport layer to transmit the response. Note that
           * transmitFcn() should only be called after calling receptionDoneFcn().
           */
          if (okayToSendResponse == TBX_TRUE)
 80049de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d110      	bne.n	8004a08 <TbxMbServerProcessEvent+0x23c>
          {
            (void)serverCtx->tpCtx->transmitFcn(serverCtx->tpCtx);
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	6912      	ldr	r2, [r2, #16]
 80049f2:	4610      	mov	r0, r2
 80049f4:	4798      	blx	r3
          }
        }
        break;
 80049f6:	e007      	b.n	8004a08 <TbxMbServerProcessEvent+0x23c>
        break;

        default:
        {
          /* An unsupported event was dispatched to us. Should not happen. */
          TBX_ASSERT(TBX_FALSE);
 80049f8:	f240 2135 	movw	r1, #565	@ 0x235
 80049fc:	4805      	ldr	r0, [pc, #20]	@ (8004a14 <TbxMbServerProcessEvent+0x248>)
 80049fe:	f7fe f9ad 	bl	8002d5c <TbxAssertTrigger>
        }
        break;
 8004a02:	e002      	b.n	8004a0a <TbxMbServerProcessEvent+0x23e>
        break;
 8004a04:	bf00      	nop
 8004a06:	e000      	b.n	8004a0a <TbxMbServerProcessEvent+0x23e>
        break;
 8004a08:	bf00      	nop
      }
    }
  }
} /*** end of TbxMbServerProcessEvent ***/
 8004a0a:	bf00      	nop
 8004a0c:	372c      	adds	r7, #44	@ 0x2c
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd90      	pop	{r4, r7, pc}
 8004a12:	bf00      	nop
 8004a14:	08005dc4 	.word	0x08005dc4

08004a18 <TbxMbServerFC01ReadCoils>:
**
****************************************************************************************/
static void TbxMbServerFC01ReadCoils(tTbxMbServerCtx       * context,
                                     tTbxMbTpPacket  const * rxPacket,
                                     tTbxMbTpPacket        * txPacket)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	@ 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <TbxMbServerFC01ReadCoils+0x1e>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <TbxMbServerFC01ReadCoils+0x1e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <TbxMbServerFC01ReadCoils+0x28>
 8004a36:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8004a3a:	4867      	ldr	r0, [pc, #412]	@ (8004bd8 <TbxMbServerFC01ReadCoils+0x1c0>)
 8004a3c:	f7fe f98e 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80c4 	beq.w	8004bd0 <TbxMbServerFC01ReadCoils+0x1b8>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80c0 	beq.w	8004bd0 <TbxMbServerFC01ReadCoils+0x1b8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80bc 	beq.w	8004bd0 <TbxMbServerFC01ReadCoils+0x1b8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fe07 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8004a62:	4603      	mov	r3, r0
 8004a64:	843b      	strh	r3, [r7, #32]
    uint16_t numCoils  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	330a      	adds	r3, #10
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fe00 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8004a70:	4603      	mov	r3, r0
 8004a72:	83fb      	strh	r3, [r7, #30]

    /* Check if a callback function was registered. */
    if (context->readCoilFcn == NULL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10e      	bne.n	8004a9a <TbxMbServerFC01ReadCoils+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	79db      	ldrb	r3, [r3, #7]
 8004a80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004a98:	e09a      	b.n	8004bd0 <TbxMbServerFC01ReadCoils+0x1b8>
    else if ((numCoils < 1U) || (numCoils > 2000U))
 8004a9a:	8bfb      	ldrh	r3, [r7, #30]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <TbxMbServerFC01ReadCoils+0x90>
 8004aa0:	8bfb      	ldrh	r3, [r7, #30]
 8004aa2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004aa6:	d90e      	bls.n	8004ac6 <TbxMbServerFC01ReadCoils+0xae>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	79db      	ldrb	r3, [r3, #7]
 8004aac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004ac4:	e084      	b.n	8004bd0 <TbxMbServerFC01ReadCoils+0x1b8>
      uint8_t numBytes = (uint8_t)(numCoils / 8U);
 8004ac6:	8bfb      	ldrh	r3, [r7, #30]
 8004ac8:	08db      	lsrs	r3, r3, #3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if ((numCoils % 8U) != 0U)
 8004ad0:	8bfb      	ldrh	r3, [r7, #30]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <TbxMbServerFC01ReadCoils+0xce>
        numBytes++;
 8004adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      txPacket->pdu.data[0] = numBytes;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004aec:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7a1b      	ldrb	r3, [r3, #8]
 8004af2:	3301      	adds	r3, #1
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      uint8_t   bitIdx  = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t   byteIdx = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint8_t * coilData = &txPacket->pdu.data[1];
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3309      	adds	r3, #9
 8004b0c:	61bb      	str	r3, [r7, #24]
      coilData[0] = 0U;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 8004b14:	2300      	movs	r3, #0
 8004b16:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004b18:	e056      	b.n	8004bc8 <TbxMbServerFC01ReadCoils+0x1b0>
        uint8_t            coilValue = TBX_OFF;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75bb      	strb	r3, [r7, #22]
        srvResult = context->readCoilFcn(context, startAddr + idx, &coilValue);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	8c39      	ldrh	r1, [r7, #32]
 8004b24:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004b26:	440a      	add	r2, r1
 8004b28:	b291      	uxth	r1, r2
 8004b2a:	f107 0216 	add.w	r2, r7, #22
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	4798      	blx	r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	75fb      	strb	r3, [r7, #23]
        if (srvResult == TBX_MB_SERVER_OK)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d12c      	bne.n	8004b96 <TbxMbServerFC01ReadCoils+0x17e>
          if (coilValue != TBX_OFF)
 8004b3c:	7dbb      	ldrb	r3, [r7, #22]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <TbxMbServerFC01ReadCoils+0x14e>
            coilData[byteIdx] |= (1U << bitIdx);
 8004b42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	7819      	ldrb	r1, [r3, #0]
 8004b4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b50:	2201      	movs	r2, #1
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b5c:	69b8      	ldr	r0, [r7, #24]
 8004b5e:	4403      	add	r3, r0
 8004b60:	430a      	orrs	r2, r1
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
          bitIdx++;
 8004b66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          if (bitIdx == 8U)
 8004b70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d124      	bne.n	8004bc2 <TbxMbServerFC01ReadCoils+0x1aa>
            bitIdx = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            byteIdx++;
 8004b7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b82:	3301      	adds	r3, #1
 8004b84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            coilData[byteIdx] = 0U;
 8004b88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4413      	add	r3, r2
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	e015      	b.n	8004bc2 <TbxMbServerFC01ReadCoils+0x1aa>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	79db      	ldrb	r3, [r3, #7]
 8004b9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d103      	bne.n	8004bb2 <TbxMbServerFC01ReadCoils+0x19a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	721a      	strb	r2, [r3, #8]
 8004bb0:	e002      	b.n	8004bb8 <TbxMbServerFC01ReadCoils+0x1a0>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004bc0:	e006      	b.n	8004bd0 <TbxMbServerFC01ReadCoils+0x1b8>
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 8004bc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004bc8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004bca:	8bfb      	ldrh	r3, [r7, #30]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d3a4      	bcc.n	8004b1a <TbxMbServerFC01ReadCoils+0x102>
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004bd0:	bf00      	nop
 8004bd2:	3728      	adds	r7, #40	@ 0x28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	08005dc4 	.word	0x08005dc4

08004bdc <TbxMbServerFC02ReadInputs>:
**
****************************************************************************************/
static void TbxMbServerFC02ReadInputs(tTbxMbServerCtx       * context,
                                      tTbxMbTpPacket  const * rxPacket,
                                      tTbxMbTpPacket        * txPacket)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	@ 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <TbxMbServerFC02ReadInputs+0x1e>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <TbxMbServerFC02ReadInputs+0x1e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <TbxMbServerFC02ReadInputs+0x28>
 8004bfa:	f240 21be 	movw	r1, #702	@ 0x2be
 8004bfe:	4867      	ldr	r0, [pc, #412]	@ (8004d9c <TbxMbServerFC02ReadInputs+0x1c0>)
 8004c00:	f7fe f8ac 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80c4 	beq.w	8004d94 <TbxMbServerFC02ReadInputs+0x1b8>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80c0 	beq.w	8004d94 <TbxMbServerFC02ReadInputs+0x1b8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80bc 	beq.w	8004d94 <TbxMbServerFC02ReadInputs+0x1b8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fd25 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8004c26:	4603      	mov	r3, r0
 8004c28:	843b      	strh	r3, [r7, #32]
    uint16_t numInputs = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	330a      	adds	r3, #10
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd1e 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8004c34:	4603      	mov	r3, r0
 8004c36:	83fb      	strh	r3, [r7, #30]

    /* Check if a callback function was registered. */
    if (context->readInputFcn == NULL)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10e      	bne.n	8004c5e <TbxMbServerFC02ReadInputs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	79db      	ldrb	r3, [r3, #7]
 8004c44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004c5c:	e09a      	b.n	8004d94 <TbxMbServerFC02ReadInputs+0x1b8>
    else if ((numInputs < 1U) || (numInputs > 2000U))
 8004c5e:	8bfb      	ldrh	r3, [r7, #30]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <TbxMbServerFC02ReadInputs+0x90>
 8004c64:	8bfb      	ldrh	r3, [r7, #30]
 8004c66:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004c6a:	d90e      	bls.n	8004c8a <TbxMbServerFC02ReadInputs+0xae>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	79db      	ldrb	r3, [r3, #7]
 8004c70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004c88:	e084      	b.n	8004d94 <TbxMbServerFC02ReadInputs+0x1b8>
      uint8_t numBytes = (uint8_t)(numInputs / 8U);
 8004c8a:	8bfb      	ldrh	r3, [r7, #30]
 8004c8c:	08db      	lsrs	r3, r3, #3
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if ((numInputs % 8U) != 0U)
 8004c94:	8bfb      	ldrh	r3, [r7, #30]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <TbxMbServerFC02ReadInputs+0xce>
        numBytes++;
 8004ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      txPacket->pdu.data[0] = numBytes;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004cb0:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	7a1b      	ldrb	r3, [r3, #8]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      uint8_t   bitIdx  = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t   byteIdx = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint8_t * inputData = &txPacket->pdu.data[1];
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3309      	adds	r3, #9
 8004cd0:	61bb      	str	r3, [r7, #24]
      inputData[0] = 0U;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
      for (uint16_t idx = 0U; idx < numInputs; idx++)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004cdc:	e056      	b.n	8004d8c <TbxMbServerFC02ReadInputs+0x1b0>
        uint8_t            inputValue = TBX_OFF;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75bb      	strb	r3, [r7, #22]
        srvResult = context->readInputFcn(context, startAddr + idx, &inputValue);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	8c39      	ldrh	r1, [r7, #32]
 8004ce8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004cea:	440a      	add	r2, r1
 8004cec:	b291      	uxth	r1, r2
 8004cee:	f107 0216 	add.w	r2, r7, #22
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	4798      	blx	r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	75fb      	strb	r3, [r7, #23]
        if (srvResult == TBX_MB_SERVER_OK)
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d12c      	bne.n	8004d5a <TbxMbServerFC02ReadInputs+0x17e>
          if (inputValue != TBX_OFF)
 8004d00:	7dbb      	ldrb	r3, [r7, #22]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d011      	beq.n	8004d2a <TbxMbServerFC02ReadInputs+0x14e>
            inputData[byteIdx] |= (1U << bitIdx);
 8004d06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	7819      	ldrb	r1, [r3, #0]
 8004d10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d14:	2201      	movs	r2, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d20:	69b8      	ldr	r0, [r7, #24]
 8004d22:	4403      	add	r3, r0
 8004d24:	430a      	orrs	r2, r1
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
          bitIdx++;
 8004d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d2e:	3301      	adds	r3, #1
 8004d30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          if (bitIdx == 8U)
 8004d34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d124      	bne.n	8004d86 <TbxMbServerFC02ReadInputs+0x1aa>
            bitIdx = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            byteIdx++;
 8004d42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d46:	3301      	adds	r3, #1
 8004d48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            inputData[byteIdx] = 0U;
 8004d4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4413      	add	r3, r2
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e015      	b.n	8004d86 <TbxMbServerFC02ReadInputs+0x1aa>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	79db      	ldrb	r3, [r3, #7]
 8004d5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d103      	bne.n	8004d76 <TbxMbServerFC02ReadInputs+0x19a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	721a      	strb	r2, [r3, #8]
 8004d74:	e002      	b.n	8004d7c <TbxMbServerFC02ReadInputs+0x1a0>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004d84:	e006      	b.n	8004d94 <TbxMbServerFC02ReadInputs+0x1b8>
      for (uint16_t idx = 0U; idx < numInputs; idx++)
 8004d86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d88:	3301      	adds	r3, #1
 8004d8a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d8c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004d8e:	8bfb      	ldrh	r3, [r7, #30]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3a4      	bcc.n	8004cde <TbxMbServerFC02ReadInputs+0x102>
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004d94:	bf00      	nop
 8004d96:	3728      	adds	r7, #40	@ 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	08005dc4 	.word	0x08005dc4

08004da0 <TbxMbServerFC03ReadHoldingRegs>:
**
****************************************************************************************/
static void TbxMbServerFC03ReadHoldingRegs(tTbxMbServerCtx       * context,
                                           tTbxMbTpPacket  const * rxPacket,
                                           tTbxMbTpPacket        * txPacket)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <TbxMbServerFC03ReadHoldingRegs+0x1e>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <TbxMbServerFC03ReadHoldingRegs+0x1e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <TbxMbServerFC03ReadHoldingRegs+0x28>
 8004dbe:	f240 3131 	movw	r1, #817	@ 0x331
 8004dc2:	484a      	ldr	r0, [pc, #296]	@ (8004eec <TbxMbServerFC03ReadHoldingRegs+0x14c>)
 8004dc4:	f7fd ffca 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8089 	beq.w	8004ee2 <TbxMbServerFC03ReadHoldingRegs+0x142>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8085 	beq.w	8004ee2 <TbxMbServerFC03ReadHoldingRegs+0x142>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8081 	beq.w	8004ee2 <TbxMbServerFC03ReadHoldingRegs+0x142>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	3308      	adds	r3, #8
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fc43 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8004dea:	4603      	mov	r3, r0
 8004dec:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	330a      	adds	r3, #10
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fc3c 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	837b      	strh	r3, [r7, #26]

    /* Check if a callback function was registered. */
    if (context->readHoldingRegFcn == NULL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10e      	bne.n	8004e22 <TbxMbServerFC03ReadHoldingRegs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	79db      	ldrb	r3, [r3, #7]
 8004e08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 8004e20:	e05f      	b.n	8004ee2 <TbxMbServerFC03ReadHoldingRegs+0x142>
    else if ((numRegs < 1U) || (numRegs > 125U))
 8004e22:	8b7b      	ldrh	r3, [r7, #26]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <TbxMbServerFC03ReadHoldingRegs+0x8e>
 8004e28:	8b7b      	ldrh	r3, [r7, #26]
 8004e2a:	2b7d      	cmp	r3, #125	@ 0x7d
 8004e2c:	d90e      	bls.n	8004e4c <TbxMbServerFC03ReadHoldingRegs+0xac>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	79db      	ldrb	r3, [r3, #7]
 8004e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2203      	movs	r2, #3
 8004e40:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 8004e4a:	e04a      	b.n	8004ee2 <TbxMbServerFC03ReadHoldingRegs+0x142>
      txPacket->pdu.data[0] = 2U * numRegs;
 8004e4c:	8b7b      	ldrh	r3, [r7, #26]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7a1b      	ldrb	r3, [r3, #8]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e035      	b.n	8004ed8 <TbxMbServerFC03ReadHoldingRegs+0x138>
        uint16_t           regValue = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	82fb      	strh	r3, [r7, #22]
        srvResult = context->readHoldingRegFcn(context, startAddr + idx, &regValue);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	7ffa      	ldrb	r2, [r7, #31]
 8004e76:	b291      	uxth	r1, r2
 8004e78:	8bba      	ldrh	r2, [r7, #28]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	b291      	uxth	r1, r2
 8004e7e:	f107 0216 	add.w	r2, r7, #22
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	4798      	blx	r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	767b      	strb	r3, [r7, #25]
        if (srvResult == TBX_MB_SERVER_OK)
 8004e8a:	7e7b      	ldrb	r3, [r7, #25]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10d      	bne.n	8004eac <TbxMbServerFC03ReadHoldingRegs+0x10c>
          TbxMbCommonStoreUInt16BE(regValue, &txPacket->pdu.data[1U + (idx * 2U)]);
 8004e90:	8af8      	ldrh	r0, [r7, #22]
 8004e92:	7ffb      	ldrb	r3, [r7, #31]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	3301      	adds	r3, #1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f7ff fbfb 	bl	800469a <TbxMbCommonStoreUInt16BE>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e015      	b.n	8004ed8 <TbxMbServerFC03ReadHoldingRegs+0x138>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	79db      	ldrb	r3, [r3, #7]
 8004eb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004eba:	7e7b      	ldrb	r3, [r7, #25]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d103      	bne.n	8004ec8 <TbxMbServerFC03ReadHoldingRegs+0x128>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	721a      	strb	r2, [r3, #8]
 8004ec6:	e002      	b.n	8004ece <TbxMbServerFC03ReadHoldingRegs+0x12e>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 8004ed6:	e004      	b.n	8004ee2 <TbxMbServerFC03ReadHoldingRegs+0x142>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004ed8:	7ffb      	ldrb	r3, [r7, #31]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8b7a      	ldrh	r2, [r7, #26]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d8c4      	bhi.n	8004e6c <TbxMbServerFC03ReadHoldingRegs+0xcc>
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 8004ee2:	bf00      	nop
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	08005dc4 	.word	0x08005dc4

08004ef0 <TbxMbServerFC04ReadInputRegs>:
**
****************************************************************************************/
static void TbxMbServerFC04ReadInputRegs(tTbxMbServerCtx       * context,
                                        tTbxMbTpPacket  const * rxPacket,
                                        tTbxMbTpPacket        * txPacket)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <TbxMbServerFC04ReadInputRegs+0x1e>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <TbxMbServerFC04ReadInputRegs+0x1e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <TbxMbServerFC04ReadInputRegs+0x28>
 8004f0e:	f240 3182 	movw	r1, #898	@ 0x382
 8004f12:	484a      	ldr	r0, [pc, #296]	@ (800503c <TbxMbServerFC04ReadInputRegs+0x14c>)
 8004f14:	f7fd ff22 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8089 	beq.w	8005032 <TbxMbServerFC04ReadInputRegs+0x142>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8085 	beq.w	8005032 <TbxMbServerFC04ReadInputRegs+0x142>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8081 	beq.w	8005032 <TbxMbServerFC04ReadInputRegs+0x142>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	3308      	adds	r3, #8
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fb9b 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	330a      	adds	r3, #10
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fb94 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	837b      	strh	r3, [r7, #26]

    /* Check if a callback function was registered. */
    if (context->readInputRegFcn == NULL)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10e      	bne.n	8004f72 <TbxMbServerFC04ReadInputRegs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	79db      	ldrb	r3, [r3, #7]
 8004f58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8004f70:	e05f      	b.n	8005032 <TbxMbServerFC04ReadInputRegs+0x142>
    else if ((numRegs < 1U) || (numRegs > 125U))
 8004f72:	8b7b      	ldrh	r3, [r7, #26]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <TbxMbServerFC04ReadInputRegs+0x8e>
 8004f78:	8b7b      	ldrh	r3, [r7, #26]
 8004f7a:	2b7d      	cmp	r3, #125	@ 0x7d
 8004f7c:	d90e      	bls.n	8004f9c <TbxMbServerFC04ReadInputRegs+0xac>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	79db      	ldrb	r3, [r3, #7]
 8004f82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8004f9a:	e04a      	b.n	8005032 <TbxMbServerFC04ReadInputRegs+0x142>
      txPacket->pdu.data[0] = 2U * numRegs;
 8004f9c:	8b7b      	ldrh	r3, [r7, #26]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	7a1b      	ldrb	r3, [r3, #8]
 8004fac:	3301      	adds	r3, #1
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e035      	b.n	8005028 <TbxMbServerFC04ReadInputRegs+0x138>
        uint16_t           regValue = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	82fb      	strh	r3, [r7, #22]
        srvResult = context->readInputRegFcn(context, startAddr + idx, &regValue);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	7ffa      	ldrb	r2, [r7, #31]
 8004fc6:	b291      	uxth	r1, r2
 8004fc8:	8bba      	ldrh	r2, [r7, #28]
 8004fca:	440a      	add	r2, r1
 8004fcc:	b291      	uxth	r1, r2
 8004fce:	f107 0216 	add.w	r2, r7, #22
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	4798      	blx	r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	767b      	strb	r3, [r7, #25]
        if (srvResult == TBX_MB_SERVER_OK)
 8004fda:	7e7b      	ldrb	r3, [r7, #25]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <TbxMbServerFC04ReadInputRegs+0x10c>
          TbxMbCommonStoreUInt16BE(regValue, &txPacket->pdu.data[1U + (idx * 2U)]);
 8004fe0:	8af8      	ldrh	r0, [r7, #22]
 8004fe2:	7ffb      	ldrb	r3, [r7, #31]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4413      	add	r3, r2
 8004fec:	3308      	adds	r3, #8
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7ff fb53 	bl	800469a <TbxMbCommonStoreUInt16BE>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004ff4:	7ffb      	ldrb	r3, [r7, #31]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e015      	b.n	8005028 <TbxMbServerFC04ReadInputRegs+0x138>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	79db      	ldrb	r3, [r3, #7]
 8005000:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005004:	b2da      	uxtb	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 800500a:	7e7b      	ldrb	r3, [r7, #25]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d103      	bne.n	8005018 <TbxMbServerFC04ReadInputRegs+0x128>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	721a      	strb	r2, [r3, #8]
 8005016:	e002      	b.n	800501e <TbxMbServerFC04ReadInputRegs+0x12e>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2204      	movs	r2, #4
 800501c:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8005026:	e004      	b.n	8005032 <TbxMbServerFC04ReadInputRegs+0x142>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8005028:	7ffb      	ldrb	r3, [r7, #31]
 800502a:	b29b      	uxth	r3, r3
 800502c:	8b7a      	ldrh	r2, [r7, #26]
 800502e:	429a      	cmp	r2, r3
 8005030:	d8c4      	bhi.n	8004fbc <TbxMbServerFC04ReadInputRegs+0xcc>
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8005032:	bf00      	nop
 8005034:	3720      	adds	r7, #32
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	08005dc4 	.word	0x08005dc4

08005040 <TbxMbServerFC05WriteSingleCoil>:
**
****************************************************************************************/
static void TbxMbServerFC05WriteSingleCoil(tTbxMbServerCtx       * context,
                                           tTbxMbTpPacket  const * rxPacket,
                                           tTbxMbTpPacket        * txPacket)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <TbxMbServerFC05WriteSingleCoil+0x1e>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <TbxMbServerFC05WriteSingleCoil+0x1e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <TbxMbServerFC05WriteSingleCoil+0x28>
 800505e:	f240 31d3 	movw	r1, #979	@ 0x3d3
 8005062:	4841      	ldr	r0, [pc, #260]	@ (8005168 <TbxMbServerFC05WriteSingleCoil+0x128>)
 8005064:	f7fd fe7a 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d077      	beq.n	800515e <TbxMbServerFC05WriteSingleCoil+0x11e>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d074      	beq.n	800515e <TbxMbServerFC05WriteSingleCoil+0x11e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d071      	beq.n	800515e <TbxMbServerFC05WriteSingleCoil+0x11e>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	3308      	adds	r3, #8
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff faf6 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8005084:	4603      	mov	r3, r0
 8005086:	82fb      	strh	r3, [r7, #22]
    uint16_t outputValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	330a      	adds	r3, #10
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff faef 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8005092:	4603      	mov	r3, r0
 8005094:	82bb      	strh	r3, [r7, #20]

    /* Check if a callback function was registered. */
    if (context->writeCoilFcn == NULL)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10e      	bne.n	80050bc <TbxMbServerFC05WriteSingleCoil+0x7c>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	79db      	ldrb	r3, [r3, #7]
 80050a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
        }
        txPacket->dataLen = 1U;
      }
    }
  }
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 80050ba:	e050      	b.n	800515e <TbxMbServerFC05WriteSingleCoil+0x11e>
    else if ((outputValue != 0x0000U) && (outputValue != 0xFF00U))
 80050bc:	8abb      	ldrh	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d012      	beq.n	80050e8 <TbxMbServerFC05WriteSingleCoil+0xa8>
 80050c2:	8abb      	ldrh	r3, [r7, #20]
 80050c4:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80050c8:	d00e      	beq.n	80050e8 <TbxMbServerFC05WriteSingleCoil+0xa8>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	79db      	ldrb	r3, [r3, #7]
 80050ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2203      	movs	r2, #3
 80050dc:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 80050e6:	e03a      	b.n	800515e <TbxMbServerFC05WriteSingleCoil+0x11e>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	7a1a      	ldrb	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	7a5a      	ldrb	r2, [r3, #9]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	7a9a      	ldrb	r2, [r3, #10]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	7ada      	ldrb	r2, [r3, #11]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2204      	movs	r2, #4
 800510c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      uint8_t            coilValue = (outputValue == 0x0000U) ? TBX_OFF : TBX_ON;
 8005110:	8abb      	ldrh	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	74fb      	strb	r3, [r7, #19]
      srvResult = context->writeCoilFcn(context, startAddr, coilValue);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	7cfa      	ldrb	r2, [r7, #19]
 8005124:	8af9      	ldrh	r1, [r7, #22]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	4798      	blx	r3
 800512a:	4603      	mov	r3, r0
 800512c:	74bb      	strb	r3, [r7, #18]
      if (srvResult != TBX_MB_SERVER_OK)
 800512e:	7cbb      	ldrb	r3, [r7, #18]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d014      	beq.n	800515e <TbxMbServerFC05WriteSingleCoil+0x11e>
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	79db      	ldrb	r3, [r3, #7]
 8005138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800513c:	b2da      	uxtb	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	71da      	strb	r2, [r3, #7]
        if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8005142:	7cbb      	ldrb	r3, [r7, #18]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d103      	bne.n	8005150 <TbxMbServerFC05WriteSingleCoil+0x110>
          txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	721a      	strb	r2, [r3, #8]
 800514e:	e002      	b.n	8005156 <TbxMbServerFC05WriteSingleCoil+0x116>
          txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2204      	movs	r2, #4
 8005154:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 800515e:	bf00      	nop
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	08005dc4 	.word	0x08005dc4

0800516c <TbxMbServerFC06WriteSingleReg>:
**
****************************************************************************************/
static void TbxMbServerFC06WriteSingleReg(tTbxMbServerCtx       * context,
                                          tTbxMbTpPacket  const * rxPacket,
                                          tTbxMbTpPacket        * txPacket)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <TbxMbServerFC06WriteSingleReg+0x1e>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <TbxMbServerFC06WriteSingleReg+0x1e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <TbxMbServerFC06WriteSingleReg+0x28>
 800518a:	f240 411b 	movw	r1, #1051	@ 0x41b
 800518e:	4832      	ldr	r0, [pc, #200]	@ (8005258 <TbxMbServerFC06WriteSingleReg+0xec>)
 8005190:	f7fd fde4 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d05a      	beq.n	8005250 <TbxMbServerFC06WriteSingleReg+0xe4>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d057      	beq.n	8005250 <TbxMbServerFC06WriteSingleReg+0xe4>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d054      	beq.n	8005250 <TbxMbServerFC06WriteSingleReg+0xe4>
  {
    /* Read out request packet parameters. */
    uint16_t regAddr  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	3308      	adds	r3, #8
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fa60 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 80051b0:	4603      	mov	r3, r0
 80051b2:	82fb      	strh	r3, [r7, #22]
    uint16_t regValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	330a      	adds	r3, #10
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fa59 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 80051be:	4603      	mov	r3, r0
 80051c0:	82bb      	strh	r3, [r7, #20]

    /* Check if a callback function was registered. */
    if (context->writeHoldingRegFcn == NULL)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10e      	bne.n	80051e8 <TbxMbServerFC06WriteSingleReg+0x7c>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	79db      	ldrb	r3, [r3, #7]
 80051ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
        }
        txPacket->dataLen = 1U;
      }
    }
  }
} /*** end of TbxMbServerFC06WriteSingleReg ***/
 80051e6:	e033      	b.n	8005250 <TbxMbServerFC06WriteSingleReg+0xe4>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	7a1a      	ldrb	r2, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	7a5a      	ldrb	r2, [r3, #9]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	7a9a      	ldrb	r2, [r3, #10]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	7ada      	ldrb	r2, [r3, #11]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2204      	movs	r2, #4
 800520c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      srvResult = context->writeHoldingRegFcn(context, regAddr, regValue);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	8aba      	ldrh	r2, [r7, #20]
 8005216:	8af9      	ldrh	r1, [r7, #22]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	4798      	blx	r3
 800521c:	4603      	mov	r3, r0
 800521e:	74fb      	strb	r3, [r7, #19]
      if (srvResult != TBX_MB_SERVER_OK)
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d014      	beq.n	8005250 <TbxMbServerFC06WriteSingleReg+0xe4>
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	79db      	ldrb	r3, [r3, #7]
 800522a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800522e:	b2da      	uxtb	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	71da      	strb	r2, [r3, #7]
        if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d103      	bne.n	8005242 <TbxMbServerFC06WriteSingleReg+0xd6>
          txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	721a      	strb	r2, [r3, #8]
 8005240:	e002      	b.n	8005248 <TbxMbServerFC06WriteSingleReg+0xdc>
          txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2204      	movs	r2, #4
 8005246:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC06WriteSingleReg ***/
 8005250:	bf00      	nop
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08005dc4 	.word	0x08005dc4

0800525c <TbxMbServerFC08Diagnostics>:
**
****************************************************************************************/
static void TbxMbServerFC08Diagnostics(tTbxMbServerCtx       * context,
                                       tTbxMbTpPacket  const * rxPacket,
                                       tTbxMbTpPacket        * txPacket)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <TbxMbServerFC08Diagnostics+0x1e>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <TbxMbServerFC08Diagnostics+0x1e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <TbxMbServerFC08Diagnostics+0x28>
 800527a:	f240 415a 	movw	r1, #1114	@ 0x45a
 800527e:	48a2      	ldr	r0, [pc, #648]	@ (8005508 <TbxMbServerFC08Diagnostics+0x2ac>)
 8005280:	f7fd fd6c 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 813a 	beq.w	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8136 	beq.w	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8132 	beq.w	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
  {
    /* Read out request packet parameters. */
    uint16_t subCode   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	3308      	adds	r3, #8
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff f9e5 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 80052a6:	4603      	mov	r3, r0
 80052a8:	82bb      	strh	r3, [r7, #20]
    uint16_t dataField = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	330a      	adds	r3, #10
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff f9de 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 80052b4:	4603      	mov	r3, r0
 80052b6:	827b      	strh	r3, [r7, #18]
    /* Prepare the most common response. It's typically the sub-function code echoed,
     * together with a 16-bit unsigned value.
     */
    txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	7a1a      	ldrb	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	721a      	strb	r2, [r3, #8]
    txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	7a5a      	ldrb	r2, [r3, #9]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	725a      	strb	r2, [r3, #9]
    txPacket->dataLen = 4U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2204      	movs	r2, #4
 80052cc:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106

    /* Filter on the received sub-function code. */
    switch (subCode)
 80052d0:	8abb      	ldrh	r3, [r7, #20]
 80052d2:	2b0f      	cmp	r3, #15
 80052d4:	f200 8105 	bhi.w	80054e2 <TbxMbServerFC08Diagnostics+0x286>
 80052d8:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <TbxMbServerFC08Diagnostics+0x84>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005321 	.word	0x08005321
 80052e4:	080054e3 	.word	0x080054e3
 80052e8:	080054e3 	.word	0x080054e3
 80052ec:	080054e3 	.word	0x080054e3
 80052f0:	080054e3 	.word	0x080054e3
 80052f4:	080054e3 	.word	0x080054e3
 80052f8:	080054e3 	.word	0x080054e3
 80052fc:	080054e3 	.word	0x080054e3
 8005300:	080054e3 	.word	0x080054e3
 8005304:	080054e3 	.word	0x080054e3
 8005308:	08005359 	.word	0x08005359
 800530c:	080053c1 	.word	0x080053c1
 8005310:	080053fb 	.word	0x080053fb
 8005314:	08005435 	.word	0x08005435
 8005318:	0800546f 	.word	0x0800546f
 800531c:	080054a9 	.word	0x080054a9
    {
      case TBX_MB_DIAG_SC_QUERY_DATA:
      {
        /* Echo the received data back. */
        for (uint8_t idx = 0U; idx < rxPacket->dataLen; idx++)
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
 8005324:	e00b      	b.n	800533e <TbxMbServerFC08Diagnostics+0xe2>
        {
         txPacket->pdu.data[idx] = rxPacket->pdu.data[idx];
 8005326:	7dfa      	ldrb	r2, [r7, #23]
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	440a      	add	r2, r1
 800532e:	7a11      	ldrb	r1, [r2, #8]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	460a      	mov	r2, r1
 8005336:	721a      	strb	r2, [r3, #8]
        for (uint8_t idx = 0U; idx < rxPacket->dataLen; idx++)
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	3301      	adds	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8005344:	7dfa      	ldrb	r2, [r7, #23]
 8005346:	429a      	cmp	r2, r3
 8005348:	d3ed      	bcc.n	8005326 <TbxMbServerFC08Diagnostics+0xca>
        }
        txPacket->dataLen = rxPacket->dataLen;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      }
      break;
 8005356:	e0d3      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_CLEAR_COUNTERS:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8005358:	8a7b      	ldrh	r3, [r7, #18]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <TbxMbServerFC08Diagnostics+0x120>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	79db      	ldrb	r3, [r3, #7]
 8005362:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005366:	b2da      	uxtb	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2203      	movs	r2, #3
 8005370:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          context->tpCtx->diagInfo.srvNoRespCnt  = 0U;
          /* Echo the request data field. */
          TbxMbCommonStoreUInt16BE(dataField, &txPacket->pdu.data[2U]);
        }
      }
      break;
 800537a:	e0c1      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
          context->tpCtx->diagInfo.busMsgCnt     = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2200      	movs	r2, #0
 8005382:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
          context->tpCtx->diagInfo.busCommErrCnt = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2200      	movs	r2, #0
 800538c:	f8a3 223a 	strh.w	r2, [r3, #570]	@ 0x23a
          context->tpCtx->diagInfo.busExcpErrCnt = 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2200      	movs	r2, #0
 8005396:	f8a3 223c 	strh.w	r2, [r3, #572]	@ 0x23c
          context->tpCtx->diagInfo.srvMsgCnt     = 0U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8a3 223e 	strh.w	r2, [r3, #574]	@ 0x23e
          context->tpCtx->diagInfo.srvNoRespCnt  = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8a3 2240 	strh.w	r2, [r3, #576]	@ 0x240
          TbxMbCommonStoreUInt16BE(dataField, &txPacket->pdu.data[2U]);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f103 020a 	add.w	r2, r3, #10
 80053b4:	8a7b      	ldrh	r3, [r7, #18]
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f96e 	bl	800469a <TbxMbCommonStoreUInt16BE>
      break;
 80053be:	e09f      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_BUS_MESSAGE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 80053c0:	8a7b      	ldrh	r3, [r7, #18]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <TbxMbServerFC08Diagnostics+0x188>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	79db      	ldrb	r3, [r3, #7]
 80053ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2203      	movs	r2, #3
 80053d8:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busMsgCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 80053e2:	e08d      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busMsgCnt, 
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f8b3 2238 	ldrh.w	r2, [r3, #568]	@ 0x238
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	330a      	adds	r3, #10
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f7ff f951 	bl	800469a <TbxMbCommonStoreUInt16BE>
      break;
 80053f8:	e082      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_BUS_COMM_ERROR_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 80053fa:	8a7b      	ldrh	r3, [r7, #18]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <TbxMbServerFC08Diagnostics+0x1c2>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	79db      	ldrb	r3, [r3, #7]
 8005404:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005408:	b2da      	uxtb	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2203      	movs	r2, #3
 8005412:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busCommErrCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 800541c:	e070      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busCommErrCnt, 
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f8b3 223a 	ldrh.w	r2, [r3, #570]	@ 0x23a
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	330a      	adds	r3, #10
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f7ff f934 	bl	800469a <TbxMbCommonStoreUInt16BE>
      break;
 8005432:	e065      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_BUS_EXCEPTION_ERROR_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8005434:	8a7b      	ldrh	r3, [r7, #18]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00e      	beq.n	8005458 <TbxMbServerFC08Diagnostics+0x1fc>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	79db      	ldrb	r3, [r3, #7]
 800543e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005442:	b2da      	uxtb	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2203      	movs	r2, #3
 800544c:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busExcpErrCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8005456:	e053      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busExcpErrCnt, 
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f8b3 223c 	ldrh.w	r2, [r3, #572]	@ 0x23c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	330a      	adds	r3, #10
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f7ff f917 	bl	800469a <TbxMbCommonStoreUInt16BE>
      break;
 800546c:	e048      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_SERVER_MESSAGE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 800546e:	8a7b      	ldrh	r3, [r7, #18]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00e      	beq.n	8005492 <TbxMbServerFC08Diagnostics+0x236>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	79db      	ldrb	r3, [r3, #7]
 8005478:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2203      	movs	r2, #3
 8005486:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvMsgCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8005490:	e036      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvMsgCnt, 
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f8b3 223e 	ldrh.w	r2, [r3, #574]	@ 0x23e
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	330a      	adds	r3, #10
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f7ff f8fa 	bl	800469a <TbxMbCommonStoreUInt16BE>
      break;
 80054a6:	e02b      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_SERVER_NO_RESPONSE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 80054a8:	8a7b      	ldrh	r3, [r7, #18]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00e      	beq.n	80054cc <TbxMbServerFC08Diagnostics+0x270>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	79db      	ldrb	r3, [r3, #7]
 80054b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2203      	movs	r2, #3
 80054c0:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvNoRespCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 80054ca:	e019      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvNoRespCnt, 
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f8b3 2240 	ldrh.w	r2, [r3, #576]	@ 0x240
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	330a      	adds	r3, #10
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f7ff f8dd 	bl	800469a <TbxMbCommonStoreUInt16BE>
      break;
 80054e0:	e00e      	b.n	8005500 <TbxMbServerFC08Diagnostics+0x2a4>

      default:
      {
        /* Unsupported sub-function code. Prepare exception response. */
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	79db      	ldrb	r3, [r3, #7]
 80054e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	71da      	strb	r2, [r3, #7]
        txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      }
      break;
 80054fe:	bf00      	nop
    }
  }
} /*** end of TbxMbServerFC08Diagnostics ***/
 8005500:	bf00      	nop
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	08005dc4 	.word	0x08005dc4

0800550c <TbxMbServerFC15WriteMultipleCoils>:
**
****************************************************************************************/
static void TbxMbServerFC15WriteMultipleCoils(tTbxMbServerCtx       * context,
                                              tTbxMbTpPacket  const * rxPacket,
                                              tTbxMbTpPacket        * txPacket)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	@ 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <TbxMbServerFC15WriteMultipleCoils+0x1e>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <TbxMbServerFC15WriteMultipleCoils+0x1e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <TbxMbServerFC15WriteMultipleCoils+0x28>
 800552a:	f240 510f 	movw	r1, #1295	@ 0x50f
 800552e:	486f      	ldr	r0, [pc, #444]	@ (80056ec <TbxMbServerFC15WriteMultipleCoils+0x1e0>)
 8005530:	f7fd fc14 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80d4 	beq.w	80056e4 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80d0 	beq.w	80056e4 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80cc 	beq.w	80056e4 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	3308      	adds	r3, #8
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff f88d 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8005556:	4603      	mov	r3, r0
 8005558:	83fb      	strh	r3, [r7, #30]
    uint16_t numCoils  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	330a      	adds	r3, #10
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f886 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8005564:	4603      	mov	r3, r0
 8005566:	83bb      	strh	r3, [r7, #28]
    uint8_t  byteCnt   = rxPacket->pdu.data[4];
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	7b1b      	ldrb	r3, [r3, #12]
 800556c:	76fb      	strb	r3, [r7, #27]
    /* Determine the number of bytes needed to hold all the coil bits. Make it U16 
     * because the range validity of numCoils is not yet checked.
     */
    uint16_t numBytes = (uint16_t)(numCoils / 8U);
 800556e:	8bbb      	ldrh	r3, [r7, #28]
 8005570:	08db      	lsrs	r3, r3, #3
 8005572:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if ((numCoils % 8U) != 0U)
 8005574:	8bbb      	ldrh	r3, [r7, #28]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <TbxMbServerFC15WriteMultipleCoils+0x7a>
    {
      numBytes++;
 8005580:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005582:	3301      	adds	r3, #1
 8005584:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    /* Check if a callback function was registered. */
    if (context->writeCoilFcn == NULL)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10e      	bne.n	80055ac <TbxMbServerFC15WriteMultipleCoils+0xa0>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	79db      	ldrb	r3, [r3, #7]
 8005592:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005596:	b2da      	uxtb	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          byteIdx++;
        }
      }
    }
  }
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 80055aa:	e09b      	b.n	80056e4 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
    else if (((numCoils < 1U) || (numCoils > 1968U)))
 80055ac:	8bbb      	ldrh	r3, [r7, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <TbxMbServerFC15WriteMultipleCoils+0xae>
 80055b2:	8bbb      	ldrh	r3, [r7, #28]
 80055b4:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80055b8:	d90e      	bls.n	80055d8 <TbxMbServerFC15WriteMultipleCoils+0xcc>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	79db      	ldrb	r3, [r3, #7]
 80055be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2203      	movs	r2, #3
 80055cc:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
 80055d6:	e085      	b.n	80056e4 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
    else if (numBytes != byteCnt)
 80055d8:	7efb      	ldrb	r3, [r7, #27]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80055de:	429a      	cmp	r2, r3
 80055e0:	d00e      	beq.n	8005600 <TbxMbServerFC15WriteMultipleCoils+0xf4>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	79db      	ldrb	r3, [r3, #7]
 80055e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2203      	movs	r2, #3
 80055f4:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 80055fe:	e071      	b.n	80056e4 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	7a1a      	ldrb	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	7a5a      	ldrb	r2, [r3, #9]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	7a9a      	ldrb	r2, [r3, #10]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	7ada      	ldrb	r2, [r3, #11]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2204      	movs	r2, #4
 8005624:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      uint8_t         bitIdx  = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint8_t         byteIdx = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      uint8_t const * coilData = &rxPacket->pdu.data[5];
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	330d      	adds	r3, #13
 8005638:	617b      	str	r3, [r7, #20]
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 800563a:	2300      	movs	r3, #0
 800563c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800563e:	e04c      	b.n	80056da <TbxMbServerFC15WriteMultipleCoils+0x1ce>
        uint8_t            coilValue = TBX_OFF;
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if ((coilData[byteIdx] & (1U << bitIdx)) != 0U)
 8005646:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4413      	add	r3, r2
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <TbxMbServerFC15WriteMultipleCoils+0x15c>
          coilValue = TBX_ON;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        srvResult = context->writeCoilFcn(context, startAddr + idx, coilValue);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	8bf9      	ldrh	r1, [r7, #30]
 800566e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005670:	440a      	add	r2, r1
 8005672:	b291      	uxth	r1, r2
 8005674:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	4798      	blx	r3
 800567c:	4603      	mov	r3, r0
 800567e:	74fb      	strb	r3, [r7, #19]
        if (srvResult != TBX_MB_SERVER_OK)
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d015      	beq.n	80056b2 <TbxMbServerFC15WriteMultipleCoils+0x1a6>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	79db      	ldrb	r3, [r3, #7]
 800568a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800568e:	b2da      	uxtb	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d103      	bne.n	80056a2 <TbxMbServerFC15WriteMultipleCoils+0x196>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	721a      	strb	r2, [r3, #8]
 80056a0:	e002      	b.n	80056a8 <TbxMbServerFC15WriteMultipleCoils+0x19c>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2204      	movs	r2, #4
 80056a6:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          break;
 80056b0:	e018      	b.n	80056e4 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
        bitIdx++;
 80056b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056b6:	3301      	adds	r3, #1
 80056b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (bitIdx == 8U)
 80056bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d107      	bne.n	80056d4 <TbxMbServerFC15WriteMultipleCoils+0x1c8>
          bitIdx = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
          byteIdx++;
 80056ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056ce:	3301      	adds	r3, #1
 80056d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 80056d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056d6:	3301      	adds	r3, #1
 80056d8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80056dc:	8bbb      	ldrh	r3, [r7, #28]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d3ae      	bcc.n	8005640 <TbxMbServerFC15WriteMultipleCoils+0x134>
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 80056e2:	e7ff      	b.n	80056e4 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 80056e4:	bf00      	nop
 80056e6:	3728      	adds	r7, #40	@ 0x28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	08005dc4 	.word	0x08005dc4

080056f0 <TbxMbServerFC16WriteMultipleRegs>:
**
****************************************************************************************/
static void TbxMbServerFC16WriteMultipleRegs(tTbxMbServerCtx       * context,
                                             tTbxMbTpPacket  const * rxPacket,
                                             tTbxMbTpPacket        * txPacket)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <TbxMbServerFC16WriteMultipleRegs+0x1e>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <TbxMbServerFC16WriteMultipleRegs+0x1e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <TbxMbServerFC16WriteMultipleRegs+0x28>
 800570e:	f240 5181 	movw	r1, #1409	@ 0x581
 8005712:	4850      	ldr	r0, [pc, #320]	@ (8005854 <TbxMbServerFC16WriteMultipleRegs+0x164>)
 8005714:	f7fd fb22 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8096 	beq.w	800584c <TbxMbServerFC16WriteMultipleRegs+0x15c>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8092 	beq.w	800584c <TbxMbServerFC16WriteMultipleRegs+0x15c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 808e 	beq.w	800584c <TbxMbServerFC16WriteMultipleRegs+0x15c>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	3308      	adds	r3, #8
 8005734:	4618      	mov	r0, r3
 8005736:	f7fe ff9b 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 800573a:	4603      	mov	r3, r0
 800573c:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	330a      	adds	r3, #10
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe ff94 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 8005748:	4603      	mov	r3, r0
 800574a:	837b      	strh	r3, [r7, #26]
    uint8_t  byteCnt   = rxPacket->pdu.data[4];
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	7b1b      	ldrb	r3, [r3, #12]
 8005750:	767b      	strb	r3, [r7, #25]

    /* Check if a callback function was registered. */
    if (context->writeHoldingRegFcn == NULL)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10e      	bne.n	8005778 <TbxMbServerFC16WriteMultipleRegs+0x88>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	79db      	ldrb	r3, [r3, #7]
 800575e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005762:	b2da      	uxtb	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC16WriteMultipleRegs ***/
 8005776:	e069      	b.n	800584c <TbxMbServerFC16WriteMultipleRegs+0x15c>
    else if (((numRegs < 1U) || (numRegs > 123U)) || (byteCnt != (numRegs * 2U)))
 8005778:	8b7b      	ldrh	r3, [r7, #26]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <TbxMbServerFC16WriteMultipleRegs+0x9e>
 800577e:	8b7b      	ldrh	r3, [r7, #26]
 8005780:	2b7b      	cmp	r3, #123	@ 0x7b
 8005782:	d804      	bhi.n	800578e <TbxMbServerFC16WriteMultipleRegs+0x9e>
 8005784:	7e7a      	ldrb	r2, [r7, #25]
 8005786:	8b7b      	ldrh	r3, [r7, #26]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	429a      	cmp	r2, r3
 800578c:	d00e      	beq.n	80057ac <TbxMbServerFC16WriteMultipleRegs+0xbc>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	79db      	ldrb	r3, [r3, #7]
 8005792:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005796:	b2da      	uxtb	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2203      	movs	r2, #3
 80057a0:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
 80057aa:	e04f      	b.n	800584c <TbxMbServerFC16WriteMultipleRegs+0x15c>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	7a1a      	ldrb	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	7a5a      	ldrb	r2, [r3, #9]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	7a9a      	ldrb	r2, [r3, #10]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	7ada      	ldrb	r2, [r3, #11]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2204      	movs	r2, #4
 80057d0:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e032      	b.n	8005840 <TbxMbServerFC16WriteMultipleRegs+0x150>
        regValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[5U + (idx * 2U)]);
 80057da:	7ffb      	ldrb	r3, [r7, #31]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	3305      	adds	r3, #5
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4413      	add	r3, r2
 80057e4:	3308      	adds	r3, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe ff42 	bl	8004670 <TbxMbCommonExtractUInt16BE>
 80057ec:	4603      	mov	r3, r0
 80057ee:	82fb      	strh	r3, [r7, #22]
        srvResult = context->writeHoldingRegFcn(context, startAddr + idx, regValue);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	7ffa      	ldrb	r2, [r7, #31]
 80057f6:	b291      	uxth	r1, r2
 80057f8:	8bba      	ldrh	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	b291      	uxth	r1, r2
 80057fe:	8afa      	ldrh	r2, [r7, #22]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	4798      	blx	r3
 8005804:	4603      	mov	r3, r0
 8005806:	757b      	strb	r3, [r7, #21]
        if (srvResult != TBX_MB_SERVER_OK)
 8005808:	7d7b      	ldrb	r3, [r7, #21]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <TbxMbServerFC16WriteMultipleRegs+0x14a>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	79db      	ldrb	r3, [r3, #7]
 8005812:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005816:	b2da      	uxtb	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 800581c:	7d7b      	ldrb	r3, [r7, #21]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d103      	bne.n	800582a <TbxMbServerFC16WriteMultipleRegs+0x13a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	721a      	strb	r2, [r3, #8]
 8005828:	e002      	b.n	8005830 <TbxMbServerFC16WriteMultipleRegs+0x140>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2204      	movs	r2, #4
 800582e:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
          break;
 8005838:	e008      	b.n	800584c <TbxMbServerFC16WriteMultipleRegs+0x15c>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 800583a:	7ffb      	ldrb	r3, [r7, #31]
 800583c:	3301      	adds	r3, #1
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	7ffb      	ldrb	r3, [r7, #31]
 8005842:	b29b      	uxth	r3, r3
 8005844:	8b7a      	ldrh	r2, [r7, #26]
 8005846:	429a      	cmp	r2, r3
 8005848:	d8c7      	bhi.n	80057da <TbxMbServerFC16WriteMultipleRegs+0xea>
} /*** end of TbxMbServerFC16WriteMultipleRegs ***/
 800584a:	e7ff      	b.n	800584c <TbxMbServerFC16WriteMultipleRegs+0x15c>
 800584c:	bf00      	nop
 800584e:	3720      	adds	r7, #32
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	08005dc4 	.word	0x08005dc4

08005858 <TbxMbOsalEventInit>:
** \brief     Initialization function for the OSAL module. 
** \attention This function has a built-in protection to make sure it only runs once.
**
****************************************************************************************/
void TbxMbOsalEventInit(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  static uint8_t osalInitialized = TBX_FALSE;

  /* Only run this function once, */
  if (osalInitialized == TBX_FALSE)
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <TbxMbOsalEventInit+0x34>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10e      	bne.n	8005882 <TbxMbOsalEventInit+0x2a>
  {
    osalInitialized = TBX_TRUE;
 8005864:	4b09      	ldr	r3, [pc, #36]	@ (800588c <TbxMbOsalEventInit+0x34>)
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
    /* Initialize the queue. */
    eventQueue.count = 0U;
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <TbxMbOsalEventInit+0x38>)
 800586c:	2200      	movs	r2, #0
 800586e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    eventQueue.readIdx = 0U;
 8005872:	4b07      	ldr	r3, [pc, #28]	@ (8005890 <TbxMbOsalEventInit+0x38>)
 8005874:	2200      	movs	r2, #0
 8005876:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    eventQueue.writeIdx = 0U;
 800587a:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <TbxMbOsalEventInit+0x38>)
 800587c:	2200      	movs	r2, #0
 800587e:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
  }
} /*** end of TbxMbOsalEventInit ***/
 8005882:	bf00      	nop
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	20000a4c 	.word	0x20000a4c
 8005890:	20000944 	.word	0x20000944

08005894 <TbxMbOsalEventPost>:
**            routine, TBX_FALSE otherwise.
**
****************************************************************************************/
void TbxMbOsalEventPost(tTbxMbEvent const * event, 
                        uint8_t             fromIsr)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  TBX_UNUSED_ARG(fromIsr);

  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <TbxMbOsalEventPost+0x1a>
 80058a6:	216b      	movs	r1, #107	@ 0x6b
 80058a8:	4820      	ldr	r0, [pc, #128]	@ (800592c <TbxMbOsalEventPost+0x98>)
 80058aa:	f7fd fa57 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d036      	beq.n	8005922 <TbxMbOsalEventPost+0x8e>
  {
    TbxCriticalSectionEnter();
 80058b4:	f7fd fa68 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Make sure there is still space in the queue. If not, then the event queue size is
     * set too small. In this case increase the event queue size using configuration
     * macro TBX_MB_EVENT_QUEUE_SIZE.
     */
    TBX_ASSERT(eventQueue.count < TBX_MB_EVENT_QUEUE_SIZE);
 80058b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 80058ba:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80058be:	2b1f      	cmp	r3, #31
 80058c0:	d903      	bls.n	80058ca <TbxMbOsalEventPost+0x36>
 80058c2:	2175      	movs	r1, #117	@ 0x75
 80058c4:	4819      	ldr	r0, [pc, #100]	@ (800592c <TbxMbOsalEventPost+0x98>)
 80058c6:	f7fd fa49 	bl	8002d5c <TbxAssertTrigger>

    /* Only continue with enough space. */
    if (eventQueue.count < TBX_MB_EVENT_QUEUE_SIZE)
 80058ca:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 80058cc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80058d0:	2b1f      	cmp	r3, #31
 80058d2:	d824      	bhi.n	800591e <TbxMbOsalEventPost+0x8a>
    {
      /* Store the new event in the queue at the current write index. */
      eventQueue.entries[eventQueue.writeIdx] = *event;
 80058d4:	4b16      	ldr	r3, [pc, #88]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 80058d6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80058da:	4a15      	ldr	r2, [pc, #84]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4413      	add	r3, r2
 80058e2:	460a      	mov	r2, r1
 80058e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058e8:	e883 0003 	stmia.w	r3, {r0, r1}
      /* Update the total count. */
      eventQueue.count++;
 80058ec:	4b10      	ldr	r3, [pc, #64]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 80058ee:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80058f2:	3301      	adds	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 80058f8:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
      /* Increment the write index to point to the next entry. */
      eventQueue.writeIdx++;
 80058fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 80058fe:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8005902:	3301      	adds	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	4b0a      	ldr	r3, [pc, #40]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 8005908:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
      /* Time to wrap around to the start? */
      if (eventQueue.writeIdx == TBX_MB_EVENT_QUEUE_SIZE)
 800590c:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 800590e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8005912:	2b20      	cmp	r3, #32
 8005914:	d103      	bne.n	800591e <TbxMbOsalEventPost+0x8a>
      {
        eventQueue.writeIdx = 0U;
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <TbxMbOsalEventPost+0x9c>)
 8005918:	2200      	movs	r2, #0
 800591a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
      }
    }
    TbxCriticalSectionExit();
 800591e:	f7fd fa4d 	bl	8002dbc <TbxCriticalSectionExit>
  }
} /*** end of TbxMbOsalEventPost ***/
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	08005df0 	.word	0x08005df0
 8005930:	20000944 	.word	0x20000944

08005934 <TbxMbOsalEventWait>:
** \return    TBX_TRUE if an event occurred, TBX_FALSE otherwise (typically a timeout).
**
****************************************************************************************/
uint8_t TbxMbOsalEventWait(tTbxMbEvent * event,
                           uint16_t      timeoutMs)
{
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	807b      	strh	r3, [r7, #2]
  uint8_t result = TBX_FALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]

  TBX_UNUSED_ARG(timeoutMs);

  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <TbxMbOsalEventWait+0x1e>
 800594a:	219b      	movs	r1, #155	@ 0x9b
 800594c:	481d      	ldr	r0, [pc, #116]	@ (80059c4 <TbxMbOsalEventWait+0x90>)
 800594e:	f7fd fa05 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d02f      	beq.n	80059b8 <TbxMbOsalEventWait+0x84>
  {
    TbxCriticalSectionEnter();
 8005958:	f7fd fa16 	bl	8002d88 <TbxCriticalSectionEnter>
    /* Is there an event available in the queue? */
    if (eventQueue.count > 0U)
 800595c:	4b1a      	ldr	r3, [pc, #104]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 800595e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d026      	beq.n	80059b4 <TbxMbOsalEventWait+0x80>
    {
      /* Retrieve the event from the queue at the read index (oldest).  */
      *event = eventQueue.entries[eventQueue.readIdx];
 8005966:	4b18      	ldr	r3, [pc, #96]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 8005968:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4a16      	ldr	r2, [pc, #88]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 8005970:	460c      	mov	r4, r1
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4413      	add	r3, r2
 8005976:	e893 0003 	ldmia.w	r3, {r0, r1}
 800597a:	e884 0003 	stmia.w	r4, {r0, r1}
      /* Update the total count. */
      eventQueue.count--;
 800597e:	4b12      	ldr	r3, [pc, #72]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 8005980:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	4b0f      	ldr	r3, [pc, #60]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 800598a:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
      /* Increment the read index to point to the next entry. */
      eventQueue.readIdx++;
 800598e:	4b0e      	ldr	r3, [pc, #56]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 8005990:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8005994:	3301      	adds	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 800599a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
      /* Time to wrap around to the start? */
      if (eventQueue.readIdx == TBX_MB_EVENT_QUEUE_SIZE)
 800599e:	4b0a      	ldr	r3, [pc, #40]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 80059a0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d103      	bne.n	80059b0 <TbxMbOsalEventWait+0x7c>
      {
        eventQueue.readIdx = 0U;
 80059a8:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <TbxMbOsalEventWait+0x94>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
      }
      /* Update the result. */
      result = TBX_TRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
    }
    TbxCriticalSectionExit();
 80059b4:	f7fd fa02 	bl	8002dbc <TbxCriticalSectionExit>
  }
  /* Give the result back to the caller. */
  return result;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbOsalEventWait ***/
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd90      	pop	{r4, r7, pc}
 80059c2:	bf00      	nop
 80059c4:	08005df0 	.word	0x08005df0
 80059c8:	20000944 	.word	0x20000944

080059cc <TbxMbOsalSemCreate>:
** \return    Handle to the newly created binary semaphore object if successful, NULL
**            otherwise.
**
****************************************************************************************/
tTbxMbOsalSem TbxMbOsalSemCreate(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
  tTbxMbOsalSem result = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]

  /* Allocate memory for the new semaphore context. */
  tTbxMbOsalSemCtx * newSemCtx = TbxMemPoolAllocate(sizeof(tTbxMbOsalSemCtx));
 80059d6:	2002      	movs	r0, #2
 80059d8:	f7fd fd34 	bl	8003444 <TbxMemPoolAllocate>
 80059dc:	6038      	str	r0, [r7, #0]
  /* Automatically increase the memory pool, if it was too small. */
  if (newSemCtx == NULL)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d107      	bne.n	80059f4 <TbxMbOsalSemCreate+0x28>
  {
    /* No need to check the return value, because if it failed, the following
     * allocation fails too, which is verified later on.
     */
    (void)TbxMemPoolCreate(1U, sizeof(tTbxMbOsalSemCtx));
 80059e4:	2102      	movs	r1, #2
 80059e6:	2001      	movs	r0, #1
 80059e8:	f7fd fc8a 	bl	8003300 <TbxMemPoolCreate>
    newSemCtx = TbxMemPoolAllocate(sizeof(tTbxMbOsalSemCtx));      
 80059ec:	2002      	movs	r0, #2
 80059ee:	f7fd fd29 	bl	8003444 <TbxMemPoolAllocate>
 80059f2:	6038      	str	r0, [r7, #0]
  }
  /* Verify memory allocation of the semaphore context. */
  TBX_ASSERT(newSemCtx != NULL);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <TbxMbOsalSemCreate+0x36>
 80059fa:	21d0      	movs	r1, #208	@ 0xd0
 80059fc:	4809      	ldr	r0, [pc, #36]	@ (8005a24 <TbxMbOsalSemCreate+0x58>)
 80059fe:	f7fd f9ad 	bl	8002d5c <TbxAssertTrigger>
  /* Only continue if the memory allocation succeeded. */
  if (newSemCtx != NULL)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <TbxMbOsalSemCreate+0x4c>
  {
    /* Initialize the semaphore in a taken state. */
    newSemCtx->type = TBX_MB_OSAL_SEM_CONTEXT_TYPE;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	224c      	movs	r2, #76	@ 0x4c
 8005a0c:	701a      	strb	r2, [r3, #0]
    newSemCtx->count = 0U;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2200      	movs	r2, #0
 8005a12:	705a      	strb	r2, [r3, #1]
    /* Update the result. */
    result = newSemCtx;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	607b      	str	r3, [r7, #4]
  }
  /* Give the result back to the caller. */
  return result;
 8005a18:	687b      	ldr	r3, [r7, #4]
} /*** end of TbxMbOsalSemCreate ***/
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	08005df0 	.word	0x08005df0

08005a28 <TbxMbOsalSemGive>:
**            routine, TBX_FALSE otherwise.
**
****************************************************************************************/
void TbxMbOsalSemGive(tTbxMbOsalSem sem,
                      uint8_t       fromIsr)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  TBX_UNUSED_ARG(fromIsr);

  /* Verify parameters. */
  TBX_ASSERT(sem != NULL);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <TbxMbOsalSemGive+0x1c>
 8005a3a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005a3e:	480e      	ldr	r0, [pc, #56]	@ (8005a78 <TbxMbOsalSemGive+0x50>)
 8005a40:	f7fd f98c 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (sem != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d011      	beq.n	8005a6e <TbxMbOsalSemGive+0x46>
  {
    /* Convert the semaphore pointer to the context structure. */
    tTbxMbOsalSemCtx * semCtx = (tTbxMbOsalSemCtx *)sem;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
    /* Sanity check on the context type. */
    TBX_ASSERT(semCtx->type == TBX_MB_OSAL_SEM_CONTEXT_TYPE);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b4c      	cmp	r3, #76	@ 0x4c
 8005a54:	d004      	beq.n	8005a60 <TbxMbOsalSemGive+0x38>
 8005a56:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005a5a:	4807      	ldr	r0, [pc, #28]	@ (8005a78 <TbxMbOsalSemGive+0x50>)
 8005a5c:	f7fd f97e 	bl	8002d5c <TbxAssertTrigger>
    /* Give the semaphore by setting its count to 1. */
    TbxCriticalSectionEnter();
 8005a60:	f7fd f992 	bl	8002d88 <TbxCriticalSectionEnter>
    semCtx->count = 1U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	705a      	strb	r2, [r3, #1]
    TbxCriticalSectionExit();
 8005a6a:	f7fd f9a7 	bl	8002dbc <TbxCriticalSectionExit>
  }
} /*** end of TbxMbOsalSemGive ***/
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	08005df0 	.word	0x08005df0

08005a7c <TbxMbOsalSemTake>:
**            timeout).
**
****************************************************************************************/
uint8_t TbxMbOsalSemTake(tTbxMbOsalSem sem,
                         uint16_t      timeoutMs)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	807b      	strh	r3, [r7, #2]
  uint8_t result = TBX_FALSE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]

  /* Verify parameters. */
  TBX_ASSERT(sem != NULL);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <TbxMbOsalSemTake+0x20>
 8005a92:	f240 1125 	movw	r1, #293	@ 0x125
 8005a96:	4834      	ldr	r0, [pc, #208]	@ (8005b68 <TbxMbOsalSemTake+0xec>)
 8005a98:	f7fd f960 	bl	8002d5c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (sem != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d05d      	beq.n	8005b5e <TbxMbOsalSemTake+0xe2>
  {
    /* Convert the semaphore pointer to the context structure. */
    tTbxMbOsalSemCtx * semCtx = (tTbxMbOsalSemCtx *)sem;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(semCtx->type == TBX_MB_OSAL_SEM_CONTEXT_TYPE);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b4c      	cmp	r3, #76	@ 0x4c
 8005aac:	d004      	beq.n	8005ab8 <TbxMbOsalSemTake+0x3c>
 8005aae:	f240 112d 	movw	r1, #301	@ 0x12d
 8005ab2:	482d      	ldr	r0, [pc, #180]	@ (8005b68 <TbxMbOsalSemTake+0xec>)
 8005ab4:	f7fd f952 	bl	8002d5c <TbxAssertTrigger>
    /* Is the semaphore currently available? */
    TbxCriticalSectionEnter();
 8005ab8:	f7fd f966 	bl	8002d88 <TbxCriticalSectionEnter>
    if (semCtx->count > 0U)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <TbxMbOsalSemTake+0x54>
    {
      /* Take the semaphore and update the result for success. */
      semCtx->count = 0U;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	705a      	strb	r2, [r3, #1]
      result = TBX_TRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
 8005ace:	e044      	b.n	8005b5a <TbxMbOsalSemTake+0xde>
     * before the specified timeout. 
     */
    else
    {
      /* Keep track of when the last millisecond was detected. */
      uint16_t volatile lastMsTickTime = TbxMbPortTimerCount();
 8005ad0:	f7fe f856 	bl	8003b80 <TbxMbPortTimerCount>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	817b      	strh	r3, [r7, #10]
      /* Initialize variable with the actual number of milliseconds to wait. */
      uint16_t volatile waitTimeMs = timeoutMs;
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	813b      	strh	r3, [r7, #8]
      /* Enter wait loop. */
      while (waitTimeMs > 0U)
 8005adc:	e039      	b.n	8005b52 <TbxMbOsalSemTake+0xd6>
      {
        /* Temporarily leave the critical section. */
        TbxCriticalSectionExit();
 8005ade:	f7fd f96d 	bl	8002dbc <TbxCriticalSectionExit>
        /* Run the event task to make sure that whatever is supposed to give the
         * semaphore can actually do so.
         */
        TbxMbEventTask();
 8005ae2:	f7fd ff6d 	bl	80039c0 <TbxMbEventTask>
        /* Get the number of ticks that elapsed since the last millisecond detection. 
         * Note that this calculation works, even if the 20 kHz timer counter
         * overflowed.
         */
        uint16_t deltaTicks = TbxMbPortTimerCount() - lastMsTickTime;
 8005ae6:	f7fe f84b 	bl	8003b80 <TbxMbPortTimerCount>
 8005aea:	4603      	mov	r3, r0
 8005aec:	461a      	mov	r2, r3
 8005aee:	897b      	ldrh	r3, [r7, #10]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	81fb      	strh	r3, [r7, #14]
        /* Determine how many milliseconds passed since the last one was detected. */
        uint16_t deltaMs = deltaTicks / 20U;
 8005af6:	89fb      	ldrh	r3, [r7, #14]
 8005af8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b6c <TbxMbOsalSemTake+0xf0>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	81bb      	strh	r3, [r7, #12]
        /* Did one or more milliseconds pass? */
        if (deltaMs > 0U)
 8005b02:	89bb      	ldrh	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d018      	beq.n	8005b3a <TbxMbOsalSemTake+0xbe>
        {
          /* Update the last millisecond detection tick time. Needed for the detection
           * of the next millisecond. Note that this calculation works, even if the
           * lastMsTickTime variable overflows.
           */
          lastMsTickTime += (deltaMs * 20U);
 8005b08:	89bb      	ldrh	r3, [r7, #12]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	0092      	lsls	r2, r2, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	817b      	strh	r3, [r7, #10]
          /* Subtract the elapsed milliseconds from the remaining wait time, with
           * underflow protection. Note that the wait loop automatically stops when
           * waitTimeMs becomes zero.
           */
          if (waitTimeMs >= deltaMs)
 8005b1e:	893b      	ldrh	r3, [r7, #8]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	89ba      	ldrh	r2, [r7, #12]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d806      	bhi.n	8005b36 <TbxMbOsalSemTake+0xba>
          {
            waitTimeMs -= deltaMs;
 8005b28:	893b      	ldrh	r3, [r7, #8]
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	89bb      	ldrh	r3, [r7, #12]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	813b      	strh	r3, [r7, #8]
 8005b34:	e001      	b.n	8005b3a <TbxMbOsalSemTake+0xbe>
          }
          else
          {
            waitTimeMs = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	813b      	strh	r3, [r7, #8]
          }
        }
        /* Re-enter the critical section. */
        TbxCriticalSectionEnter();
 8005b3a:	f7fd f925 	bl	8002d88 <TbxCriticalSectionEnter>
        /* Did the semaphore become available? */
        if (semCtx->count > 0U)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <TbxMbOsalSemTake+0xd6>
        {
          /* Take the semaphore, update the result for success, and leave the loop. */
          semCtx->count = 0U;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	705a      	strb	r2, [r3, #1]
          result = TBX_TRUE;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
          break;
 8005b50:	e003      	b.n	8005b5a <TbxMbOsalSemTake+0xde>
      while (waitTimeMs > 0U)
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1c1      	bne.n	8005ade <TbxMbOsalSemTake+0x62>
        }
      }
    }
    TbxCriticalSectionExit();
 8005b5a:	f7fd f92f 	bl	8002dbc <TbxCriticalSectionExit>
  }
  /* Give the result back to the caller. */
  return result;
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
} /*** end of TbxMbOsalSemTake ****/
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	08005df0 	.word	0x08005df0
 8005b6c:	cccccccd 	.word	0xcccccccd

08005b70 <TbxMbUartInit>:
                   tTbxMbUartDatabits         databits, 
                   tTbxMbUartStopbits         stopbits,
                   tTbxMbUartParity           parity,
                   tTbxMbUartTransmitComplete transmitCompleteFcn,
                   tTbxMbUartDataReceived     dataReceivedFcn)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	4604      	mov	r4, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4623      	mov	r3, r4
 8005b80:	71fb      	strb	r3, [r7, #7]
 8005b82:	4603      	mov	r3, r0
 8005b84:	71bb      	strb	r3, [r7, #6]
 8005b86:	460b      	mov	r3, r1
 8005b88:	717b      	strb	r3, [r7, #5]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	713b      	strb	r3, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	d80b      	bhi.n	8005bac <TbxMbUartInit+0x3c>
 8005b94:	79bb      	ldrb	r3, [r7, #6]
 8005b96:	2b07      	cmp	r3, #7
 8005b98:	d808      	bhi.n	8005bac <TbxMbUartInit+0x3c>
 8005b9a:	797b      	ldrb	r3, [r7, #5]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d805      	bhi.n	8005bac <TbxMbUartInit+0x3c>
 8005ba0:	793b      	ldrb	r3, [r7, #4]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d802      	bhi.n	8005bac <TbxMbUartInit+0x3c>
 8005ba6:	7e3b      	ldrb	r3, [r7, #24]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d903      	bls.n	8005bb4 <TbxMbUartInit+0x44>
 8005bac:	2151      	movs	r1, #81	@ 0x51
 8005bae:	4815      	ldr	r0, [pc, #84]	@ (8005c04 <TbxMbUartInit+0x94>)
 8005bb0:	f7fd f8d4 	bl	8002d5c <TbxAssertTrigger>
             (databits < TBX_MB_UART_NUM_DATABITS) &&
             (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
             (parity < TBX_MB_UART_NUM_PARITY));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	2b07      	cmp	r3, #7
 8005bb8:	d81f      	bhi.n	8005bfa <TbxMbUartInit+0x8a>
 8005bba:	79bb      	ldrb	r3, [r7, #6]
 8005bbc:	2b07      	cmp	r3, #7
 8005bbe:	d81c      	bhi.n	8005bfa <TbxMbUartInit+0x8a>
      (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
 8005bc0:	797b      	ldrb	r3, [r7, #5]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d819      	bhi.n	8005bfa <TbxMbUartInit+0x8a>
      (databits < TBX_MB_UART_NUM_DATABITS) &&
 8005bc6:	793b      	ldrb	r3, [r7, #4]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d816      	bhi.n	8005bfa <TbxMbUartInit+0x8a>
      (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
 8005bcc:	7e3b      	ldrb	r3, [r7, #24]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d813      	bhi.n	8005bfa <TbxMbUartInit+0x8a>
      (parity < TBX_MB_UART_NUM_PARITY))
  {
    /* Store the specified callback functions. */
    uartInfo[port].transmitCompleteFcn = transmitCompleteFcn;
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	490c      	ldr	r1, [pc, #48]	@ (8005c08 <TbxMbUartInit+0x98>)
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    uartInfo[port].dataReceivedFcn = dataReceivedFcn;
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	4a0a      	ldr	r2, [pc, #40]	@ (8005c08 <TbxMbUartInit+0x98>)
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4413      	add	r3, r2
 8005be4:	6a3a      	ldr	r2, [r7, #32]
 8005be6:	605a      	str	r2, [r3, #4]
    /* Request the port module to perform the low-level UART initialization. */
    TbxMbPortUartInit(port, baudrate, databits, stopbits, parity);
 8005be8:	793c      	ldrb	r4, [r7, #4]
 8005bea:	797a      	ldrb	r2, [r7, #5]
 8005bec:	79b9      	ldrb	r1, [r7, #6]
 8005bee:	79f8      	ldrb	r0, [r7, #7]
 8005bf0:	7e3b      	ldrb	r3, [r7, #24]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	f7fd ff8b 	bl	8003b10 <TbxMbPortUartInit>
  }
} /*** end of TbxMbUartInit ***/  
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}
 8005c02:	bf00      	nop
 8005c04:	08005e20 	.word	0x08005e20
 8005c08:	20000a50 	.word	0x20000a50

08005c0c <TbxMbUartTransmit>:
**
****************************************************************************************/
uint8_t TbxMbUartTransmit(tTbxMbUartPort         port, 
                          uint8_t        const * data, 
                          uint16_t               len)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80bb      	strh	r3, [r7, #4]
  uint8_t result = TBX_ERROR;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]

  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	2b07      	cmp	r3, #7
 8005c24:	d805      	bhi.n	8005c32 <TbxMbUartTransmit+0x26>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <TbxMbUartTransmit+0x26>
 8005c2c:	88bb      	ldrh	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <TbxMbUartTransmit+0x2e>
 8005c32:	217b      	movs	r1, #123	@ 0x7b
 8005c34:	480c      	ldr	r0, [pc, #48]	@ (8005c68 <TbxMbUartTransmit+0x5c>)
 8005c36:	f7fd f891 	bl	8002d5c <TbxAssertTrigger>
             (data != NULL) &&
             (len > 0U));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	2b07      	cmp	r3, #7
 8005c3e:	d80d      	bhi.n	8005c5c <TbxMbUartTransmit+0x50>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <TbxMbUartTransmit+0x50>
      (data != NULL) &&
 8005c46:	88bb      	ldrh	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <TbxMbUartTransmit+0x50>
      (len > 0U))
  {
    /* Request the port module to perform the low-level UART data transmission. */
    result = TbxMbPortUartTransmit(port, data, len);
 8005c4c:	88ba      	ldrh	r2, [r7, #4]
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fd ff70 	bl	8003b38 <TbxMbPortUartTransmit>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbUartTransmit ***/
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	08005e20 	.word	0x08005e20

08005c6c <memset>:
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d100      	bne.n	8005c76 <memset+0xa>
 8005c74:	4770      	bx	lr
 8005c76:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7a:	e7f9      	b.n	8005c70 <memset+0x4>

08005c7c <__libc_init_array>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005cb4 <__libc_init_array+0x38>)
 8005c80:	4c0d      	ldr	r4, [pc, #52]	@ (8005cb8 <__libc_init_array+0x3c>)
 8005c82:	1b64      	subs	r4, r4, r5
 8005c84:	10a4      	asrs	r4, r4, #2
 8005c86:	2600      	movs	r6, #0
 8005c88:	42a6      	cmp	r6, r4
 8005c8a:	d109      	bne.n	8005ca0 <__libc_init_array+0x24>
 8005c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005cbc <__libc_init_array+0x40>)
 8005c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005cc0 <__libc_init_array+0x44>)
 8005c90:	f000 f818 	bl	8005cc4 <_init>
 8005c94:	1b64      	subs	r4, r4, r5
 8005c96:	10a4      	asrs	r4, r4, #2
 8005c98:	2600      	movs	r6, #0
 8005c9a:	42a6      	cmp	r6, r4
 8005c9c:	d105      	bne.n	8005caa <__libc_init_array+0x2e>
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca4:	4798      	blx	r3
 8005ca6:	3601      	adds	r6, #1
 8005ca8:	e7ee      	b.n	8005c88 <__libc_init_array+0xc>
 8005caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cae:	4798      	blx	r3
 8005cb0:	3601      	adds	r6, #1
 8005cb2:	e7f2      	b.n	8005c9a <__libc_init_array+0x1e>
 8005cb4:	08006068 	.word	0x08006068
 8005cb8:	08006068 	.word	0x08006068
 8005cbc:	08006068 	.word	0x08006068
 8005cc0:	0800606c 	.word	0x0800606c

08005cc4 <_init>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr

08005cd0 <_fini>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr
